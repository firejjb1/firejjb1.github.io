//['DrawColorOp', 'StrikeClientLoad', 'TranslateOp', 'NoopOp', 'SaveOp', 'RestoreOp', 'ClipRectOp', 'DrawRRectOp', 'DrawRectOp', 'ClipRRectOp', 'ConcatOp', 'DrawPathOp', 'DrawOvalOp', 'DrawImageRectOp', 'DrawSlugOp']

#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include "gm.h"

#include "include/core/SkCanvas.h"
#include "include/core/SkBitmap.h"
#include "include/core/SkBlendMode.h"
#include "include/core/SkColor.h"
#include "include/core/SkRRect.h"
#include "include/core/SkPath.h"
#include "include/private/chromium/Slug.h"
#include "src/core/SkPaintPriv.h"
#include "src/core/SkReadBuffer.h"

#include "tools/ToolUtils.h"

#define inf 9999999

// Deserialize hex string to raw data
void hexToRawData(const std::string& hexString, void* output, size_t size) {
    unsigned char* byteOutput = static_cast<unsigned char*>(output);
    for (size_t i = 0; i < size; ++i) {
        std::istringstream iss(hexString.substr(i * 2, 2));
        int byte;
        iss >> std::hex >> byte;
        byteOutput[i] = static_cast<unsigned char>(byte);
    }
}



// Begin loading ops and loading data when needed
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest1, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect0 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect0, 28);
        SkReadBuffer paintBuffer_rect0(paintdata_rect0, 28);
        SkPaint paintRect0 = SkPaintPriv::Unflatten(paintBuffer_rect0);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect1 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect1, 28);
        SkReadBuffer paintBuffer_rect1(paintdata_rect1, 28);
        SkPaint paintRect1 = SkPaintPriv::Unflatten(paintBuffer_rect1);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect2 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect2, 28);
        SkReadBuffer paintBuffer_rect2(paintdata_rect2, 28);
        SkPaint paintRect2 = SkPaintPriv::Unflatten(paintBuffer_rect2);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect3 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect3, 28);
        SkReadBuffer paintBuffer_rect3(paintdata_rect3, 28);
        SkPaint paintRect3 = SkPaintPriv::Unflatten(paintBuffer_rect3);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect4 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect4, 28);
        SkReadBuffer paintBuffer_rect4(paintdata_rect4, 28);
        SkPaint paintRect4 = SkPaintPriv::Unflatten(paintBuffer_rect4);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect5 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect5, 28);
        SkReadBuffer paintBuffer_rect5(paintdata_rect5, 28);
        SkPaint paintRect5 = SkPaintPriv::Unflatten(paintBuffer_rect5);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect6 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect6, 28);
        SkReadBuffer paintBuffer_rect6(paintdata_rect6, 28);
        SkPaint paintRect6 = SkPaintPriv::Unflatten(paintBuffer_rect6);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect7 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect7, 28);
        SkReadBuffer paintBuffer_rect7(paintdata_rect7, 28);
        SkPaint paintRect7 = SkPaintPriv::Unflatten(paintBuffer_rect7);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect8 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect8, 28);
        SkReadBuffer paintBuffer_rect8(paintdata_rect8, 28);
        SkPaint paintRect8 = SkPaintPriv::Unflatten(paintBuffer_rect8);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect0 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect0, 28);
        SkReadBuffer paintBuffer_rrect0(paintdata_rrect0, 28);
        SkPaint paintRRect0 = SkPaintPriv::Unflatten(paintBuffer_rrect0);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect1 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect1, 28);
        SkReadBuffer paintBuffer_rrect1(paintdata_rrect1, 28);
        SkPaint paintRRect1 = SkPaintPriv::Unflatten(paintBuffer_rrect1);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 1344.000000, 608.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 3108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect0);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 777.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect1);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 774.000000, 1316.000000, 777.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect2);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 216.000000, 1274.000000, 237.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect3);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 293.000000, 1274.000000, 314.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect4);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 370.000000, 1274.000000, 391.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect5);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 447.000000, 1274.000000, 468.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect6);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 524.000000, 1274.000000, 545.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect7);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 87.000000, 441.000000, 108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect8);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 53.000000, 168.000000, 165.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect0);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 54.500000, 166.500000, 163.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect1);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762418762249.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest2, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect9 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect9, 28);
        SkReadBuffer paintBuffer_rect9(paintdata_rect9, 28);
        SkPaint paintRect9 = SkPaintPriv::Unflatten(paintBuffer_rect9);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect10 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect10, 28);
        SkReadBuffer paintBuffer_rect10(paintdata_rect10, 28);
        SkPaint paintRect10 = SkPaintPriv::Unflatten(paintBuffer_rect10);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect11 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect11, 28);
        SkReadBuffer paintBuffer_rect11(paintdata_rect11, 28);
        SkPaint paintRect11 = SkPaintPriv::Unflatten(paintBuffer_rect11);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect12 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect12, 28);
        SkReadBuffer paintBuffer_rect12(paintdata_rect12, 28);
        SkPaint paintRect12 = SkPaintPriv::Unflatten(paintBuffer_rect12);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect13 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect13, 28);
        SkReadBuffer paintBuffer_rect13(paintdata_rect13, 28);
        SkPaint paintRect13 = SkPaintPriv::Unflatten(paintBuffer_rect13);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect14 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect14, 28);
        SkReadBuffer paintBuffer_rect14(paintdata_rect14, 28);
        SkPaint paintRect14 = SkPaintPriv::Unflatten(paintBuffer_rect14);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect15 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect15, 28);
        SkReadBuffer paintBuffer_rect15(paintdata_rect15, 28);
        SkPaint paintRect15 = SkPaintPriv::Unflatten(paintBuffer_rect15);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect16 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect16, 28);
        SkReadBuffer paintBuffer_rect16(paintdata_rect16, 28);
        SkPaint paintRect16 = SkPaintPriv::Unflatten(paintBuffer_rect16);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data0 = malloc(240);
        hexToRawData("0000803f00001cc20600b3420000804000001a4300003044f80000000000803f0000000000001a43000000000000803f0000c44200000000000000000000803f010000000100000000000000010000000000803f0000000000001a43000000000000803f0000c44200000000000000000000803f00001b4300006c42000073430000cc420200000000001b4300006c420000494300006c426f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data0, 240);
        auto slug0 = sktext::gpu::Slug::Deserialize(data0, 240);
        free(data0);
        void *paintdata_slug0 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug0, 28);
        SkReadBuffer paintbuffer_slug0 = SkReadBuffer(paintdata_slug0, 28);
        SkPaint paint_slug0 = SkPaintPriv::Unflatten(paintbuffer_slug0);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data1 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000c2cc4300003044f80000000000803f0000000000c2cc43000000000000803f0000c44200000000000000000000803f010000000100000000000000010000000000803f0000000000c2cc43000000000000803f0000c44200000000000000000000803f0080cd43000070420080f9430000ca42020000000080cd43000070420000e443000070426f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d26b0100a86b0100", data1, 240);
        auto slug1 = sktext::gpu::Slug::Deserialize(data1, 240);
        free(data1);
        void *paintdata_slug1 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug1, 28);
        SkReadBuffer paintbuffer_slug1 = SkReadBuffer(paintdata_slug1, 28);
        SkPaint paint_slug1 = SkPaintPriv::Unflatten(paintbuffer_slug1);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data2 = malloc(228);
        hexToRawData("0000004000001cc200003042000080400042264400003044e80000000000803f0000000000422644000000000000803f0000c44200000000000000000000803f010000000100000000000000010000000000803f0000000000422644000000000000803f0000c44200000000000000000000803f00c0264400006c42004031440000cc420100000000c0264400006c426f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data2, 228);
        auto slug2 = sktext::gpu::Slug::Deserialize(data2, 228);
        free(data2);
        void *paintdata_slug2 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug2, 28);
        SkReadBuffer paintbuffer_slug2 = SkReadBuffer(paintdata_slug2, 28);
        SkPaint paint_slug2 = SkPaintPriv::Unflatten(paintbuffer_slug2);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data3 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c904400003044080100000000803f00000000806c9044000000000000803f0000c44200000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f0000c44200000000000000000000803f00c090440000b642006096440000c6420300000000c090440000b642002093440000b642006095440000b642eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data3, 252);
        auto slug3 = sktext::gpu::Slug::Deserialize(data3, 252);
        free(data3);
        void *paintdata_slug3 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug3, 28);
        SkReadBuffer paintbuffer_slug3 = SkReadBuffer(paintdata_slug3, 28);
        SkPaint paint_slug3 = SkPaintPriv::Unflatten(paintbuffer_slug3);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect17 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect17, 28);
        SkReadBuffer paintBuffer_rect17(paintdata_rect17, 28);
        SkPaint paintRect17 = SkPaintPriv::Unflatten(paintBuffer_rect17);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect2 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect2, 28);
        SkReadBuffer paintBuffer_rrect2(paintdata_rrect2, 28);
        SkPaint paintRRect2 = SkPaintPriv::Unflatten(paintBuffer_rrect2);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect3 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect3, 28);
        SkReadBuffer paintBuffer_rrect3(paintdata_rrect3, 28);
        SkPaint paintRRect3 = SkPaintPriv::Unflatten(paintBuffer_rrect3);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -606.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 606.000000, 1344.000000, 1214.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 3108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect9);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 777.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect10);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 774.000000, 1316.000000, 777.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect11);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 777.000000, 1316.000000, 1554.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect12);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1551.000000, 1316.000000, 1554.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect13);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 993.000000, 1274.000000, 1014.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect14);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1070.000000, 1274.000000, 1091.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect15);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1147.000000, 1274.000000, 1168.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect16);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug0->draw(canvas, paint_slug0);
        slug0->draw(canvas);
        free(paintdata_slug0);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug1->draw(canvas, paint_slug1);
        slug1->draw(canvas);
        free(paintdata_slug1);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug2->draw(canvas, paint_slug2);
        slug2->draw(canvas);
        free(paintdata_slug2);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug3->draw(canvas, paint_slug3);
        slug3->draw(canvas);
        free(paintdata_slug3);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 864.000000, 441.000000, 885.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect17);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 830.000000, 168.000000, 942.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect2);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 831.500000, 166.500000, 940.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect3);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 218F6FD22A1503484FF178A07B190261_1759762418788474.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest3, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect18 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect18, 28);
        SkReadBuffer paintBuffer_rect18(paintdata_rect18, 28);
        SkPaint paintRect18 = SkPaintPriv::Unflatten(paintBuffer_rect18);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect19 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect19, 28);
        SkReadBuffer paintBuffer_rect19(paintdata_rect19, 28);
        SkPaint paintRect19 = SkPaintPriv::Unflatten(paintBuffer_rect19);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect20 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect20, 28);
        SkReadBuffer paintBuffer_rect20(paintdata_rect20, 28);
        SkPaint paintRect20 = SkPaintPriv::Unflatten(paintBuffer_rect20);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect21 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect21, 28);
        SkReadBuffer paintBuffer_rect21(paintdata_rect21, 28);
        SkPaint paintRect21 = SkPaintPriv::Unflatten(paintBuffer_rect21);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect22 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect22, 28);
        SkReadBuffer paintBuffer_rect22(paintdata_rect22, 28);
        SkPaint paintRect22 = SkPaintPriv::Unflatten(paintBuffer_rect22);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect23 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect23, 28);
        SkReadBuffer paintBuffer_rect23(paintdata_rect23, 28);
        SkPaint paintRect23 = SkPaintPriv::Unflatten(paintBuffer_rect23);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect24 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect24, 28);
        SkReadBuffer paintBuffer_rect24(paintdata_rect24, 28);
        SkPaint paintRect24 = SkPaintPriv::Unflatten(paintBuffer_rect24);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect25 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect25, 28);
        SkReadBuffer paintBuffer_rect25(paintdata_rect25, 28);
        SkPaint paintRect25 = SkPaintPriv::Unflatten(paintBuffer_rect25);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data4 = malloc(240);
        hexToRawData("0000803f00001cc20600b3420000804000001a430020b944f80000000000803f0000000000001a43000000000000803f0080864300000000000000000000803f010000000100000000000000010000000000803f0000000000001a43000000000000803f0080864300000000000000000000803f00001b430000664300007343008088430200000000001b430000664300004943000066436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data4, 240);
        auto slug4 = sktext::gpu::Slug::Deserialize(data4, 240);
        free(data4);
        void *paintdata_slug4 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug4, 28);
        SkReadBuffer paintbuffer_slug4 = SkReadBuffer(paintdata_slug4, 28);
        SkPaint paint_slug4 = SkPaintPriv::Unflatten(paintbuffer_slug4);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data5 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000c2cc430020b944f80000000000803f0000000000c2cc43000000000000803f0080864300000000000000000000803f010000000100000000000000010000000000803f0000000000c2cc43000000000000803f0080864300000000000000000000803f0080cd43000067430080f94300008843020000000080cd43000067430000e443000067436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d26b0100a86b0100", data5, 240);
        auto slug5 = sktext::gpu::Slug::Deserialize(data5, 240);
        free(data5);
        void *paintdata_slug5 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug5, 28);
        SkReadBuffer paintbuffer_slug5 = SkReadBuffer(paintdata_slug5, 28);
        SkPaint paint_slug5 = SkPaintPriv::Unflatten(paintbuffer_slug5);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data6 = malloc(228);
        hexToRawData("0000004000001cc20000304200008040004226440020b944e80000000000803f0000000000422644000000000000803f0080864300000000000000000000803f010000000100000000000000010000000000803f0000000000422644000000000000803f0080864300000000000000000000803f00c026440000664300403144008088430100000000c02644000066436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data6, 228);
        auto slug6 = sktext::gpu::Slug::Deserialize(data6, 228);
        free(data6);
        void *paintdata_slug6 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug6, 28);
        SkReadBuffer paintbuffer_slug6 = SkReadBuffer(paintdata_slug6, 28);
        SkPaint paint_slug6 = SkPaintPriv::Unflatten(paintbuffer_slug6);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data7 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c90440020b944080100000000803f00000000806c9044000000000000803f0080864300000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f0080864300000000000000000000803f00c090440000834300609644000087430300000000c090440000834300209344000083430060954400008343eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data7, 252);
        auto slug7 = sktext::gpu::Slug::Deserialize(data7, 252);
        free(data7);
        void *paintdata_slug7 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug7, 28);
        SkReadBuffer paintbuffer_slug7 = SkReadBuffer(paintdata_slug7, 28);
        SkPaint paint_slug7 = SkPaintPriv::Unflatten(paintbuffer_slug7);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect26 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect26, 28);
        SkReadBuffer paintBuffer_rect26(paintdata_rect26, 28);
        SkPaint paintRect26 = SkPaintPriv::Unflatten(paintBuffer_rect26);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect4 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect4, 28);
        SkReadBuffer paintBuffer_rrect4(paintdata_rrect4, 28);
        SkPaint paintRRect4 = SkPaintPriv::Unflatten(paintBuffer_rrect4);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect5 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect5, 28);
        SkReadBuffer paintBuffer_rrect5(paintdata_rrect5, 28);
        SkPaint paintRRect5 = SkPaintPriv::Unflatten(paintBuffer_rrect5);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1212.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1212.000000, 1344.000000, 1820.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 3108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect18);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 777.000000, 1316.000000, 1554.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect19);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1551.000000, 1316.000000, 1554.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect20);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1224.000000, 1274.000000, 1245.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect21);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1301.000000, 1274.000000, 1322.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect22);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1554.000000, 1316.000000, 2331.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect23);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2328.000000, 1316.000000, 2331.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect24);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1770.000000, 1274.000000, 1791.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect25);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug4->draw(canvas, paint_slug4);
        slug4->draw(canvas);
        free(paintdata_slug4);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug5->draw(canvas, paint_slug5);
        slug5->draw(canvas);
        free(paintdata_slug5);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug6->draw(canvas, paint_slug6);
        slug6->draw(canvas);
        free(paintdata_slug6);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug7->draw(canvas, paint_slug7);
        slug7->draw(canvas);
        free(paintdata_slug7);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 1641.000000, 441.000000, 1662.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect26);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1607.000000, 168.000000, 1719.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect4);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1608.500000, 166.500000, 1717.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect5);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 72216F1753D1933B21A8B6919B109039_1759762418803120.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest4, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect27 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect27, 28);
        SkReadBuffer paintBuffer_rect27(paintdata_rect27, 28);
        SkPaint paintRect27 = SkPaintPriv::Unflatten(paintBuffer_rect27);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect28 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect28, 28);
        SkReadBuffer paintBuffer_rect28(paintdata_rect28, 28);
        SkPaint paintRect28 = SkPaintPriv::Unflatten(paintBuffer_rect28);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect29 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect29, 28);
        SkReadBuffer paintBuffer_rect29(paintdata_rect29, 28);
        SkPaint paintRect29 = SkPaintPriv::Unflatten(paintBuffer_rect29);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect30 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect30, 28);
        SkReadBuffer paintBuffer_rect30(paintdata_rect30, 28);
        SkPaint paintRect30 = SkPaintPriv::Unflatten(paintBuffer_rect30);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect31 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect31, 28);
        SkReadBuffer paintBuffer_rect31(paintdata_rect31, 28);
        SkPaint paintRect31 = SkPaintPriv::Unflatten(paintBuffer_rect31);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect32 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect32, 28);
        SkReadBuffer paintBuffer_rect32(paintdata_rect32, 28);
        SkPaint paintRect32 = SkPaintPriv::Unflatten(paintBuffer_rect32);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect33 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect33, 28);
        SkReadBuffer paintBuffer_rect33(paintdata_rect33, 28);
        SkPaint paintRect33 = SkPaintPriv::Unflatten(paintBuffer_rect33);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect34 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect34, 28);
        SkReadBuffer paintBuffer_rect34(paintdata_rect34, 28);
        SkPaint paintRect34 = SkPaintPriv::Unflatten(paintBuffer_rect34);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect35 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect35, 28);
        SkReadBuffer paintBuffer_rect35(paintdata_rect35, 28);
        SkPaint paintRect35 = SkPaintPriv::Unflatten(paintBuffer_rect35);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data8 = malloc(240);
        hexToRawData("0000803f00001cc20600b3420000804000001a4300200d45f80000000000803f0000000000001a43000000000000803f0000dc4300000000000000000000803f010000000100000000000000010000000000803f0000000000001a43000000000000803f0000dc4300000000000000000000803f00001b430080c843000073430000de430200000000001b430080c843000049430080c8436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data8, 240);
        auto slug8 = sktext::gpu::Slug::Deserialize(data8, 240);
        free(data8);
        void *paintdata_slug8 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug8, 28);
        SkReadBuffer paintbuffer_slug8 = SkReadBuffer(paintdata_slug8, 28);
        SkPaint paint_slug8 = SkPaintPriv::Unflatten(paintbuffer_slug8);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data9 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000c2cc4300200d45f80000000000803f0000000000c2cc43000000000000803f0000dc4300000000000000000000803f010000000100000000000000010000000000803f0000000000c2cc43000000000000803f0000dc4300000000000000000000803f0080cd430000c9430080f9430080dd43020000000080cd430000c9430000e4430000c9436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d26b0100a86b0100", data9, 240);
        auto slug9 = sktext::gpu::Slug::Deserialize(data9, 240);
        free(data9);
        void *paintdata_slug9 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug9, 28);
        SkReadBuffer paintbuffer_slug9 = SkReadBuffer(paintdata_slug9, 28);
        SkPaint paint_slug9 = SkPaintPriv::Unflatten(paintbuffer_slug9);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data10 = malloc(228);
        hexToRawData("0000004000001cc200003042000080400042264400200d45e80000000000803f0000000000422644000000000000803f0000dc4300000000000000000000803f010000000100000000000000010000000000803f0000000000422644000000000000803f0000dc4300000000000000000000803f00c026440080c843004031440000de430100000000c026440080c8436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data10, 228);
        auto slug10 = sktext::gpu::Slug::Deserialize(data10, 228);
        free(data10);
        void *paintdata_slug10 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug10, 28);
        SkReadBuffer paintbuffer_slug10 = SkReadBuffer(paintdata_slug10, 28);
        SkPaint paint_slug10 = SkPaintPriv::Unflatten(paintbuffer_slug10);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data11 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c904400200d45080100000000803f00000000806c9044000000000000803f0000dc4300000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f0000dc4300000000000000000000803f00c090440080d843006096440080dc430300000000c090440080d843002093440080d843006095440080d843eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data11, 252);
        auto slug11 = sktext::gpu::Slug::Deserialize(data11, 252);
        free(data11);
        void *paintdata_slug11 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug11, 28);
        SkReadBuffer paintbuffer_slug11 = SkReadBuffer(paintdata_slug11, 28);
        SkPaint paint_slug11 = SkPaintPriv::Unflatten(paintbuffer_slug11);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect36 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect36, 28);
        SkReadBuffer paintBuffer_rect36(paintdata_rect36, 28);
        SkPaint paintRect36 = SkPaintPriv::Unflatten(paintBuffer_rect36);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect6 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect6, 28);
        SkReadBuffer paintBuffer_rrect6(paintdata_rrect6, 28);
        SkPaint paintRRect6 = SkPaintPriv::Unflatten(paintBuffer_rrect6);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect7 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect7, 28);
        SkReadBuffer paintBuffer_rrect7(paintdata_rrect7, 28);
        SkPaint paintRRect7 = SkPaintPriv::Unflatten(paintBuffer_rrect7);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1344.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 3108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect27);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1554.000000, 1316.000000, 2331.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect28);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2328.000000, 1316.000000, 2331.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect29);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1847.000000, 1274.000000, 1868.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect30);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1924.000000, 1274.000000, 1945.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect31);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2001.000000, 1274.000000, 2022.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect32);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2078.000000, 1274.000000, 2099.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect33);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2331.000000, 1316.000000, 3108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect34);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3105.000000, 1316.000000, 3108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect35);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug8->draw(canvas, paint_slug8);
        slug8->draw(canvas);
        free(paintdata_slug8);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug9->draw(canvas, paint_slug9);
        slug9->draw(canvas);
        free(paintdata_slug9);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug10->draw(canvas, paint_slug10);
        slug10->draw(canvas);
        free(paintdata_slug10);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug11->draw(canvas, paint_slug11);
        slug11->draw(canvas);
        free(paintdata_slug11);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 2418.000000, 441.000000, 2439.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect36);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 2384.000000, 168.000000, 2496.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect6);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 2385.500000, 166.500000, 2494.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect7);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 69F5BD3189171B8691AD66A449205439_1759762418804323.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest5, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect37 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect37, 28);
        SkReadBuffer paintBuffer_rect37(paintdata_rect37, 28);
        SkPaint paintRect37 = SkPaintPriv::Unflatten(paintBuffer_rect37);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect38 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect38, 28);
        SkReadBuffer paintBuffer_rect38(paintdata_rect38, 28);
        SkPaint paintRect38 = SkPaintPriv::Unflatten(paintBuffer_rect38);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect39 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect39, 28);
        SkReadBuffer paintBuffer_rect39(paintdata_rect39, 28);
        SkPaint paintRect39 = SkPaintPriv::Unflatten(paintBuffer_rect39);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect40 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect40, 28);
        SkReadBuffer paintBuffer_rect40(paintdata_rect40, 28);
        SkPaint paintRect40 = SkPaintPriv::Unflatten(paintBuffer_rect40);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect41 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect41, 28);
        SkReadBuffer paintBuffer_rect41(paintdata_rect41, 28);
        SkPaint paintRect41 = SkPaintPriv::Unflatten(paintBuffer_rect41);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect42 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect42, 28);
        SkReadBuffer paintBuffer_rect42(paintdata_rect42, 28);
        SkPaint paintRect42 = SkPaintPriv::Unflatten(paintBuffer_rect42);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect43 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect43, 28);
        SkReadBuffer paintBuffer_rect43(paintdata_rect43, 28);
        SkPaint paintRect43 = SkPaintPriv::Unflatten(paintBuffer_rect43);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect44 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect44, 28);
        SkReadBuffer paintBuffer_rect44(paintdata_rect44, 28);
        SkPaint paintRect44 = SkPaintPriv::Unflatten(paintBuffer_rect44);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data12 = malloc(240);
        hexToRawData("0000803f00001cc20600b3420000804000001a4300b03d45f80000000000803f0000000000001a43000000000000803f00c0184400000000000000000000803f010000000100000000000000010000000000803f0000000000001a43000000000000803f00c0184400000000000000000000803f00001b4300000f440000734300c019440200000000001b4300000f440000494300000f446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data12, 240);
        auto slug12 = sktext::gpu::Slug::Deserialize(data12, 240);
        free(data12);
        void *paintdata_slug12 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug12, 28);
        SkReadBuffer paintbuffer_slug12 = SkReadBuffer(paintdata_slug12, 28);
        SkPaint paint_slug12 = SkPaintPriv::Unflatten(paintbuffer_slug12);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data13 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000c2cc4300b03d45f80000000000803f0000000000c2cc43000000000000803f00c0184400000000000000000000803f010000000100000000000000010000000000803f0000000000c2cc43000000000000803f00c0184400000000000000000000803f0080cd4300400f440080f94300801944020000000080cd4300400f440000e44300400f446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d26b0100a86b0100", data13, 240);
        auto slug13 = sktext::gpu::Slug::Deserialize(data13, 240);
        free(data13);
        void *paintdata_slug13 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug13, 28);
        SkReadBuffer paintbuffer_slug13 = SkReadBuffer(paintdata_slug13, 28);
        SkPaint paint_slug13 = SkPaintPriv::Unflatten(paintbuffer_slug13);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data14 = malloc(228);
        hexToRawData("0000004000001cc200003042000080400042264400b03d45e80000000000803f0000000000422644000000000000803f00c0184400000000000000000000803f010000000100000000000000010000000000803f0000000000422644000000000000803f00c0184400000000000000000000803f00c0264400000f440040314400c019440100000000c0264400000f446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data14, 228);
        auto slug14 = sktext::gpu::Slug::Deserialize(data14, 228);
        free(data14);
        void *paintdata_slug14 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug14, 28);
        SkReadBuffer paintbuffer_slug14 = SkReadBuffer(paintdata_slug14, 28);
        SkPaint paint_slug14 = SkPaintPriv::Unflatten(paintbuffer_slug14);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data15 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c904400b03d45080100000000803f00000000806c9044000000000000803f00c0184400000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f00c0184400000000000000000000803f00c090440000174400609644000019440300000000c090440000174400209344000017440060954400001744eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data15, 252);
        auto slug15 = sktext::gpu::Slug::Deserialize(data15, 252);
        free(data15);
        void *paintdata_slug15 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug15, 28);
        SkReadBuffer paintbuffer_slug15 = SkReadBuffer(paintdata_slug15, 28);
        SkPaint paint_slug15 = SkPaintPriv::Unflatten(paintbuffer_slug15);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect45 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect45, 28);
        SkReadBuffer paintBuffer_rect45(paintdata_rect45, 28);
        SkPaint paintRect45 = SkPaintPriv::Unflatten(paintBuffer_rect45);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect8 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect8, 28);
        SkReadBuffer paintBuffer_rrect8(paintdata_rrect8, 28);
        SkPaint paintRRect8 = SkPaintPriv::Unflatten(paintBuffer_rrect8);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect9 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect9, 28);
        SkReadBuffer paintBuffer_rrect9(paintdata_rrect9, 28);
        SkPaint paintRRect9 = SkPaintPriv::Unflatten(paintBuffer_rrect9);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -2424.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2424.000000, 1344.000000, 3032.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 3108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect37);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2331.000000, 1316.000000, 3108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect38);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3105.000000, 1316.000000, 3108.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect39);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2547.000000, 1274.000000, 2568.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect40);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2624.000000, 1274.000000, 2645.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect41);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2701.000000, 1274.000000, 2722.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect42);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2778.000000, 1274.000000, 2799.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect43);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2855.000000, 1274.000000, 2876.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect44);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug12->draw(canvas, paint_slug12);
        slug12->draw(canvas);
        free(paintdata_slug12);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug13->draw(canvas, paint_slug13);
        slug13->draw(canvas);
        free(paintdata_slug13);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug14->draw(canvas, paint_slug14);
        slug14->draw(canvas);
        free(paintdata_slug14);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug15->draw(canvas, paint_slug15);
        slug15->draw(canvas);
        free(paintdata_slug15);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 2418.000000, 441.000000, 2439.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect45);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 2384.000000, 168.000000, 2496.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect8);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 2385.500000, 166.500000, 2494.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect9);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762418805532.paintbuf
// Failed to find matching Op: StrikeClientLo

                DEF_SIMPLE_GM(loggedskiatest6, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawColorOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect46 = malloc(28);
        hexToRawData("0000000000008040fbfa7a3ffbfa7a3ffbfa7a3f0000803f01030000", paintdata_rect46, 28);
        SkReadBuffer paintBuffer_rect46(paintdata_rect46, 28);
        SkPaint paintRect46 = SkPaintPriv::Unflatten(paintBuffer_rect46);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect47 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect47, 28);
        SkReadBuffer paintBuffer_rect47(paintdata_rect47, 28);
        SkPaint paintRect47 = SkPaintPriv::Unflatten(paintBuffer_rect47);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect10 = malloc(28);
        hexToRawData("0000000000008040e4e3633fe5e4643fe7e6663f0000803f01030000", paintdata_rrect10, 28);
        SkReadBuffer paintBuffer_rrect10(paintdata_rrect10, 28);
        SkPaint paintRRect10 = SkPaintPriv::Unflatten(paintBuffer_rrect10);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect11 = malloc(28);
        hexToRawData("0000000000008040eceb6b3feceb6b3fedec6c3f0000803f01030000", paintdata_rrect11, 28);
        SkReadBuffer paintBuffer_rrect11(paintdata_rrect11, 28);
        SkPaint paintRRect11 = SkPaintPriv::Unflatten(paintBuffer_rrect11);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data16 = malloc(300);
        hexToRawData("0000803f000028c20680aa430000a04000808f430000c042480100000000803f0000000000808f43000000000000803f0000c04200000000000000000000803f010000000100000000000000010000000000803f0000000000808f43000000000000803f0000c04200000000000000000000803f000090430000584200001d440000ca420700000000009043000058420080a843000058420000c143000058420000da43000058420000f4430000b242004005440000584200c0114400005c421dbc841c4c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b4300700000030cd00004831010078bb0000288a0000a0c60100b8c60000a8770000", data16, 300);
        auto slug16 = sktext::gpu::Slug::Deserialize(data16, 300);
        free(data16);
        void *paintdata_slug16 = malloc(28);
        hexToRawData("0000000000008040bebd3d3fbebd3d3fbebd3d3f0000803f01030000", paintdata_slug16, 28);
        SkReadBuffer paintbuffer_slug16 = SkReadBuffer(paintdata_slug16, 28);
        SkPaint paint_slug16 = SkPaintPriv::Unflatten(paintbuffer_slug16);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data17 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000000000000000c442e80000000000803f0000000000005243000000000000803f0000d84200000000000000000000803f010000000100000000000000010000000000803f0000000000005243000000000000803f0000d84200000000000000000000803f0000554300005c42008083430000d442010000000000554300005c4238a6fd734c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b4300100000058000000", data17, 228);
        auto slug17 = sktext::gpu::Slug::Deserialize(data17, 228);
        free(data17);
        void *paintdata_slug17 = malloc(28);
        hexToRawData("0000000000008040bebd3d3fbebd3d3fbebd3d3f0000803f01030000", paintdata_slug17, 28);
        SkReadBuffer paintbuffer_slug17 = SkReadBuffer(paintdata_slug17, 28);
        SkPaint paint_slug17 = SkPaintPriv::Unflatten(paintbuffer_slug17);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data18 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d6042000000008097974400007543e80000000000803f0000000080979744000000000000803f0000754300000000000000000000803f010000000100000000000000010000000000803f0000000080979744000000000000803f0000754300000000000000000000803f0000984400004c4300409e4400006743010000000000984400004c4338a6fd734c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b4300100000027000000", data18, 228);
        auto slug18 = sktext::gpu::Slug::Deserialize(data18, 228);
        free(data18);
        void *paintdata_slug18 = malloc(28);
        hexToRawData("0000000000008040a6a5253faead2d3fb6b5353f0000803f01030000", paintdata_slug18, 28);
        SkReadBuffer paintbuffer_slug18 = SkReadBuffer(paintdata_slug18, 28);
        SkPaint paint_slug18 = SkPaintPriv::Unflatten(paintbuffer_slug18);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect48 = malloc(284);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200d00000000000803f0000000000000000000000000000803f00000c4300000000000000000000803f10000000536b4c696e6561724772616469656e7400000000900000000100002003000000fbfa7a3ffbfa7a3ffbfa7a3f0000803ffbfa7a3ffbfa7a3ffbfa7a3f0000803f48e17a3f48e17a3f48e17a3f0000000044000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f0000000000000000000028420000000000000000000000000000000000000000", paintdata_rect48, 284);
        SkReadBuffer paintBuffer_rect48(paintdata_rect48, 284);
        SkPaint paintRect48 = SkPaintPriv::Unflatten(paintBuffer_rect48);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect49 = malloc(284);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200d00000000000803f0000000000c09f44000000000000803f00000c4300000000000000000000803f10000000536b4c696e6561724772616469656e7400000000900000000100002003000000fbfa7a3ffbfa7a3ffbfa7a3f0000803ffbfa7a3ffbfa7a3ffbfa7a3f0000803f48e17a3f48e17a3f48e17a3f0000000044000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f0000284200000000000000000000000000000000000000000000000000000000", paintdata_rect49, 284);
        SkReadBuffer paintBuffer_rect49(paintdata_rect49, 284);
        SkPaint paintRect49 = SkPaintPriv::Unflatten(paintBuffer_rect49);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect50 = malloc(300);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200e00000000000803f0000000000000000000000000000803f0000000000000000000000000000803f10000000536b4c696e6561724772616469656e7400000000a0000000010000a003000000fbfa7a3ffbfa7a3ffbfa7a3f0000803ffbfa7a3ffbfa7a3ffbfa7a3f0000803f48e17a3f48e17a3f48e17a3f0000000044000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f0300000000000000cdcc4c3e0000803f0000284200000000000000000000000000000000000000000000000000000000", paintdata_rect50, 300);
        SkReadBuffer paintBuffer_rect50(paintdata_rect50, 300);
        SkPaint paintRect50 = SkPaintPriv::Unflatten(paintBuffer_rect50);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawColorOp\n";
{
            SkColor4f color = SkColor4f::FromBytes_RGBA(0);
            canvas->drawColor(color, SkBlendMode::kSrc);
        }
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 1344.000000, 320.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 294.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect46);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 294.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect47);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(182.000000, 31.000000, 1134.000000, 129.000000);
        SkVector radii[4] = { { 49.000000,49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect10);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(182.000000, 31.000000, 1134.000000, 129.000000);
        SkVector radii[4] = { { 49.000000,49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect11);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(182.000000, 31.000000, 1134.000000, 129.000000);
        SkVector radii[4] = { { 49.000000,49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug16->draw(canvas, paint_slug16);
        slug16->draw(canvas);
        free(paintdata_slug16);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(210.000000, 10.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug17->draw(canvas, paint_slug17);
        slug17->draw(canvas);
        free(paintdata_slug17);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug18->draw(canvas, paint_slug18);
        slug18->draw(canvas);
        free(paintdata_slug18);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 140.000000, 42.000000, 284.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect48);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(1278.000000, 140.000000, 1320.000000, 284.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect49);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(1127.000000, 140.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 144.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect50);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 69F5BD3189171B8691AD66A449205439_1759762418858663.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest7, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect51 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect51, 28);
        SkReadBuffer paintBuffer_rect51(paintdata_rect51, 28);
        SkPaint paintRect51 = SkPaintPriv::Unflatten(paintBuffer_rect51);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect52 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect52, 28);
        SkReadBuffer paintBuffer_rect52(paintdata_rect52, 28);
        SkPaint paintRect52 = SkPaintPriv::Unflatten(paintBuffer_rect52);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect53 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect53, 28);
        SkReadBuffer paintBuffer_rect53(paintdata_rect53, 28);
        SkPaint paintRect53 = SkPaintPriv::Unflatten(paintBuffer_rect53);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect54 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect54, 28);
        SkReadBuffer paintBuffer_rect54(paintdata_rect54, 28);
        SkPaint paintRect54 = SkPaintPriv::Unflatten(paintBuffer_rect54);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect55 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect55, 28);
        SkReadBuffer paintBuffer_rect55(paintdata_rect55, 28);
        SkPaint paintRect55 = SkPaintPriv::Unflatten(paintBuffer_rect55);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect56 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect56, 28);
        SkReadBuffer paintBuffer_rect56(paintdata_rect56, 28);
        SkPaint paintRect56 = SkPaintPriv::Unflatten(paintBuffer_rect56);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect12 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect12, 28);
        SkReadBuffer paintBuffer_rrect12(paintdata_rrect12, 28);
        SkPaint paintRRect12 = SkPaintPriv::Unflatten(paintBuffer_rrect12);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect13 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect13, 28);
        SkReadBuffer paintBuffer_rrect13(paintdata_rrect13, 28);
        SkPaint paintRRect13 = SkPaintPriv::Unflatten(paintBuffer_rrect13);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 1344.000000, 608.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect51);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect52);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1065.000000, 1316.000000, 1068.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect53);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 507.000000, 1274.000000, 528.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect54);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 584.000000, 1274.000000, 605.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect55);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 378.000000, 441.000000, 399.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect56);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 344.000000, 168.000000, 456.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect12);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 345.500000, 166.500000, 454.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect13);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 72216F1753D1933B21A8B6919B109039_1759762418879956.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest8, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect57 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect57, 28);
        SkReadBuffer paintBuffer_rect57(paintdata_rect57, 28);
        SkPaint paintRect57 = SkPaintPriv::Unflatten(paintBuffer_rect57);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect58 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect58, 28);
        SkReadBuffer paintBuffer_rect58(paintdata_rect58, 28);
        SkPaint paintRect58 = SkPaintPriv::Unflatten(paintBuffer_rect58);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect59 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect59, 28);
        SkReadBuffer paintBuffer_rect59(paintdata_rect59, 28);
        SkPaint paintRect59 = SkPaintPriv::Unflatten(paintBuffer_rect59);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect60 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect60, 28);
        SkReadBuffer paintBuffer_rect60(paintdata_rect60, 28);
        SkPaint paintRect60 = SkPaintPriv::Unflatten(paintBuffer_rect60);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect61 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect61, 28);
        SkReadBuffer paintBuffer_rect61(paintdata_rect61, 28);
        SkPaint paintRect61 = SkPaintPriv::Unflatten(paintBuffer_rect61);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect62 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect62, 28);
        SkReadBuffer paintBuffer_rect62(paintdata_rect62, 28);
        SkPaint paintRect62 = SkPaintPriv::Unflatten(paintBuffer_rect62);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect63 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect63, 28);
        SkReadBuffer paintBuffer_rect63(paintdata_rect63, 28);
        SkPaint paintRect63 = SkPaintPriv::Unflatten(paintBuffer_rect63);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect64 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect64, 28);
        SkReadBuffer paintBuffer_rect64(paintdata_rect64, 28);
        SkPaint paintRect64 = SkPaintPriv::Unflatten(paintBuffer_rect64);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data19 = malloc(240);
        hexToRawData("0000803f00001cc20600b342000080400000214300407a44f80000000000803f0000000000002143000000000000803f0080c54300000000000000000000803f010000000100000000000000010000000000803f0000000000002143000000000000803f0080c54300000000000000000000803f000022430000b24300007a430080c74302000000000022430000b243000050430000b2436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data19, 240);
        auto slug19 = sktext::gpu::Slug::Deserialize(data19, 240);
        free(data19);
        void *paintdata_slug19 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug19, 28);
        SkReadBuffer paintbuffer_slug19 = SkReadBuffer(paintdata_slug19, 28);
        SkPaint paint_slug19 = SkPaintPriv::Unflatten(paintbuffer_slug19);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data20 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000c2d34300407a44f80000000000803f0000000000c2d343000000000000803f0080c54300000000000000000000803f010000000100000000000000010000000000803f0000000000c2d343000000000000803f0080c54300000000000000000000803f0080d4430080b243004000440000c743020000000080d4430080b2430000eb430080b2436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d26b0100a86b0100", data20, 240);
        auto slug20 = sktext::gpu::Slug::Deserialize(data20, 240);
        free(data20);
        void *paintdata_slug20 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug20, 28);
        SkReadBuffer paintbuffer_slug20 = SkReadBuffer(paintdata_slug20, 28);
        SkPaint paint_slug20 = SkPaintPriv::Unflatten(paintbuffer_slug20);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data21 = malloc(228);
        hexToRawData("0000004000001cc2000030420000804000822b4400407a44e80000000000803f0000000000822b44000000000000803f0080c54300000000000000000000803f010000000100000000000000010000000000803f0000000000822b44000000000000803f0080c54300000000000000000000803f00002c440000b243008036440080c7430100000000002c440000b2436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data21, 228);
        auto slug21 = sktext::gpu::Slug::Deserialize(data21, 228);
        free(data21);
        void *paintdata_slug21 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug21, 28);
        SkReadBuffer paintbuffer_slug21 = SkReadBuffer(paintdata_slug21, 28);
        SkPaint paint_slug21 = SkPaintPriv::Unflatten(paintbuffer_slug21);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data22 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c904400c07844080100000000803f00000000806c9044000000000000803f0080c24300000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f0080c24300000000000000000000803f00c090440000bf43006096440000c3430300000000c090440000bf43002093440000bf43006095440000bf43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data22, 252);
        auto slug22 = sktext::gpu::Slug::Deserialize(data22, 252);
        free(data22);
        void *paintdata_slug22 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug22, 28);
        SkReadBuffer paintbuffer_slug22 = SkReadBuffer(paintdata_slug22, 28);
        SkPaint paint_slug22 = SkPaintPriv::Unflatten(paintbuffer_slug22);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect65 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect65, 28);
        SkReadBuffer paintBuffer_rect65(paintdata_rect65, 28);
        SkPaint paintRect65 = SkPaintPriv::Unflatten(paintBuffer_rect65);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect14 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect14, 28);
        SkReadBuffer paintBuffer_rrect14(paintdata_rrect14, 28);
        SkPaint paintRRect14 = SkPaintPriv::Unflatten(paintBuffer_rrect14);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect15 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect15, 28);
        SkReadBuffer paintBuffer_rrect15(paintdata_rrect15, 28);
        SkPaint paintRRect15 = SkPaintPriv::Unflatten(paintBuffer_rrect15);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -606.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 606.000000, 1344.000000, 1214.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect57);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect58);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1065.000000, 1316.000000, 1068.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect59);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 661.000000, 1274.000000, 682.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect60);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 738.000000, 1274.000000, 759.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect61);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 815.000000, 1274.000000, 836.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect62);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect63);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1842.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect64);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug19->draw(canvas, paint_slug19);
        slug19->draw(canvas);
        free(paintdata_slug19);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug20->draw(canvas, paint_slug20);
        slug20->draw(canvas);
        free(paintdata_slug20);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug21->draw(canvas, paint_slug21);
        slug21->draw(canvas);
        free(paintdata_slug21);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug22->draw(canvas, paint_slug22);
        slug22->draw(canvas);
        free(paintdata_slug22);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 1155.000000, 441.000000, 1176.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect65);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1121.000000, 168.000000, 1233.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect14);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1122.500000, 166.500000, 1231.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect15);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 218F6FD22A1503484FF178A07B190261_1759762418880764.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest9, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect66 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect66, 28);
        SkReadBuffer paintBuffer_rect66(paintdata_rect66, 28);
        SkPaint paintRect66 = SkPaintPriv::Unflatten(paintBuffer_rect66);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect67 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect67, 28);
        SkReadBuffer paintBuffer_rect67(paintdata_rect67, 28);
        SkPaint paintRect67 = SkPaintPriv::Unflatten(paintBuffer_rect67);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect68 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect68, 28);
        SkReadBuffer paintBuffer_rect68(paintdata_rect68, 28);
        SkPaint paintRect68 = SkPaintPriv::Unflatten(paintBuffer_rect68);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect69 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect69, 28);
        SkReadBuffer paintBuffer_rect69(paintdata_rect69, 28);
        SkPaint paintRect69 = SkPaintPriv::Unflatten(paintBuffer_rect69);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect70 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect70, 28);
        SkReadBuffer paintBuffer_rect70(paintdata_rect70, 28);
        SkPaint paintRect70 = SkPaintPriv::Unflatten(paintBuffer_rect70);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect71 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect71, 28);
        SkReadBuffer paintBuffer_rect71(paintdata_rect71, 28);
        SkPaint paintRect71 = SkPaintPriv::Unflatten(paintBuffer_rect71);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect72 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect72, 28);
        SkReadBuffer paintBuffer_rect72(paintdata_rect72, 28);
        SkPaint paintRect72 = SkPaintPriv::Unflatten(paintBuffer_rect72);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect73 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect73, 28);
        SkReadBuffer paintBuffer_rect73(paintdata_rect73, 28);
        SkPaint paintRect73 = SkPaintPriv::Unflatten(paintBuffer_rect73);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data23 = malloc(240);
        hexToRawData("0000803f00001cc20600b34200008040000021430040de44f80000000000803f0000000000002143000000000000803f00800d4400000000000000000000803f010000000100000000000000010000000000803f0000000000002143000000000000803f00800d4400000000000000000000803f0000224300c0034400007a4300800e44020000000000224300c003440000504300c003446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data23, 240);
        auto slug23 = sktext::gpu::Slug::Deserialize(data23, 240);
        free(data23);
        void *paintdata_slug23 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug23, 28);
        SkReadBuffer paintbuffer_slug23 = SkReadBuffer(paintdata_slug23, 28);
        SkPaint paint_slug23 = SkPaintPriv::Unflatten(paintbuffer_slug23);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data24 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000c2d3430040de44f80000000000803f0000000000c2d343000000000000803f00800d4400000000000000000000803f010000000100000000000000010000000000803f0000000000c2d343000000000000803f00800d4400000000000000000000803f0080d443000004440040004400400e44020000000080d443000004440000eb43000004446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d26b0100a86b0100", data24, 240);
        auto slug24 = sktext::gpu::Slug::Deserialize(data24, 240);
        free(data24);
        void *paintdata_slug24 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug24, 28);
        SkReadBuffer paintbuffer_slug24 = SkReadBuffer(paintdata_slug24, 28);
        SkPaint paint_slug24 = SkPaintPriv::Unflatten(paintbuffer_slug24);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data25 = malloc(228);
        hexToRawData("0000004000001cc2000030420000804000822b440040de44e80000000000803f0000000000822b44000000000000803f00800d4400000000000000000000803f010000000100000000000000010000000000803f0000000000822b44000000000000803f00800d4400000000000000000000803f00002c4400c003440080364400800e440100000000002c4400c003446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data25, 228);
        auto slug25 = sktext::gpu::Slug::Deserialize(data25, 228);
        free(data25);
        void *paintdata_slug25 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug25, 28);
        SkReadBuffer paintbuffer_slug25 = SkReadBuffer(paintdata_slug25, 28);
        SkPaint paint_slug25 = SkPaintPriv::Unflatten(paintbuffer_slug25);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data26 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c90440080dd44080100000000803f00000000806c9044000000000000803f00000c4400000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f00000c4400000000000000000000803f00c0904400400a440060964400400c440300000000c0904400400a440020934400400a440060954400400a44eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data26, 252);
        auto slug26 = sktext::gpu::Slug::Deserialize(data26, 252);
        free(data26);
        void *paintdata_slug26 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug26, 28);
        SkReadBuffer paintbuffer_slug26 = SkReadBuffer(paintdata_slug26, 28);
        SkPaint paint_slug26 = SkPaintPriv::Unflatten(paintbuffer_slug26);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect16 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect16, 28);
        SkReadBuffer paintBuffer_rrect16(paintdata_rrect16, 28);
        SkPaint paintRRect16 = SkPaintPriv::Unflatten(paintBuffer_rrect16);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect17 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect17, 28);
        SkReadBuffer paintBuffer_rrect17(paintdata_rrect17, 28);
        SkPaint paintRRect17 = SkPaintPriv::Unflatten(paintBuffer_rrect17);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1212.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1212.000000, 1344.000000, 1820.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect66);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect67);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1842.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect68);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1284.000000, 1274.000000, 1305.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect69);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1361.000000, 1274.000000, 1382.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect70);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1438.000000, 1274.000000, 1459.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect71);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1515.000000, 1274.000000, 1536.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect72);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1592.000000, 1274.000000, 1613.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect73);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug23->draw(canvas, paint_slug23);
        slug23->draw(canvas);
        free(paintdata_slug23);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug24->draw(canvas, paint_slug24);
        slug24->draw(canvas);
        free(paintdata_slug24);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug25->draw(canvas, paint_slug25);
        slug25->draw(canvas);
        free(paintdata_slug25);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug26->draw(canvas, paint_slug26);
        slug26->draw(canvas);
        free(paintdata_slug26);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1121.000000, 168.000000, 1233.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect16);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1122.500000, 166.500000, 1231.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect17);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762418882028.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest10, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect74 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect74, 28);
        SkReadBuffer paintBuffer_rect74(paintdata_rect74, 28);
        SkPaint paintRect74 = SkPaintPriv::Unflatten(paintBuffer_rect74);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect75 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect75, 28);
        SkReadBuffer paintBuffer_rect75(paintdata_rect75, 28);
        SkPaint paintRect75 = SkPaintPriv::Unflatten(paintBuffer_rect75);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect76 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect76, 28);
        SkReadBuffer paintBuffer_rect76(paintdata_rect76, 28);
        SkPaint paintRect76 = SkPaintPriv::Unflatten(paintBuffer_rect76);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect77 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect77, 28);
        SkReadBuffer paintBuffer_rect77(paintdata_rect77, 28);
        SkPaint paintRect77 = SkPaintPriv::Unflatten(paintBuffer_rect77);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect78 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect78, 28);
        SkReadBuffer paintBuffer_rect78(paintdata_rect78, 28);
        SkPaint paintRect78 = SkPaintPriv::Unflatten(paintBuffer_rect78);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect79 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect79, 28);
        SkReadBuffer paintBuffer_rect79(paintdata_rect79, 28);
        SkPaint paintRect79 = SkPaintPriv::Unflatten(paintBuffer_rect79);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect80 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect80, 28);
        SkReadBuffer paintBuffer_rect80(paintdata_rect80, 28);
        SkPaint paintRect80 = SkPaintPriv::Unflatten(paintBuffer_rect80);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect81 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect81, 28);
        SkReadBuffer paintBuffer_rect81(paintdata_rect81, 28);
        SkPaint paintRect81 = SkPaintPriv::Unflatten(paintBuffer_rect81);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect82 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect82, 28);
        SkReadBuffer paintBuffer_rect82(paintdata_rect82, 28);
        SkPaint paintRect82 = SkPaintPriv::Unflatten(paintBuffer_rect82);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect83 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect83, 28);
        SkReadBuffer paintBuffer_rect83(paintdata_rect83, 28);
        SkPaint paintRect83 = SkPaintPriv::Unflatten(paintBuffer_rect83);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect84 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect84, 28);
        SkReadBuffer paintBuffer_rect84(paintdata_rect84, 28);
        SkPaint paintRect84 = SkPaintPriv::Unflatten(paintBuffer_rect84);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect18 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect18, 28);
        SkReadBuffer paintBuffer_rrect18(paintdata_rrect18, 28);
        SkPaint paintRRect18 = SkPaintPriv::Unflatten(paintBuffer_rrect18);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect19 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect19, 28);
        SkReadBuffer paintBuffer_rrect19(paintdata_rrect19, 28);
        SkPaint paintRRect19 = SkPaintPriv::Unflatten(paintBuffer_rrect19);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1344.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect74);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect75);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1842.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect76);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect77);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2619.000000, 1316.000000, 2622.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect78);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2061.000000, 1274.000000, 2082.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect79);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2138.000000, 1274.000000, 2159.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect80);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2215.000000, 1274.000000, 2236.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect81);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2292.000000, 1274.000000, 2313.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect82);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2369.000000, 1274.000000, 2390.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect83);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 1932.000000, 441.000000, 1953.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect84);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1898.000000, 168.000000, 2010.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect18);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1899.500000, 166.500000, 2008.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect19);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762418883092.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest11, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect85 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect85, 28);
        SkReadBuffer paintBuffer_rect85(paintdata_rect85, 28);
        SkPaint paintRect85 = SkPaintPriv::Unflatten(paintBuffer_rect85);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect86 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect86, 28);
        SkReadBuffer paintBuffer_rect86(paintdata_rect86, 28);
        SkPaint paintRect86 = SkPaintPriv::Unflatten(paintBuffer_rect86);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect87 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect87, 28);
        SkReadBuffer paintBuffer_rect87(paintdata_rect87, 28);
        SkPaint paintRect87 = SkPaintPriv::Unflatten(paintBuffer_rect87);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect88 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect88, 28);
        SkReadBuffer paintBuffer_rect88(paintdata_rect88, 28);
        SkPaint paintRect88 = SkPaintPriv::Unflatten(paintBuffer_rect88);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect89 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect89, 28);
        SkReadBuffer paintBuffer_rect89(paintdata_rect89, 28);
        SkPaint paintRect89 = SkPaintPriv::Unflatten(paintBuffer_rect89);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect90 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect90, 28);
        SkReadBuffer paintBuffer_rect90(paintdata_rect90, 28);
        SkPaint paintRect90 = SkPaintPriv::Unflatten(paintBuffer_rect90);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect91 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect91, 28);
        SkReadBuffer paintBuffer_rect91(paintdata_rect91, 28);
        SkPaint paintRect91 = SkPaintPriv::Unflatten(paintBuffer_rect91);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect92 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect92, 28);
        SkReadBuffer paintBuffer_rect92(paintdata_rect92, 28);
        SkPaint paintRect92 = SkPaintPriv::Unflatten(paintBuffer_rect92);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data27 = malloc(240);
        hexToRawData("0000803f00001cc20600b342000080400000214300b01f45f80000000000803f0000000000002143000000000000803f0000034300000000000000000000803f010000000100000000000000010000000000803f0000000000002143000000000000803f0000034300000000000000000000803f000022430000b84200007a430000074302000000000022430000b842000050430000b8426f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data27, 240);
        auto slug27 = sktext::gpu::Slug::Deserialize(data27, 240);
        free(data27);
        void *paintdata_slug27 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug27, 28);
        SkReadBuffer paintbuffer_slug27 = SkReadBuffer(paintdata_slug27, 28);
        SkPaint paint_slug27 = SkPaintPriv::Unflatten(paintbuffer_slug27);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data28 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000c2d34300b01f45f80000000000803f0000000000c2d343000000000000803f0000034300000000000000000000803f010000000100000000000000010000000000803f0000000000c2d343000000000000803f0000034300000000000000000000803f0080d4430000ba420040004400000643020000000080d4430000ba420000eb430000ba426f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d26b0100a86b0100", data28, 240);
        auto slug28 = sktext::gpu::Slug::Deserialize(data28, 240);
        free(data28);
        void *paintdata_slug28 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug28, 28);
        SkReadBuffer paintbuffer_slug28 = SkReadBuffer(paintdata_slug28, 28);
        SkPaint paint_slug28 = SkPaintPriv::Unflatten(paintbuffer_slug28);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data29 = malloc(228);
        hexToRawData("0000004000001cc2000030420000804000822b4400b01f45e80000000000803f0000000000822b44000000000000803f0000034300000000000000000000803f010000000100000000000000010000000000803f0000000000822b44000000000000803f0000034300000000000000000000803f00002c440000b84200803644000007430100000000002c440000b8426f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data29, 228);
        auto slug29 = sktext::gpu::Slug::Deserialize(data29, 228);
        free(data29);
        void *paintdata_slug29 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug29, 28);
        SkReadBuffer paintbuffer_slug29 = SkReadBuffer(paintdata_slug29, 28);
        SkPaint paint_slug29 = SkPaintPriv::Unflatten(paintbuffer_slug29);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data30 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c904400501f45080100000000803f00000000806c9044000000000000803f0000fa4200000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f0000fa4200000000000000000000803f00c090440000ec42006096440000fc420300000000c090440000ec42002093440000ec42006095440000ec42eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data30, 252);
        auto slug30 = sktext::gpu::Slug::Deserialize(data30, 252);
        free(data30);
        void *paintdata_slug30 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug30, 28);
        SkReadBuffer paintbuffer_slug30 = SkReadBuffer(paintdata_slug30, 28);
        SkPaint paint_slug30 = SkPaintPriv::Unflatten(paintbuffer_slug30);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect93 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect93, 28);
        SkReadBuffer paintBuffer_rect93(paintdata_rect93, 28);
        SkPaint paintRect93 = SkPaintPriv::Unflatten(paintBuffer_rect93);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect20 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rrect20, 28);
        SkReadBuffer paintBuffer_rrect20(paintdata_rrect20, 28);
        SkPaint paintRRect20 = SkPaintPriv::Unflatten(paintBuffer_rrect20);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect21 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect21, 28);
        SkReadBuffer paintBuffer_rrect21(paintdata_rrect21, 28);
        SkPaint paintRRect21 = SkPaintPriv::Unflatten(paintBuffer_rrect21);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -2424.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2424.000000, 1344.000000, 3032.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect85);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect86);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2619.000000, 1316.000000, 2622.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect87);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect88);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3397.000000, 1316.000000, 3400.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect89);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2838.000000, 1274.000000, 2859.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect90);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2915.000000, 1274.000000, 2936.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect91);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2992.000000, 1274.000000, 3013.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect92);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug27->draw(canvas, paint_slug27);
        slug27->draw(canvas);
        free(paintdata_slug27);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug28->draw(canvas, paint_slug28);
        slug28->draw(canvas);
        free(paintdata_slug28);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug29->draw(canvas, paint_slug29);
        slug29->draw(canvas);
        free(paintdata_slug29);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug30->draw(canvas, paint_slug30);
        slug30->draw(canvas);
        free(paintdata_slug30);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 2709.000000, 441.000000, 2730.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect93);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 2675.000000, 168.000000, 2787.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect20);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 2676.500000, 166.500000, 2785.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect21);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 9557EC544AD5ECC62F6271877E15C907_1759762418885000.paintbuf

                DEF_SIMPLE_GM(loggedskiatest12, canvas, 64, 192) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawColorOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect94 = malloc(284);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200d00000000000803f0000000000000000000000000000803f00000c4300000000000000000000803f10000000536b4c696e6561724772616469656e7400000000900000000100002003000000fbfa7a3ffbfa7a3ffbfa7a3f0000803ffbfa7a3ffbfa7a3ffbfa7a3f0000803f48e17a3f48e17a3f48e17a3f0000000044000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f0000000000000000000028420000000000000000000000000000000000000000", paintdata_rect94, 284);
        SkReadBuffer paintBuffer_rect94(paintdata_rect94, 284);
        SkPaint paintRect94 = SkPaintPriv::Unflatten(paintBuffer_rect94);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawColorOp\n";
{
            SkColor4f color = SkColor4f::FromBytes_RGBA(0);
            canvas->drawColor(color, SkBlendMode::kSrc);
        }
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 64.000000, 192.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(-0.000000, -140.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 140.000000, 42.000000, 284.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect94);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: E697B67EBCB8AB5DB92DB0956C01079B_1759762418886551.paintbuf
// Failed to find matching Op: StrikeClientLo

                DEF_SIMPLE_GM(loggedskiatest13, canvas, 1344, 320) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawColorOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect95 = malloc(28);
        hexToRawData("0000000000008040fbfa7a3ffbfa7a3ffbfa7a3f0000803f01030000", paintdata_rect95, 28);
        SkReadBuffer paintBuffer_rect95(paintdata_rect95, 28);
        SkPaint paintRect95 = SkPaintPriv::Unflatten(paintBuffer_rect95);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect96 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect96, 28);
        SkReadBuffer paintBuffer_rect96(paintdata_rect96, 28);
        SkPaint paintRect96 = SkPaintPriv::Unflatten(paintBuffer_rect96);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect22 = malloc(28);
        hexToRawData("0000000000008040e4e3633fe5e4643fe7e6663f0000803f01030000", paintdata_rrect22, 28);
        SkReadBuffer paintBuffer_rrect22(paintdata_rrect22, 28);
        SkPaint paintRRect22 = SkPaintPriv::Unflatten(paintBuffer_rrect22);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect23 = malloc(28);
        hexToRawData("0000000000008040eceb6b3feceb6b3fedec6c3f0000803f01030000", paintdata_rrect23, 28);
        SkReadBuffer paintBuffer_rrect23(paintdata_rrect23, 28);
        SkPaint paintRRect23 = SkPaintPriv::Unflatten(paintBuffer_rrect23);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data31 = malloc(1012);
        hexToRawData("0000004000002cc2c9dd40440000a04000808f430000c042480500000000803f0000000000808f43000000000000803f0000c04200000000000000000000803f050000000100000000000000010000000000803f0000000000808f43000000000000803f0000c04200000000000000000000803f0080904300005442004008440000c8420600000000809043000058420000a943000054420000c143000058420080d943000058420000f2430000584200c0064400008a421dbc841c4c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b430060000005ca1000098ab0000b48001006099000030cd0000a4c301000100000000000000010000000000803f0000000000808f43000000000000803f0000c04200000000000000000000803f0040114400007042000019440000c042010000000040114400007042a9af94c84c00000001000000636572733800000005000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000808f43000000000000803f0000c04200000000000000000000803f0080194400005842000056440000ca4205000000008019440000584200c02544000058420000324400005c4200003e4400005c4200804a44000058421dbc841c4c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b430050000007e3f01009ebb0000aa9c0000367c0000daab00000100000000000000010000000000803f0000000000808f43000000000000803f0000c04200000000000000000000803f0000574400007042004064440000c24202000000000057440000704200c05d4400007042a9af94c84c00000001000000636572733800000005000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b43002000000fa090000f60900000100000000000000010000000000803f0000000000808f43000000000000803f0000c04200000000000000000000803f00c0644400005842004084440000c8420300000000c0644400005842008071440000584200007d44000058421dbc841c4c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b4300300000092b60000d2160100a2ff0000", data31, 1012);
        auto slug31 = sktext::gpu::Slug::Deserialize(data31, 1012);
        free(data31);
        void *paintdata_slug31 = malloc(28);
        hexToRawData("0000000000008040bebd3d3fbebd3d3fbebd3d3f0000803f01030000", paintdata_slug31, 28);
        SkReadBuffer paintbuffer_slug31 = SkReadBuffer(paintdata_slug31, 28);
        SkPaint paint_slug31 = SkPaintPriv::Unflatten(paintbuffer_slug31);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data32 = malloc(228);
        hexToRawData("0000a0400000c0c0000030420000803f008f84440000c042e80000000000803f00000000008f8444000000000000803f0000c04200000000000000000000803f010000000100000000000000010000000000803f00000000008f8444000000000000803f0000c04200000000000000000000803f002085440000b44200208a440000c24201000000002085440000b442a9af94c84c00000001000000636572733800000005000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b430010000000a0c0000", data32, 228);
        auto slug32 = sktext::gpu::Slug::Deserialize(data32, 228);
        free(data32);
        void *paintdata_slug32 = malloc(28);
        hexToRawData("0000000000008040bebd3d3fbebd3d3fbebd3d3f0000803f01030000", paintdata_slug32, 28);
        SkReadBuffer paintbuffer_slug32 = SkReadBuffer(paintdata_slug32, 28);
        SkPaint paint_slug32 = SkPaintPriv::Unflatten(paintbuffer_slug32);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data33 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000000000000000c442e80000000000803f0000000000005243000000000000803f0000d84200000000000000000000803f010000000100000000000000010000000000803f0000000000005243000000000000803f0000d84200000000000000000000803f0000554300005c42008083430000d442010000000000554300005c4238a6fd734c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b4300100000058000000", data33, 228);
        auto slug33 = sktext::gpu::Slug::Deserialize(data33, 228);
        free(data33);
        void *paintdata_slug33 = malloc(28);
        hexToRawData("0000000000008040bebd3d3fbebd3d3fbebd3d3f0000803f01030000", paintdata_slug33, 28);
        SkReadBuffer paintbuffer_slug33 = SkReadBuffer(paintdata_slug33, 28);
        SkPaint paint_slug33 = SkPaintPriv::Unflatten(paintbuffer_slug33);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data34 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d6042000000008097974400007543e80000000000803f0000000080979744000000000000803f0000754300000000000000000000803f010000000100000000000000010000000000803f0000000080979744000000000000803f0000754300000000000000000000803f0000984400004c4300409e4400006743010000000000984400004c4338a6fd734c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b4300100000027000000", data34, 228);
        auto slug34 = sktext::gpu::Slug::Deserialize(data34, 228);
        free(data34);
        void *paintdata_slug34 = malloc(28);
        hexToRawData("0000000000008040a6a5253faead2d3fb6b5353f0000803f01030000", paintdata_slug34, 28);
        SkReadBuffer paintbuffer_slug34 = SkReadBuffer(paintdata_slug34, 28);
        SkPaint paint_slug34 = SkPaintPriv::Unflatten(paintbuffer_slug34);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata0 = malloc(128);
        hexToRawData("050000000d00000000000000050000009a991141333347429a991141cccc70426666b6419a99894200001e429a9989429a9961429a998942cdcc8b4234337142cdcc8b4234334742cdcc8b4234331d42cdcc60429a99f54100001e429a99f5416666b6419a99f5419a99114133331d429a991141333347420004040404000000", pathdata0, 128);
        SkPath path0;
        path0.readFromMemory(pathdata0, 128);
        void *paintdata_path0 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_path0, 28);
        SkReadBuffer paintBuffer_path0(paintdata_path0, 28);
        SkPaint paintPath0 = SkPaintPriv::Unflatten(paintBuffer_path0);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata1 = malloc(388);
        hexToRawData("050000002c000000000000001200000000008c42cdcc0a4266668942333309429a99874267660842333389420000024200008c423333e74133338c426666ce4133338942cdccbc413333834200009c4166666642cdcc9c41000042420000bc41000042420000bc41666636426666c641333339423333b341cdcc3e4233338f4100003e429999614133333542cccc3c419a9921429a99d9406666da410000404166667e419a99b9410000f0409a99fd4100002040cdcc224200002040666642420000204099997d429a99ad410000914233332142000091429a998142000091423333a242cdcc68423333a24200003c420000a24266662042333396423333114200008c42cdcc0a42cdcc2042333386423333cb4133338942666646419a997742666636410000504266662641333329429a99ad4166660442666612429a99fd41ffff4d426866f241cccc80429a991342cccc824234333b42000085420000624266665c4266668342cdcc2042333386420004040404040404040404050004040404050000", pathdata1, 388);
        SkPath path1;
        path1.readFromMemory(pathdata1, 388);
        void *paintdata_path1 = malloc(28);
        hexToRawData("0000000000008040d7d6563fadac2c3ea9a8283e0000803f01030000", paintdata_path1, 28);
        SkReadBuffer paintBuffer_path1(paintdata_path1, 28);
        SkPaint paintPath1 = SkPaintPriv::Unflatten(paintBuffer_path1);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata2 = malloc(252);
        hexToRawData("050000001c000000000000000c0000009a99ac42cdccec40cdcca0426866663f67668f42ccccccbf67667e42c0cccc3d67667e42c0cccc3dcdcc7642fdffff3e010072423333134001007442333383409b9975420000c040cecc7c426666e640000082426666d64066668d420000b040cdcc99429999e9406666a24266663e419999aa42cccc84410000ad420000b8419999a9420000e4419999a9420000e4416666a8426666f2416666aa4233330142ffffad429a9903429999b142000006429999b54200000242ccccb6429a99f541ccccb6429a99f5419a99bb423333b7416666b842000060419a99ac42cdccec40000401040404040104040104", pathdata2, 252);
        SkPath path2;
        path2.readFromMemory(pathdata2, 252);
        void *paintdata_path2 = malloc(28);
        hexToRawData("0000000000008040e9e8683f9392123fa1a0a03d0000803f01030000", paintdata_path2, 28);
        SkReadBuffer paintBuffer_path2(paintdata_path2, 28);
        SkPaint paintPath2 = SkPaintPriv::Unflatten(paintBuffer_path2);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata3 = malloc(244);
        hexToRawData("050000001b000000000000000b00000066669a4233337b41999994420000484133338c42cccc3441333384429a994141333381420000484100007e420000604199997f4234337b41999980429a99894199998342676692410000874234338f410000874234338f41cdcc8a4201008c4100008f429a9991419a9991429a999d41676694429a99a941343395423433bb41000094426766ca41000094426766ca41333393426766d641cdcc94420100e441cdcc97420100e841cdcc9a423433eb4133339e42cecce44133339f42ceccd841cdcca142cdccb8416666a0426666964166669a4233337b41000404040104040104040400", pathdata3, 244);
        SkPath path3;
        path3.readFromMemory(pathdata3, 244);
        void *paintdata_path3 = malloc(28);
        hexToRawData("0000000000008040e9e8683f9392123fa1a0a03d0000803f01030000", paintdata_path3, 28);
        SkReadBuffer paintBuffer_path3(paintdata_path3, 28);
        SkPaint paintPath3 = SkPaintPriv::Unflatten(paintBuffer_path3);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata4 = malloc(348);
        hexToRawData("05000000270000000000000012000000cdcc264233331d4267660a4299991542cdccd441999923420000bc4133333d423333a341cdcc56423333bb41cccc72420000f44166667c429a991742cdcc8242cdcc3a42333377423333474299995b42333353426666404266664442cdcc2442cdcc264233331d423333114200005e4299990b42cdcc66426666fe4133336b423333eb41cdcc66429999d941676662423333d341000058423333df4133334f426666ea4166664642333301426666424266660a42666646420000144266664a42cdcc1642cdcc54423333114200005e42000024429a994542666622429a9949429a991d42cdcc4a429a9919429a9949426766164200004842cdcc144267664442cdcc1642cdcc4042676618429a993d4233331d429a993b42cdcc2042cdcc3c423333254200003e420000264266664242000024429a9945420004040404050004040404050004040404050000", pathdata4, 348);
        SkPath path4;
        path4.readFromMemory(pathdata4, 348);
        void *paintdata_path4 = malloc(28);
        hexToRawData("00000000000080408180803c00000000000000000000803f01030000", paintdata_path4, 28);
        SkReadBuffer paintBuffer_path4(paintdata_path4, 28);
        SkPaint paintPath4 = SkPaintPriv::Unflatten(paintBuffer_path4);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect97 = malloc(284);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200d00000000000803f0000000000c09f44000000000000803f00000c4300000000000000000000803f10000000536b4c696e6561724772616469656e7400000000900000000100002003000000fbfa7a3ffbfa7a3ffbfa7a3f0000803ffbfa7a3ffbfa7a3ffbfa7a3f0000803f48e17a3f48e17a3f48e17a3f0000000044000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f0000284200000000000000000000000000000000000000000000000000000000", paintdata_rect97, 284);
        SkReadBuffer paintBuffer_rect97(paintdata_rect97, 284);
        SkPaint paintRect97 = SkPaintPriv::Unflatten(paintBuffer_rect97);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data35 = malloc(228);
        hexToRawData("00000000000075c2009aa14200000c41003095440000ce42e80000000000803f0000000000309544000000000000803f0000ce4200000000000000000000803f010000000100000000000000010000000000803f0000000000309544000000000000803f0000ce4200000000000000000000803f006095440000244200c09d440000e042010000000060954400002442b3d077494c0000000100000063657273380000000600000000008c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000006a000000", data35, 228);
        auto slug35 = sktext::gpu::Slug::Deserialize(data35, 228);
        free(data35);
        void *paintdata_slug35 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703e0000803f01030000", paintdata_slug35, 28);
        SkReadBuffer paintbuffer_slug35 = SkReadBuffer(paintdata_slug35, 28);
        SkPaint paint_slug35 = SkPaintPriv::Unflatten(paintbuffer_slug35);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawColorOp\n";
{
            SkColor4f color = SkColor4f::FromBytes_RGBA(0);
            canvas->drawColor(color, SkBlendMode::kSrc);
        }
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 1344.000000, 320.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 294.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect95);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 294.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect96);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(182.000000, 31.000000, 1134.000000, 129.000000);
        SkVector radii[4] = { { 49.000000,49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect22);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(182.000000, 31.000000, 1134.000000, 129.000000);
        SkVector radii[4] = { { 49.000000,49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect23);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(182.000000, 31.000000, 1134.000000, 129.000000);
        SkVector radii[4] = { { 49.000000,49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            { 49.000000, 49.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug31->draw(canvas, paint_slug31);
        slug31->draw(canvas);
        free(paintdata_slug31);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug32->draw(canvas, paint_slug32);
        slug32->draw(canvas);
        free(paintdata_slug32);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(210.000000, 10.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug33->draw(canvas, paint_slug33);
        slug33->draw(canvas);
        free(paintdata_slug33);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug34->draw(canvas, paint_slug34);
        slug34->draw(canvas);
        free(paintdata_slug34);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(42.000000, 42.000000, 133.000000, 116.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,42.000000,0.000000,3.523810,0.000000,42.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 26.000000, 21.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(0.259838,0.000000,0.000000,0.657697,0.000000,0.259259,0.000000,1.166667,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path0, paintPath0);
        free(pathdata0);
        free(paintdata_path0);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path1, paintPath1);
        free(pathdata1);
        free(paintdata_path1);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path2, paintPath2);
        free(pathdata2);
        free(paintdata_path2);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path3, paintPath3);
        free(pathdata3);
        free(paintdata_path3);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path4, paintPath4);
        free(pathdata4);
        free(paintdata_path4);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(1278.000000, 140.000000, 1320.000000, 284.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect97);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug35->draw(canvas, paint_slug35);
        slug35->draw(canvas);
        free(paintdata_slug35);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 9F84F2A83C6F05C030FAC90FBB318961_1759762418887197.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest14, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect98 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect98, 28);
        SkReadBuffer paintBuffer_rect98(paintdata_rect98, 28);
        SkPaint paintRect98 = SkPaintPriv::Unflatten(paintBuffer_rect98);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect99 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect99, 28);
        SkReadBuffer paintBuffer_rect99(paintdata_rect99, 28);
        SkPaint paintRect99 = SkPaintPriv::Unflatten(paintBuffer_rect99);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect100 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect100, 28);
        SkReadBuffer paintBuffer_rect100(paintdata_rect100, 28);
        SkPaint paintRect100 = SkPaintPriv::Unflatten(paintBuffer_rect100);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect101 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect101, 28);
        SkReadBuffer paintBuffer_rect101(paintdata_rect101, 28);
        SkPaint paintRect101 = SkPaintPriv::Unflatten(paintBuffer_rect101);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect102 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect102, 28);
        SkReadBuffer paintBuffer_rect102(paintdata_rect102, 28);
        SkPaint paintRect102 = SkPaintPriv::Unflatten(paintBuffer_rect102);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect103 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect103, 28);
        SkReadBuffer paintBuffer_rect103(paintdata_rect103, 28);
        SkPaint paintRect103 = SkPaintPriv::Unflatten(paintBuffer_rect103);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect24 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rrect24, 28);
        SkReadBuffer paintBuffer_rrect24(paintdata_rrect24, 28);
        SkPaint paintRRect24 = SkPaintPriv::Unflatten(paintBuffer_rrect24);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect25 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect25, 28);
        SkReadBuffer paintBuffer_rrect25(paintdata_rrect25, 28);
        SkPaint paintRRect25 = SkPaintPriv::Unflatten(paintBuffer_rrect25);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 1344.000000, 608.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect98);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect99);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1065.000000, 1316.000000, 1068.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect100);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 507.000000, 1274.000000, 528.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect101);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 584.000000, 1274.000000, 605.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect102);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 378.000000, 441.000000, 399.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect103);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 344.000000, 168.000000, 456.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect24);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 345.500000, 166.500000, 454.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect25);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: D01E970A84B58041D638939D97FBAD5B_1759762418921666.paintbuf

                DEF_SIMPLE_GM(loggedskiatest15, canvas, 64, 192) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawColorOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect104 = malloc(300);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200e00000000000803f0000000000000000000000000000803f0000000000000000000000000000803f10000000536b4c696e6561724772616469656e7400000000a0000000010000a003000000fbfa7a3ffbfa7a3ffbfa7a3f0000803ffbfa7a3ffbfa7a3ffbfa7a3f0000803f48e17a3f48e17a3f48e17a3f0000000044000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f0300000000000000cdcc4c3e0000803f0000284200000000000000000000000000000000000000000000000000000000", paintdata_rect104, 300);
        SkReadBuffer paintBuffer_rect104(paintdata_rect104, 300);
        SkPaint paintRect104 = SkPaintPriv::Unflatten(paintBuffer_rect104);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawColorOp\n";
{
            SkColor4f color = SkColor4f::FromBytes_RGBA(0);
            canvas->drawColor(color, SkBlendMode::kSrc);
        }
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 64.000000, 192.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(-1127.000000, -140.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(1127.000000, 140.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 144.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect104);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 232822859F8B74F8C298B090C346610F_1759762418922459.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest16, canvas, 672, 256) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawColorOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data36 = malloc(240);
        hexToRawData("00000040000040c20000d6420000a040000028420000ca42f80000000000803f0000000000002842000000000000803f0000ca4200000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000ca4200000000000000000000803f0000304200005442000015430000d4420200000000003042000058420000ce420000544266468e994c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430020000007400010060940100", data36, 240);
        auto slug36 = sktext::gpu::Slug::Deserialize(data36, 240);
        free(data36);
        void *paintdata_slug36 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_slug36, 28);
        SkReadBuffer paintbuffer_slug36 = SkReadBuffer(paintdata_slug36, 28);
        SkPaint paint_slug36 = SkPaintPriv::Unflatten(paintbuffer_slug36);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect105 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703e0000803f01030000", paintdata_rect105, 28);
        SkReadBuffer paintBuffer_rect105(paintdata_rect105, 28);
        SkPaint paintRect105 = SkPaintPriv::Unflatten(paintBuffer_rect105);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data37 = malloc(240);
        hexToRawData("0000803f000040c20000da420000c04000006e430000ca42f80000000000803f0000000000006e43000000000000803f0000ca4200000000000000000000803f010000000100000000000000010000000000803f0000000000006e43000000000000803f0000ca4200000000000000000000803f00006f43000054420080ad430000d6420200000000006f43000054420080944300005442c637e71a4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b4300200000030e30000148a0000", data37, 240);
        auto slug37 = sktext::gpu::Slug::Deserialize(data37, 240);
        free(data37);
        void *paintdata_slug37 = malloc(28);
        hexToRawData("0000000000008040a6a5253faead2d3fb6b5353f0000803f01030000", paintdata_slug37, 28);
        SkReadBuffer paintbuffer_slug37 = SkReadBuffer(paintdata_slug37, 28);
        SkPaint paint_slug37 = SkPaintPriv::Unflatten(paintbuffer_slug37);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data38 = malloc(240);
        hexToRawData("0000a040000040c20000dc420000a0400000d9430000ca42f80000000000803f000000000000d943000000000000803f0000ca4200000000000000000000803f010000000100000000000000010000000000803f000000000000d943000000000000803f0000ca4200000000000000000000803f0080db4300005442000008440000d442020000000080db43000064420080f54300005442c637e71a4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b43002000000f08c0000f89b0000", data38, 240);
        auto slug38 = sktext::gpu::Slug::Deserialize(data38, 240);
        free(data38);
        void *paintdata_slug38 = malloc(28);
        hexToRawData("0000000000008040a6a5253faead2d3fb6b5353f0000803f01030000", paintdata_slug38, 28);
        SkReadBuffer paintbuffer_slug38 = SkReadBuffer(paintdata_slug38, 28);
        SkPaint paint_slug38 = SkPaintPriv::Unflatten(paintbuffer_slug38);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data39 = malloc(240);
        hexToRawData("00000040000040c20000dc420000804000801d440000ca42f80000000000803f0000000000801d44000000000000803f0000ca4200000000000000000000803f010000000100000000000000010000000000803f0000000000801d44000000000000803f0000ca4200000000000000000000803f00001e4400005442000039440000d2420200000000001e440000544200002c4400005442c637e71a4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b43002000000b821010028790000", data39, 240);
        auto slug39 = sktext::gpu::Slug::Deserialize(data39, 240);
        free(data39);
        void *paintdata_slug39 = malloc(28);
        hexToRawData("0000000000008040a6a5253faead2d3fb6b5353f0000803f01030000", paintdata_slug39, 28);
        SkReadBuffer paintbuffer_slug39 = SkReadBuffer(paintdata_slug39, 28);
        SkPaint paint_slug39 = SkPaintPriv::Unflatten(paintbuffer_slug39);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawColorOp\n";
{
            SkColor4f color = SkColor4f::FromBytes_RGBA(0);
            canvas->drawColor(color, SkBlendMode::kSrc);
        }
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 672.000000, 256.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug36->draw(canvas, paint_slug36);
        slug36->draw(canvas);
        free(paintdata_slug36);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(74.000000, 136.000000, 123.000000, 143.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect105);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug37->draw(canvas, paint_slug37);
        slug37->draw(canvas);
        free(paintdata_slug37);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug38->draw(canvas, paint_slug38);
        slug38->draw(canvas);
        free(paintdata_slug38);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug39->draw(canvas, paint_slug39);
        slug39->draw(canvas);
        free(paintdata_slug39);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 61BA3FD23AB95DF1CBE966DFF0D63693_1759762418922880.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest17, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect106 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect106, 28);
        SkReadBuffer paintBuffer_rect106(paintdata_rect106, 28);
        SkPaint paintRect106 = SkPaintPriv::Unflatten(paintBuffer_rect106);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect107 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect107, 28);
        SkReadBuffer paintBuffer_rect107(paintdata_rect107, 28);
        SkPaint paintRect107 = SkPaintPriv::Unflatten(paintBuffer_rect107);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect108 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect108, 28);
        SkReadBuffer paintBuffer_rect108(paintdata_rect108, 28);
        SkPaint paintRect108 = SkPaintPriv::Unflatten(paintBuffer_rect108);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect109 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect109, 28);
        SkReadBuffer paintBuffer_rect109(paintdata_rect109, 28);
        SkPaint paintRect109 = SkPaintPriv::Unflatten(paintBuffer_rect109);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect110 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect110, 28);
        SkReadBuffer paintBuffer_rect110(paintdata_rect110, 28);
        SkPaint paintRect110 = SkPaintPriv::Unflatten(paintBuffer_rect110);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect111 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect111, 28);
        SkReadBuffer paintBuffer_rect111(paintdata_rect111, 28);
        SkPaint paintRect111 = SkPaintPriv::Unflatten(paintBuffer_rect111);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect112 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect112, 28);
        SkReadBuffer paintBuffer_rect112(paintdata_rect112, 28);
        SkPaint paintRect112 = SkPaintPriv::Unflatten(paintBuffer_rect112);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect113 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect113, 28);
        SkReadBuffer paintBuffer_rect113(paintdata_rect113, 28);
        SkPaint paintRect113 = SkPaintPriv::Unflatten(paintBuffer_rect113);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data40 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400000a84200c07a44e80000000000803f000000000000a842000000000000803f0080c64300000000000000000000803f010000000100000000000000010000000000803f000000000000a842000000000000803f0080c64300000000000000000000803f0000bc420080af4300001a430080c543010000000000bc420080af43824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data40, 228);
        auto slug40 = sktext::gpu::Slug::Deserialize(data40, 228);
        free(data40);
        void *paintdata_slug40 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug40, 28);
        SkReadBuffer paintbuffer_slug40 = SkReadBuffer(paintdata_slug40, 28);
        SkPaint paint_slug40 = SkPaintPriv::Unflatten(paintbuffer_slug40);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data41 = malloc(240);
        hexToRawData("0000803f00001cc20600b342000080400000394300c07a44f80000000000803f0000000000003943000000000000803f0080c64300000000000000000000803f010000000100000000000000010000000000803f0000000000003943000000000000803f0080c64300000000000000000000803f00003a430000b343000089430080c8430200000000003a430000b343000068430000b3436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data41, 240);
        auto slug41 = sktext::gpu::Slug::Deserialize(data41, 240);
        free(data41);
        void *paintdata_slug41 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug41, 28);
        SkReadBuffer paintbuffer_slug41 = SkReadBuffer(paintdata_slug41, 28);
        SkPaint paint_slug41 = SkPaintPriv::Unflatten(paintbuffer_slug41);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data42 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400042b94300c07a44e80000000000803f000000000042b943000000000000803f0080c64300000000000000000000803f010000000100000000000000010000000000803f000000000042b943000000000000803f0080c64300000000000000000000803f0000bb430080ac430000d8430000c943010000000000bb430080ac43824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000036000000", data42, 228);
        auto slug42 = sktext::gpu::Slug::Deserialize(data42, 228);
        free(data42);
        void *paintdata_slug42 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug42, 28);
        SkReadBuffer paintbuffer_slug42 = SkReadBuffer(paintdata_slug42, 28);
        SkPaint paint_slug42 = SkPaintPriv::Unflatten(paintbuffer_slug42);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data43 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000a8e04300c07a44f80000000000803f0000000000a8e043000000000000803f0080c64300000000000000000000803f010000000100000000000000010000000000803f0000000000a8e043000000000000803f0080c64300000000000000000000803f0080e1430080b34300c006440000c843020000000080e1430080b3430000f8430080b3436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d16b0100ab6b0100", data43, 240);
        auto slug43 = sktext::gpu::Slug::Deserialize(data43, 240);
        free(data43);
        void *paintdata_slug43 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug43, 28);
        SkReadBuffer paintbuffer_slug43 = SkReadBuffer(paintdata_slug43, 28);
        SkPaint paint_slug43 = SkPaintPriv::Unflatten(paintbuffer_slug43);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data44 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000b51e4400c07a44e80000000000803f0000000000b51e44000000000000803f0080c64300000000000000000000803f010000000100000000000000010000000000803f0000000000b51e44000000000000803f0080c64300000000000000000000803f00801f440080ac4300c02d440000c9430100000000801f440080ac43824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003b000000", data44, 228);
        auto slug44 = sktext::gpu::Slug::Deserialize(data44, 228);
        free(data44);
        void *paintdata_slug44 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug44, 28);
        SkReadBuffer paintbuffer_slug44 = SkReadBuffer(paintdata_slug44, 28);
        SkPaint paint_slug44 = SkPaintPriv::Unflatten(paintbuffer_slug44);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data45 = malloc(228);
        hexToRawData("0000004000001cc2000030420000804000f9314400c07a44e80000000000803f0000000000f93144000000000000803f0080c64300000000000000000000803f010000000100000000000000010000000000803f0000000000f93144000000000000803f0080c64300000000000000000000803f008032440000b34300003d440080c84301000000008032440000b3436f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data45, 228);
        auto slug45 = sktext::gpu::Slug::Deserialize(data45, 228);
        free(data45);
        void *paintdata_slug45 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug45, 28);
        SkReadBuffer paintbuffer_slug45 = SkReadBuffer(paintdata_slug45, 28);
        SkPaint paint_slug45 = SkPaintPriv::Unflatten(paintbuffer_slug45);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data46 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c904400c07844080100000000803f00000000806c9044000000000000803f0080c24300000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f0080c24300000000000000000000803f00c090440000bf43006096440000c3430300000000c090440000bf43002093440000bf43006095440000bf43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data46, 252);
        auto slug46 = sktext::gpu::Slug::Deserialize(data46, 252);
        free(data46);
        void *paintdata_slug46 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug46, 28);
        SkReadBuffer paintbuffer_slug46 = SkReadBuffer(paintdata_slug46, 28);
        SkPaint paint_slug46 = SkPaintPriv::Unflatten(paintbuffer_slug46);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect114 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect114, 28);
        SkReadBuffer paintBuffer_rect114(paintdata_rect114, 28);
        SkPaint paintRect114 = SkPaintPriv::Unflatten(paintBuffer_rect114);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect26 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rrect26, 28);
        SkReadBuffer paintBuffer_rrect26(paintdata_rrect26, 28);
        SkPaint paintRRect26 = SkPaintPriv::Unflatten(paintBuffer_rrect26);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect27 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect27, 28);
        SkReadBuffer paintBuffer_rrect27(paintdata_rrect27, 28);
        SkPaint paintRRect27 = SkPaintPriv::Unflatten(paintBuffer_rrect27);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -606.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 606.000000, 1344.000000, 1214.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect106);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect107);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1065.000000, 1316.000000, 1068.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect108);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 661.000000, 1274.000000, 682.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect109);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 738.000000, 1274.000000, 759.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect110);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 815.000000, 1274.000000, 836.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect111);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect112);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1842.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect113);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 291.000000, 1316.000000, 1068.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug40->draw(canvas, paint_slug40);
        slug40->draw(canvas);
        free(paintdata_slug40);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug41->draw(canvas, paint_slug41);
        slug41->draw(canvas);
        free(paintdata_slug41);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug42->draw(canvas, paint_slug42);
        slug42->draw(canvas);
        free(paintdata_slug42);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug43->draw(canvas, paint_slug43);
        slug43->draw(canvas);
        free(paintdata_slug43);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug44->draw(canvas, paint_slug44);
        slug44->draw(canvas);
        free(paintdata_slug44);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug45->draw(canvas, paint_slug45);
        slug45->draw(canvas);
        free(paintdata_slug45);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug46->draw(canvas, paint_slug46);
        slug46->draw(canvas);
        free(paintdata_slug46);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 1155.000000, 441.000000, 1176.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect114);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1121.000000, 168.000000, 1233.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect26);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1122.500000, 166.500000, 1231.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect27);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 7F90B3A5668CEC8D756D24E890F3583F_1759762418926814.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest18, canvas, 672, 256) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawColorOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data47 = malloc(240);
        hexToRawData("00000040000040c20000dc420000804000801d440000ca42f80000000000803f00000000000020c2000000000000803f0000ca4200000000000000000000803f010000000100000000000000010000000000803f00000000000020c2000000000000803f0000ca4200000000000000000000803f000018c20000544200008c420000d24202000000000018c2000054420000904100005442c637e71a4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b43002000000b821010028790000", data47, 240);
        auto slug47 = sktext::gpu::Slug::Deserialize(data47, 240);
        free(data47);
        void *paintdata_slug47 = malloc(28);
        hexToRawData("0000000000008040a6a5253faead2d3fb6b5353f0000803f01030000", paintdata_slug47, 28);
        SkReadBuffer paintbuffer_slug47 = SkReadBuffer(paintdata_slug47, 28);
        SkPaint paint_slug47 = SkPaintPriv::Unflatten(paintbuffer_slug47);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data48 = malloc(240);
        hexToRawData("0000803f000040c20000dc420000a04000804e440000ca42f80000000000803f0000000000001c43000000000000803f0000ca4200000000000000000000803f010000000100000000000000010000000000803f0000000000001c43000000000000803f0000ca4200000000000000000000803f00001d4300005442000085430000d4420200000000001d43000054420000554300005442c637e71a4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b4300200000004240100c0c60000", data48, 240);
        auto slug48 = sktext::gpu::Slug::Deserialize(data48, 240);
        free(data48);
        void *paintdata_slug48 = malloc(28);
        hexToRawData("0000000000008040a6a5253faead2d3fb6b5353f0000803f01030000", paintdata_slug48, 28);
        SkReadBuffer paintbuffer_slug48 = SkReadBuffer(paintdata_slug48, 28);
        SkPaint paint_slug48 = SkPaintPriv::Unflatten(paintbuffer_slug48);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data49 = malloc(240);
        hexToRawData("0000a040000034c20000da420000c04000807f440000ca42f80000000000803f000000000000b043000000000000803f0000ca4200000000000000000000803f010000000100000000000000010000000000803f000000000000b043000000000000803f0000ca4200000000000000000000803f0080b243000060420080e6430000d642020000000080b243000060420000ce4300006042c637e71a4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b43002000000f8d400003cd50000", data49, 240);
        auto slug49 = sktext::gpu::Slug::Deserialize(data49, 240);
        free(data49);
        void *paintdata_slug49 = malloc(28);
        hexToRawData("0000000000008040a6a5253faead2d3fb6b5353f0000803f01030000", paintdata_slug49, 28);
        SkReadBuffer paintbuffer_slug49 = SkReadBuffer(paintdata_slug49, 28);
        SkPaint paint_slug49 = SkPaintPriv::Unflatten(paintbuffer_slug49);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data50 = malloc(240);
        hexToRawData("0000e04000003cc20000de420000a040004098440000ca42f80000000000803f0000000000000944000000000000803f0000ca4200000000000000000000803f010000000100000000000000010000000000803f0000000000000944000000000000803f0000ca4200000000000000000000803f00c00a440000584200c024440000d4420200000000c00a44000058420080174400005842c637e71a4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000b6b6b6ff590000000100b430020000009411010084ba0000", data50, 240);
        auto slug50 = sktext::gpu::Slug::Deserialize(data50, 240);
        free(data50);
        void *paintdata_slug50 = malloc(28);
        hexToRawData("0000000000008040a6a5253faead2d3fb6b5353f0000803f01030000", paintdata_slug50, 28);
        SkReadBuffer paintbuffer_slug50 = SkReadBuffer(paintdata_slug50, 28);
        SkPaint paint_slug50 = SkPaintPriv::Unflatten(paintbuffer_slug50);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawColorOp\n";
{
            SkColor4f color = SkColor4f::FromBytes_RGBA(0);
            canvas->drawColor(color, SkBlendMode::kSrc);
        }
std::cout << "render op type: TranslateOp\n";
canvas->translate(-670.000000, 0.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(670.000000, 0.000000, 1342.000000, 256.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug47->draw(canvas, paint_slug47);
        slug47->draw(canvas);
        free(paintdata_slug47);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug48->draw(canvas, paint_slug48);
        slug48->draw(canvas);
        free(paintdata_slug48);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug49->draw(canvas, paint_slug49);
        slug49->draw(canvas);
        free(paintdata_slug49);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug50->draw(canvas, paint_slug50);
        slug50->draw(canvas);
        free(paintdata_slug50);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 9EE653245990165630B402F2141E0AC3_1759762418930739.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest19, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect115 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect115, 28);
        SkReadBuffer paintBuffer_rect115(paintdata_rect115, 28);
        SkPaint paintRect115 = SkPaintPriv::Unflatten(paintBuffer_rect115);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect116 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect116, 28);
        SkReadBuffer paintBuffer_rect116(paintdata_rect116, 28);
        SkPaint paintRect116 = SkPaintPriv::Unflatten(paintBuffer_rect116);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect117 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect117, 28);
        SkReadBuffer paintBuffer_rect117(paintdata_rect117, 28);
        SkPaint paintRect117 = SkPaintPriv::Unflatten(paintBuffer_rect117);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect118 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect118, 28);
        SkReadBuffer paintBuffer_rect118(paintdata_rect118, 28);
        SkPaint paintRect118 = SkPaintPriv::Unflatten(paintBuffer_rect118);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect119 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect119, 28);
        SkReadBuffer paintBuffer_rect119(paintdata_rect119, 28);
        SkPaint paintRect119 = SkPaintPriv::Unflatten(paintBuffer_rect119);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect120 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect120, 28);
        SkReadBuffer paintBuffer_rect120(paintdata_rect120, 28);
        SkPaint paintRect120 = SkPaintPriv::Unflatten(paintBuffer_rect120);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect121 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect121, 28);
        SkReadBuffer paintBuffer_rect121(paintdata_rect121, 28);
        SkPaint paintRect121 = SkPaintPriv::Unflatten(paintBuffer_rect121);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect122 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect122, 28);
        SkReadBuffer paintBuffer_rect122(paintdata_rect122, 28);
        SkPaint paintRect122 = SkPaintPriv::Unflatten(paintBuffer_rect122);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data51 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400000a8420080de44e80000000000803f000000000000a842000000000000803f00000e4400000000000000000000803f010000000100000000000000010000000000803f000000000000a842000000000000803f00000e4400000000000000000000803f0000bc420080024400001a4300800d44010000000000bc4200800244824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data51, 228);
        auto slug51 = sktext::gpu::Slug::Deserialize(data51, 228);
        free(data51);
        void *paintdata_slug51 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug51, 28);
        SkReadBuffer paintbuffer_slug51 = SkReadBuffer(paintdata_slug51, 28);
        SkPaint paint_slug51 = SkPaintPriv::Unflatten(paintbuffer_slug51);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data52 = malloc(240);
        hexToRawData("0000803f00001cc20600b34200008040000039430080de44f80000000000803f0000000000003943000000000000803f00000e4400000000000000000000803f010000000100000000000000010000000000803f0000000000003943000000000000803f00000e4400000000000000000000803f00003a43004004440000894300000f440200000000003a430040044400006843004004446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data52, 240);
        auto slug52 = sktext::gpu::Slug::Deserialize(data52, 240);
        free(data52);
        void *paintdata_slug52 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug52, 28);
        SkReadBuffer paintbuffer_slug52 = SkReadBuffer(paintdata_slug52, 28);
        SkPaint paint_slug52 = SkPaintPriv::Unflatten(paintbuffer_slug52);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data53 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400042b9430080de44e80000000000803f000000000042b943000000000000803f00000e4400000000000000000000803f010000000100000000000000010000000000803f000000000042b943000000000000803f00000e4400000000000000000000803f0000bb43000001440000d84300400f44010000000000bb4300000144824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000036000000", data53, 228);
        auto slug53 = sktext::gpu::Slug::Deserialize(data53, 228);
        free(data53);
        void *paintdata_slug53 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug53, 28);
        SkReadBuffer paintbuffer_slug53 = SkReadBuffer(paintdata_slug53, 28);
        SkPaint paint_slug53 = SkPaintPriv::Unflatten(paintbuffer_slug53);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data54 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000a8e0430080de44f80000000000803f0000000000a8e043000000000000803f00000e4400000000000000000000803f010000000100000000000000010000000000803f0000000000a8e043000000000000803f00000e4400000000000000000000803f0080e1430080044400c0064400c00e44020000000080e143008004440000f843008004446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d16b0100ab6b0100", data54, 240);
        auto slug54 = sktext::gpu::Slug::Deserialize(data54, 240);
        free(data54);
        void *paintdata_slug54 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug54, 28);
        SkReadBuffer paintbuffer_slug54 = SkReadBuffer(paintdata_slug54, 28);
        SkPaint paint_slug54 = SkPaintPriv::Unflatten(paintbuffer_slug54);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data55 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000b51e440080de44e80000000000803f0000000000b51e44000000000000803f00000e4400000000000000000000803f010000000100000000000000010000000000803f0000000000b51e44000000000000803f00000e4400000000000000000000803f00801f440000014400c02d4400400f440100000000801f4400000144824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003b000000", data55, 228);
        auto slug55 = sktext::gpu::Slug::Deserialize(data55, 228);
        free(data55);
        void *paintdata_slug55 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug55, 28);
        SkReadBuffer paintbuffer_slug55 = SkReadBuffer(paintdata_slug55, 28);
        SkPaint paint_slug55 = SkPaintPriv::Unflatten(paintbuffer_slug55);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data56 = malloc(228);
        hexToRawData("0000004000001cc2000030420000804000f931440080de44e80000000000803f0000000000f93144000000000000803f00000e4400000000000000000000803f010000000100000000000000010000000000803f0000000000f93144000000000000803f00000e4400000000000000000000803f008032440040044400003d4400000f440100000000803244004004446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data56, 228);
        auto slug56 = sktext::gpu::Slug::Deserialize(data56, 228);
        free(data56);
        void *paintdata_slug56 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug56, 28);
        SkReadBuffer paintbuffer_slug56 = SkReadBuffer(paintdata_slug56, 28);
        SkPaint paint_slug56 = SkPaintPriv::Unflatten(paintbuffer_slug56);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data57 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c90440080dd44080100000000803f00000000806c9044000000000000803f00000c4400000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f00000c4400000000000000000000803f00c0904400400a440060964400400c440300000000c0904400400a440020934400400a440060954400400a44eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data57, 252);
        auto slug57 = sktext::gpu::Slug::Deserialize(data57, 252);
        free(data57);
        void *paintdata_slug57 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug57, 28);
        SkReadBuffer paintbuffer_slug57 = SkReadBuffer(paintdata_slug57, 28);
        SkPaint paint_slug57 = SkPaintPriv::Unflatten(paintbuffer_slug57);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect28 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rrect28, 28);
        SkReadBuffer paintBuffer_rrect28(paintdata_rrect28, 28);
        SkPaint paintRRect28 = SkPaintPriv::Unflatten(paintBuffer_rrect28);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect29 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect29, 28);
        SkReadBuffer paintBuffer_rrect29(paintdata_rrect29, 28);
        SkPaint paintRRect29 = SkPaintPriv::Unflatten(paintBuffer_rrect29);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1212.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1212.000000, 1344.000000, 1820.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect115);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect116);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1842.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect117);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1284.000000, 1274.000000, 1305.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect118);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1361.000000, 1274.000000, 1382.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect119);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1438.000000, 1274.000000, 1459.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect120);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1515.000000, 1274.000000, 1536.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect121);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1592.000000, 1274.000000, 1613.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect122);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug51->draw(canvas, paint_slug51);
        slug51->draw(canvas);
        free(paintdata_slug51);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug52->draw(canvas, paint_slug52);
        slug52->draw(canvas);
        free(paintdata_slug52);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug53->draw(canvas, paint_slug53);
        slug53->draw(canvas);
        free(paintdata_slug53);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug54->draw(canvas, paint_slug54);
        slug54->draw(canvas);
        free(paintdata_slug54);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug55->draw(canvas, paint_slug55);
        slug55->draw(canvas);
        free(paintdata_slug55);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug56->draw(canvas, paint_slug56);
        slug56->draw(canvas);
        free(paintdata_slug56);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug57->draw(canvas, paint_slug57);
        slug57->draw(canvas);
        free(paintdata_slug57);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1121.000000, 168.000000, 1233.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect28);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1122.500000, 166.500000, 1231.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect29);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: FBD3D5F640B2031EE1C280E3D59E93AB_1759762418933735.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest20, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect123 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect123, 28);
        SkReadBuffer paintBuffer_rect123(paintdata_rect123, 28);
        SkPaint paintRect123 = SkPaintPriv::Unflatten(paintBuffer_rect123);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect124 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect124, 28);
        SkReadBuffer paintBuffer_rect124(paintdata_rect124, 28);
        SkPaint paintRect124 = SkPaintPriv::Unflatten(paintBuffer_rect124);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect125 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect125, 28);
        SkReadBuffer paintBuffer_rect125(paintdata_rect125, 28);
        SkPaint paintRect125 = SkPaintPriv::Unflatten(paintBuffer_rect125);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect126 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect126, 28);
        SkReadBuffer paintBuffer_rect126(paintdata_rect126, 28);
        SkPaint paintRect126 = SkPaintPriv::Unflatten(paintBuffer_rect126);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect127 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect127, 28);
        SkReadBuffer paintBuffer_rect127(paintdata_rect127, 28);
        SkPaint paintRect127 = SkPaintPriv::Unflatten(paintBuffer_rect127);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect128 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect128, 28);
        SkReadBuffer paintBuffer_rect128(paintdata_rect128, 28);
        SkPaint paintRect128 = SkPaintPriv::Unflatten(paintBuffer_rect128);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect129 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect129, 28);
        SkReadBuffer paintBuffer_rect129(paintdata_rect129, 28);
        SkPaint paintRect129 = SkPaintPriv::Unflatten(paintBuffer_rect129);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect130 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect130, 28);
        SkReadBuffer paintBuffer_rect130(paintdata_rect130, 28);
        SkPaint paintRect130 = SkPaintPriv::Unflatten(paintBuffer_rect130);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect131 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect131, 28);
        SkReadBuffer paintBuffer_rect131(paintdata_rect131, 28);
        SkPaint paintRect131 = SkPaintPriv::Unflatten(paintBuffer_rect131);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect132 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect132, 28);
        SkReadBuffer paintBuffer_rect132(paintdata_rect132, 28);
        SkPaint paintRect132 = SkPaintPriv::Unflatten(paintBuffer_rect132);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect133 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect133, 28);
        SkReadBuffer paintBuffer_rect133(paintdata_rect133, 28);
        SkPaint paintRect133 = SkPaintPriv::Unflatten(paintBuffer_rect133);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect30 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rrect30, 28);
        SkReadBuffer paintBuffer_rrect30(paintdata_rrect30, 28);
        SkPaint paintRRect30 = SkPaintPriv::Unflatten(paintBuffer_rrect30);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect31 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect31, 28);
        SkReadBuffer paintBuffer_rrect31(paintdata_rrect31, 28);
        SkPaint paintRRect31 = SkPaintPriv::Unflatten(paintBuffer_rrect31);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1344.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect123);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1068.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect124);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1842.000000, 1316.000000, 1845.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect125);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect126);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2619.000000, 1316.000000, 2622.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect127);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2061.000000, 1274.000000, 2082.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect128);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2138.000000, 1274.000000, 2159.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect129);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2215.000000, 1274.000000, 2236.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect130);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2292.000000, 1274.000000, 2313.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect131);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2369.000000, 1274.000000, 2390.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect132);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 1932.000000, 441.000000, 1953.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect133);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1898.000000, 168.000000, 2010.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect30);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1899.500000, 166.500000, 2008.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect31);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 16B473D3C85BD4DE6B9B34C2E674F595_1759762418935005.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest21, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect134 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect134, 28);
        SkReadBuffer paintBuffer_rect134(paintdata_rect134, 28);
        SkPaint paintRect134 = SkPaintPriv::Unflatten(paintBuffer_rect134);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect135 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect135, 28);
        SkReadBuffer paintBuffer_rect135(paintdata_rect135, 28);
        SkPaint paintRect135 = SkPaintPriv::Unflatten(paintBuffer_rect135);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect136 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect136, 28);
        SkReadBuffer paintBuffer_rect136(paintdata_rect136, 28);
        SkPaint paintRect136 = SkPaintPriv::Unflatten(paintBuffer_rect136);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect137 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect137, 28);
        SkReadBuffer paintBuffer_rect137(paintdata_rect137, 28);
        SkPaint paintRect137 = SkPaintPriv::Unflatten(paintBuffer_rect137);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect138 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect138, 28);
        SkReadBuffer paintBuffer_rect138(paintdata_rect138, 28);
        SkPaint paintRect138 = SkPaintPriv::Unflatten(paintBuffer_rect138);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect139 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect139, 28);
        SkReadBuffer paintBuffer_rect139(paintdata_rect139, 28);
        SkPaint paintRect139 = SkPaintPriv::Unflatten(paintBuffer_rect139);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect140 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect140, 28);
        SkReadBuffer paintBuffer_rect140(paintdata_rect140, 28);
        SkPaint paintRect140 = SkPaintPriv::Unflatten(paintBuffer_rect140);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect141 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect141, 28);
        SkReadBuffer paintBuffer_rect141(paintdata_rect141, 28);
        SkPaint paintRect141 = SkPaintPriv::Unflatten(paintBuffer_rect141);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data58 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400000a84200d01f45e80000000000803f000000000000a842000000000000803f0000054300000000000000000000803f010000000100000000000000010000000000803f000000000000a842000000000000803f0000054300000000000000000000803f0000bc420000ae4200001a4300000343010000000000bc420000ae42824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data58, 228);
        auto slug58 = sktext::gpu::Slug::Deserialize(data58, 228);
        free(data58);
        void *paintdata_slug58 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug58, 28);
        SkReadBuffer paintbuffer_slug58 = SkReadBuffer(paintdata_slug58, 28);
        SkPaint paint_slug58 = SkPaintPriv::Unflatten(paintbuffer_slug58);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data59 = malloc(240);
        hexToRawData("0000803f00001cc20600b342000080400000394300d01f45f80000000000803f0000000000003943000000000000803f0000054300000000000000000000803f010000000100000000000000010000000000803f0000000000003943000000000000803f0000054300000000000000000000803f00003a430000bc4200008943000009430200000000003a430000bc42000068430000bc426f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000707a0100068c0000", data59, 240);
        auto slug59 = sktext::gpu::Slug::Deserialize(data59, 240);
        free(data59);
        void *paintdata_slug59 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug59, 28);
        SkReadBuffer paintbuffer_slug59 = SkReadBuffer(paintdata_slug59, 28);
        SkPaint paint_slug59 = SkPaintPriv::Unflatten(paintbuffer_slug59);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data60 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400042b94300d01f45e80000000000803f000000000042b943000000000000803f0000054300000000000000000000803f010000000100000000000000010000000000803f000000000042b943000000000000803f0000054300000000000000000000803f0000bb430000a2420000d84300000a43010000000000bb430000a242824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000036000000", data60, 228);
        auto slug60 = sktext::gpu::Slug::Deserialize(data60, 228);
        free(data60);
        void *paintdata_slug60 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug60, 28);
        SkReadBuffer paintbuffer_slug60 = SkReadBuffer(paintdata_slug60, 28);
        SkPaint paint_slug60 = SkPaintPriv::Unflatten(paintbuffer_slug60);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data61 = malloc(240);
        hexToRawData("00000040000018c20600b3420000404000a8e04300d01f45f80000000000803f0000000000a8e043000000000000803f0000054300000000000000000000803f010000000100000000000000010000000000803f0000000000a8e043000000000000803f0000054300000000000000000000803f0080e1430000be4200c0064400000843020000000080e1430000be420000f8430000be426f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000d16b0100ab6b0100", data61, 240);
        auto slug61 = sktext::gpu::Slug::Deserialize(data61, 240);
        free(data61);
        void *paintdata_slug61 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug61, 28);
        SkReadBuffer paintbuffer_slug61 = SkReadBuffer(paintdata_slug61, 28);
        SkPaint paint_slug61 = SkPaintPriv::Unflatten(paintbuffer_slug61);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data62 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000b51e4400d01f45e80000000000803f0000000000b51e44000000000000803f0000054300000000000000000000803f010000000100000000000000010000000000803f0000000000b51e44000000000000803f0000054300000000000000000000803f00801f440000a24200c02d4400000a430100000000801f440000a242824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003b000000", data62, 228);
        auto slug62 = sktext::gpu::Slug::Deserialize(data62, 228);
        free(data62);
        void *paintdata_slug62 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug62, 28);
        SkReadBuffer paintbuffer_slug62 = SkReadBuffer(paintdata_slug62, 28);
        SkPaint paint_slug62 = SkPaintPriv::Unflatten(paintbuffer_slug62);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data63 = malloc(228);
        hexToRawData("0000004000001cc2000030420000804000f9314400d01f45e80000000000803f0000000000f93144000000000000803f0000054300000000000000000000803f010000000100000000000000010000000000803f0000000000f93144000000000000803f0000054300000000000000000000803f008032440000bc4200003d440000094301000000008032440000bc426f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000038720100", data63, 228);
        auto slug63 = sktext::gpu::Slug::Deserialize(data63, 228);
        free(data63);
        void *paintdata_slug63 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug63, 28);
        SkReadBuffer paintbuffer_slug63 = SkReadBuffer(paintdata_slug63, 28);
        SkPaint paint_slug63 = SkPaintPriv::Unflatten(paintbuffer_slug63);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data64 = malloc(252);
        hexToRawData("000040400000e0c0b8493c420000803f806c904400501f45080100000000803f00000000806c9044000000000000803f0000fa4200000000000000000000803f010000000100000000000000010000000000803f00000000806c9044000000000000803f0000fa4200000000000000000000803f00c090440000ec42006096440000fc420300000000c090440000ec42002093440000ec42006095440000ec42eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000fa0b0000f80b0000fa0b0000", data64, 252);
        auto slug64 = sktext::gpu::Slug::Deserialize(data64, 252);
        free(data64);
        void *paintdata_slug64 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug64, 28);
        SkReadBuffer paintbuffer_slug64 = SkReadBuffer(paintdata_slug64, 28);
        SkPaint paint_slug64 = SkPaintPriv::Unflatten(paintbuffer_slug64);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect142 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rect142, 28);
        SkReadBuffer paintBuffer_rect142(paintdata_rect142, 28);
        SkPaint paintRect142 = SkPaintPriv::Unflatten(paintBuffer_rect142);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect32 = malloc(28);
        hexToRawData("0000000000008040fcf27b3ffcf27b3ffcf27b3f0000803f01030000", paintdata_rrect32, 28);
        SkReadBuffer paintBuffer_rrect32(paintdata_rrect32, 28);
        SkPaint paintRRect32 = SkPaintPriv::Unflatten(paintBuffer_rrect32);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect33 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect33, 28);
        SkReadBuffer paintBuffer_rrect33(paintdata_rrect33, 28);
        SkPaint paintRRect33 = SkPaintPriv::Unflatten(paintBuffer_rrect33);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -2424.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2424.000000, 1344.000000, 3032.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 4177.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect134);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect135);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2619.000000, 1316.000000, 2622.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect136);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect137);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3397.000000, 1316.000000, 3400.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect138);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2838.000000, 1274.000000, 2859.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect139);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2915.000000, 1274.000000, 2936.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect140);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2992.000000, 1274.000000, 3013.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect141);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1845.000000, 1316.000000, 2622.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug58->draw(canvas, paint_slug58);
        slug58->draw(canvas);
        free(paintdata_slug58);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug59->draw(canvas, paint_slug59);
        slug59->draw(canvas);
        free(paintdata_slug59);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug60->draw(canvas, paint_slug60);
        slug60->draw(canvas);
        free(paintdata_slug60);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug61->draw(canvas, paint_slug61);
        slug61->draw(canvas);
        free(paintdata_slug61);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug62->draw(canvas, paint_slug62);
        slug62->draw(canvas);
        free(paintdata_slug62);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug63->draw(canvas, paint_slug63);
        slug63->draw(canvas);
        free(paintdata_slug63);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug64->draw(canvas, paint_slug64);
        slug64->draw(canvas);
        free(paintdata_slug64);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(196.000000, 2709.000000, 441.000000, 2730.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect142);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 2675.000000, 168.000000, 2787.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect32);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2622.000000, 1316.000000, 3400.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 2676.500000, 166.500000, 2785.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect33);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 4C1E70458F41462162DA2BB2AC0836C9_1759762418935866.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest22, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect143 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect143, 28);
        SkReadBuffer paintBuffer_rect143(paintdata_rect143, 28);
        SkPaint paintRect143 = SkPaintPriv::Unflatten(paintBuffer_rect143);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect144 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect144, 28);
        SkReadBuffer paintBuffer_rect144(paintdata_rect144, 28);
        SkPaint paintRect144 = SkPaintPriv::Unflatten(paintBuffer_rect144);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect145 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect145, 28);
        SkReadBuffer paintBuffer_rect145(paintdata_rect145, 28);
        SkPaint paintRect145 = SkPaintPriv::Unflatten(paintBuffer_rect145);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data65 = malloc(264);
        hexToRawData("00000040000024c2060042430000a0400000444300005f43180100000000803f0000000000004443000000000000803f0000c94300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000c94300000000000000000000803f000046430080b4430000c3430080cb4304000000000046430080b44300007a430080b543000097430080b5430000ac430080b44365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000a877000004ed000054d4000054c70000", data65, 264);
        auto slug65 = sktext::gpu::Slug::Deserialize(data65, 264);
        free(data65);
        void *paintdata_slug65 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug65, 28);
        SkReadBuffer paintbuffer_slug65 = SkReadBuffer(paintdata_slug65, 28);
        SkPaint paint_slug65 = SkPaintPriv::Unflatten(paintbuffer_slug65);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data66 = malloc(324);
        hexToRawData("000040400000e8c1baab3943000000000000444300008e43680100000000803f0000000000004443000000000000803f0080e74300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0080e74300000000000000000000803f000047430000d9430000bf430080e74309000000000047430000d94300005b430000d943000072430080e043000082430000d943000092430000d94300009e430000d9430080a8430080db430000ad430000d9430000b9430000d943f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000e8090000e4090000800c0000f3090000ec090000e8090000700c0000f3090000eb090000", data66, 324);
        auto slug66 = sktext::gpu::Slug::Deserialize(data66, 324);
        free(data66);
        void *paintdata_slug66 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug66, 28);
        SkReadBuffer paintbuffer_slug66 = SkReadBuffer(paintdata_slug66, 28);
        SkPaint paint_slug66 = SkPaintPriv::Unflatten(paintbuffer_slug66);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data67 = malloc(448);
        hexToRawData("00523641000008c22f659043000080400050c24300008e43200200000000803f000000000050c243000000000000803f0080e74300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0080e74300000000000000000000803f0000c8430080d6430080eb430080e943020000000000c8430000d7430080dd430080d643817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0080e74300000000000000000000803f0080f3430000d743008029440080e943050000000080f3430000d743008003440000d74300000d440000d74300c016440000d743008020440000d843817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000da630100049f01009e8c0000", data67, 448);
        auto slug67 = sktext::gpu::Slug::Deserialize(data67, 448);
        free(data67);
        void *paintdata_slug67 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug67, 28);
        SkReadBuffer paintbuffer_slug67 = SkReadBuffer(paintdata_slug67, 28);
        SkPaint paint_slug67 = SkPaintPriv::Unflatten(paintbuffer_slug67);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data68 = malloc(252);
        hexToRawData("00525641000004c254caf8420000804000bb294400008e43080100000000803f0000000000bb2944000000000000803f0080e74300000000000000000000803f010000000100000000000000010000000000803f0000000000bb2944000000000000803f0080e74300000000000000000000803f00402d440000d743000049440080e9430300000000402d440000d843004036440000d74300c03f440000d743817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300300000089b400001b390100057b0100", data68, 252);
        auto slug68 = sktext::gpu::Slug::Deserialize(data68, 252);
        free(data68);
        void *paintdata_slug68 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug68, 28);
        SkReadBuffer paintbuffer_slug68 = SkReadBuffer(paintdata_slug68, 28);
        SkPaint paint_slug68 = SkPaintPriv::Unflatten(paintbuffer_slug68);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data69 = malloc(632);
        hexToRawData("00000000000040c2ae0702440000a040000060420080cd43280300000000803f0000000000006042000000000000803f0080134400000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0080134400000000000000000000803f00006042004009440000b842008013440100000000006042004009440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000006042000000000000803f0080134400000000000000000000803f0000be42008007440040064400c01444080000000000be42008007440000174300c0074400004e4300800744008082430080074400009f4300c007440000bb43008007440000d74300c007440000f34300400844c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43008000000f84a010090a10000d0370100e08c0000e48100003c7d0100a8a10000408300000100000000000000010000000000803f0000000000006042000000000000803f0080134400000000000000000000803f000007440040094400001044008013440100000000000744004009440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data69, 632);
        auto slug69 = sktext::gpu::Slug::Deserialize(data69, 632);
        free(data69);
        void *paintdata_slug69 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug69, 28);
        SkReadBuffer paintbuffer_slug69 = SkReadBuffer(paintdata_slug69, 28);
        SkPaint paint_slug69 = SkPaintPriv::Unflatten(paintbuffer_slug69);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data70 = malloc(288);
        hexToRawData("00001442000040c2008093430000c040001010440080cd43380100000000803f0000000000101044000000000000803f0080134400000000000000000000803f010000000100000000000000010000000000803f0000000000101044000000000000803f0080134400000000000000000000803f004019440080074400005a4400001544060000000040194400c0074400801e440080074400802c440080074400803a4400c0074400804844008007440000584400c00844ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000f5c40100717a0100058c000035220100a9710100b1c30100", data70, 288);
        auto slug70 = sktext::gpu::Slug::Deserialize(data70, 288);
        free(data70);
        void *paintdata_slug70 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug70, 28);
        SkReadBuffer paintbuffer_slug70 = SkReadBuffer(paintdata_slug70, 28);
        SkPaint paint_slug70 = SkPaintPriv::Unflatten(paintbuffer_slug70);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data71 = malloc(424);
        hexToRawData("00000000000040c25c0f81430000a040001064440080cd43000200000000803f0000000000106444000000000000803f0080134400000000000000000000803f020000000100000000000000010000000000803f0000000000106444000000000000803f0080134400000000000000000000803f004064440040094400006d44008013440100000000406444004009440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000390c00000100000000000000010000000000803f0000000000106444000000000000803f0080134400000000000000000000803f00406e44008007440040924400c014440400000000406e440040084400c07b440000084400e084440080074400c08b4400800744c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43004000000b598000009760000d5880000b5cc0000", data71, 424);
        auto slug71 = sktext::gpu::Slug::Deserialize(data71, 424);
        free(data71);
        void *paintdata_slug71 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug71, 28);
        SkReadBuffer paintbuffer_slug71 = SkReadBuffer(paintdata_slug71, 28);
        SkPaint paint_slug71 = SkPaintPriv::Unflatten(paintbuffer_slug71);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data72 = malloc(228);
        hexToRawData("d3d2d2bd00007cc26a697c420000000000cf02440000b642e80000000000803f0000000000cf0244000000000000803f0000874300000000000000000000803f010000000100000000000000010000000000803f0000000000cf0244000000000000803f0000874300000000000000000000803f00c006440000514300800e44000086430100000000c0064400005143340d57044c0000000100000063657273380000000400000000007c420000803f000000000000803f00000000000000000000803f000080bf00000000000000006d6d6dff590000000100b4300100000049000000", data72, 228);
        auto slug72 = sktext::gpu::Slug::Deserialize(data72, 228);
        free(data72);
        void *paintdata_slug72 = malloc(28);
        hexToRawData("0000000000008040f9f8f83ef9f8f83ef9f8f83e0000803f01030000", paintdata_slug72, 28);
        SkReadBuffer paintbuffer_slug72 = SkReadBuffer(paintdata_slug72, 28);
        SkPaint paint_slug72 = SkPaintPriv::Unflatten(paintbuffer_slug72);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data73 = malloc(264);
        hexToRawData("00000040000010c20c0027430000804000301c4400009442180100000000803f0000000000301c44000000000000803f00007d4300000000000000000000803f010000000100000000000000010000000000803f0000000000301c44000000000000803f00007d4300000000000000000000803f00c01c440000594300004644008080430400000000c01c4400005c430000274400005943008031440000594300003c44000059435bf1126b4c0000000100000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf00000000000000006d6d6dff590000000100b43004000000ef740000e7c700009f85000083d30000", data73, 264);
        auto slug73 = sktext::gpu::Slug::Deserialize(data73, 264);
        free(data73);
        void *paintdata_slug73 = malloc(28);
        hexToRawData("0000000000008040f9f8f83ef9f8f83ef9f8f83e0000803f01030000", paintdata_slug73, 28);
        SkReadBuffer paintbuffer_slug73 = SkReadBuffer(paintdata_slug73, 28);
        SkPaint paint_slug73 = SkPaintPriv::Unflatten(paintbuffer_slug73);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect34 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect34, 28);
        SkReadBuffer paintBuffer_rrect34(paintdata_rrect34, 28);
        SkPaint paintRRect34 = SkPaintPriv::Unflatten(paintBuffer_rrect34);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect35 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect35, 28);
        SkReadBuffer paintBuffer_rrect35(paintdata_rrect35, 28);
        SkPaint paintRRect35 = SkPaintPriv::Unflatten(paintBuffer_rrect35);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata5 = malloc(224);
        hexToRawData("0501000016000000040000000f0000005839fc408b6c37408b6cff408b6c37409cc400417b143e40ac1c00416ce743405839b8407b1400417110b740e05b01418941b44042600141355e8a401f850141237a874075870141d34d86404035004116d9fe3f93184440bdbef33fe4973740508d074014ae374019045e404f8d3740e04f65404f8d37400bd76b4030083c402b876e4082c04240d1229f406666c640b81ec94084eb41405a69cb40ccf936401058d1403c0a37405839fc40ec7c37401e04583f462f563fe4da0a3f5bbf543f00040103010301030104010103010500", pathdata5, 224);
        SkPath path5;
        path5.readFromMemory(pathdata5, 224);
        void *paintdata_path5 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_path5, 28);
        SkReadBuffer paintBuffer_path5(paintdata_path5, 28);
        SkPaint paintPath5 = SkPaintPriv::Unflatten(paintBuffer_path5);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 608.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect143);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect144);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect145);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 173.000000, 1274.000000, 242.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug65->draw(canvas, paint_slug65);
        slug65->draw(canvas);
        free(paintdata_slug65);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 242.000000, 1274.000000, 299.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug66->draw(canvas, paint_slug66);
        slug66->draw(canvas);
        free(paintdata_slug66);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug67->draw(canvas, paint_slug67);
        slug67->draw(canvas);
        free(paintdata_slug67);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug68->draw(canvas, paint_slug68);
        slug68->draw(canvas);
        free(paintdata_slug68);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug69->draw(canvas, paint_slug69);
        slug69->draw(canvas);
        free(paintdata_slug69);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug70->draw(canvas, paint_slug70);
        slug70->draw(canvas);
        free(paintdata_slug70);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug71->draw(canvas, paint_slug71);
        slug71->draw(canvas);
        free(paintdata_slug71);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug72->draw(canvas, paint_slug72);
        slug72->draw(canvas);
        free(paintdata_slug72);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug73->draw(canvas, paint_slug73);
        slug73->draw(canvas);
        free(paintdata_slug73);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 165.000000, 168.000000, 277.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect34);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 166.500000, 166.500000, 275.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect35);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 231.000000, 172.000000, 280.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,-847.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,308.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path5, paintPath5);
        free(pathdata5);
        free(paintdata_path5);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 72216F1753D1933B21A8B6919B109039_1759762418960424.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest23, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect146 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect146, 28);
        SkReadBuffer paintBuffer_rect146(paintdata_rect146, 28);
        SkPaint paintRect146 = SkPaintPriv::Unflatten(paintBuffer_rect146);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect147 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect147, 28);
        SkReadBuffer paintBuffer_rect147(paintdata_rect147, 28);
        SkPaint paintRect147 = SkPaintPriv::Unflatten(paintBuffer_rect147);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect148 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect148, 28);
        SkReadBuffer paintBuffer_rect148(paintdata_rect148, 28);
        SkPaint paintRect148 = SkPaintPriv::Unflatten(paintBuffer_rect148);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data74 = malloc(656);
        hexToRawData("00000000000040c2edfc16440000a040000060420080f743480300000000803f0000000000006042000000000000803f0000884200000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f000060420000d841000030430000884203000000000060420000d8410000de420000d841000010430000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43003000000a802000031020000310200000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f000036430000a04100801b440000924208000000000036430000a04100006d430000b841000091430000a0410000ad430000a8410000c9430000b8410000e5430000b84100c000440000c04100c00e440000c041c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300800000074750000b49800005ca1000044f800007c71010040830000287700002c8300000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f00001c440000d84100002544000088420100000000001c440000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data74, 656);
        auto slug74 = sktext::gpu::Slug::Deserialize(data74, 656);
        free(data74);
        void *paintdata_slug74 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug74, 28);
        SkReadBuffer paintbuffer_slug74 = SkReadBuffer(paintdata_slug74, 28);
        SkPaint paint_slug74 = SkPaintPriv::Unflatten(paintbuffer_slug74);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data75 = malloc(228);
        hexToRawData("0000804000003cc2000098410000c040000525440080f743e80000000000803f0000000000052544000000000000803f0000884200000000000000000000803f010000000100000000000000010000000000803f0000000000052544000000000000803f0000884200000000000000000000803f000026440000a84100c029440000944201000000000026440000a841ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000fcc40100", data75, 228);
        auto slug75 = sktext::gpu::Slug::Deserialize(data75, 228);
        free(data75);
        void *paintdata_slug75 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug75, 28);
        SkReadBuffer paintbuffer_slug75 = SkReadBuffer(paintdata_slug75, 28);
        SkPaint paint_slug75 = SkPaintPriv::Unflatten(paintbuffer_slug75);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data76 = malloc(484);
        hexToRawData("00000000000040c2ae4706440000a040000533440080f743500200000000803f0000000000053344000000000000803f0000884200000000000000000000803f020000000100000000000000010000000000803f0000000000053344000000000000803f0000884200000000000000000000803f000033440000d84100003c440000884201000000000033440000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000053344000000000000803f0000884200000000000000000000803f00c03c440000a04100c09c44000092420900000000c03c440000c04100c04a440000a841004058440000a041008066440000b041008074440000a841006081440000a041004088440000a84100408f440000c041004096440000b841c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43009000000ed0a010029e20000598f010025aa0000199f0100f94a01009df40000f18b000041830000", data76, 484);
        auto slug76 = sktext::gpu::Slug::Deserialize(data76, 484);
        free(data76);
        void *paintdata_slug76 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug76, 28);
        SkReadBuffer paintbuffer_slug76 = SkReadBuffer(paintdata_slug76, 28);
        SkPaint paint_slug76 = SkPaintPriv::Unflatten(paintbuffer_slug76);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data77 = malloc(388);
        hexToRawData("00004040000030c20000b842000080400000604200c01044d00100000000803f0000000000006042000000000000803f0000184300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0000184300000000000000000000803f00006c420000d8420000dc4200001c430100000000006c420000d842c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430010000002c8300000100000000000000010000000000803f0000000000006042000000000000803f0000184300000000000000000000803f0000e0420000de420000144300001843010000000000e0420000de420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data77, 388);
        auto slug77 = sktext::gpu::Slug::Deserialize(data77, 388);
        free(data77);
        void *paintdata_slug77 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug77, 28);
        SkReadBuffer paintbuffer_slug77 = SkReadBuffer(paintdata_slug77, 28);
        SkPaint paint_slug77 = SkPaintPriv::Unflatten(paintbuffer_slug77);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data78 = malloc(888);
        hexToRawData("00000040000044c29bc47744000010410020144300c01044900400000000803f0000000000201443000000000000803f0000184300000000000000000000803f040000000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f000016430000ce420000d54300001d4305000000000016430000d242000051430000d242008084430000d24200009f430000d2420080bb430000ce42ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300500000079ca0000698f0000158f00000d7a0000893f01000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f0080e143000012430000e64300002143010000000080e14300001243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000a9c301000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f0080f9430000de4200c01a4400001843030000000080f9430000de4200c00a440000de42000013440000de42eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000a902000032020000320200000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f00401c440000d04200808e44000021430a00000000401c440000d04200002a440000d642008037440000d042004045440000d242004053440000d642004061440000d24200406f440000d84200407d440000d04200a085440000d04200608d4400001243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300a00000075750000b59800005da1000045f800007d7101009df40000f18b00008d8300002d720100a9c30100", data78, 888);
        auto slug78 = sktext::gpu::Slug::Deserialize(data78, 888);
        free(data78);
        void *paintdata_slug78 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug78, 28);
        SkReadBuffer paintbuffer_slug78 = SkReadBuffer(paintdata_slug78, 28);
        SkPaint paint_slug78 = SkPaintPriv::Unflatten(paintbuffer_slug78);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data79 = malloc(228);
        hexToRawData("00000040000030c2000054420000e0408066934400c01044e80000000000803f0000000080669344000000000000803f0000184300000000000000000000803f010000000100000000000000010000000000803f0000000080669344000000000000803f0000184300000000000000000000803f00c093440000d84200009a4400001f430100000000c093440000d8420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000310d0000", data79, 228);
        auto slug79 = sktext::gpu::Slug::Deserialize(data79, 228);
        free(data79);
        void *paintdata_slug79 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug79, 28);
        SkReadBuffer paintbuffer_slug79 = SkReadBuffer(paintdata_slug79, 28);
        SkPaint paint_slug79 = SkPaintPriv::Unflatten(paintbuffer_slug79);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data80 = malloc(252);
        hexToRawData("0000803f000040c2000026430000a0400000604200c02544080100000000803f0000000000006042000000000000803f00006c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f00006c4300000000000000000000803f0000644200003c4300005e4300007143030000000000644200003e430000e44200003d4300002b4300003c43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300300000024aa0000189f0100f84a0100", data80, 252);
        auto slug80 = sktext::gpu::Slug::Deserialize(data80, 252);
        free(data80);
        void *paintdata_slug80 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug80, 28);
        SkReadBuffer paintbuffer_slug80 = SkReadBuffer(paintdata_slug80, 28);
        SkPaint paint_slug80 = SkPaintPriv::Unflatten(paintbuffer_slug80);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data81 = malloc(228);
        hexToRawData("70144e41000024c21c850742000000000000604300c02544e80000000000803f0000000000006043000000000000803f00006c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006043000000000000803f00006c4300000000000000000000803f00006d43000043430000814300006c430100000000006d4300004343eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003c0c0000", data81, 228);
        auto slug81 = sktext::gpu::Slug::Deserialize(data81, 228);
        free(data81);
        void *paintdata_slug81 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug81, 28);
        SkReadBuffer paintbuffer_slug81 = SkReadBuffer(paintdata_slug81, 28);
        SkPaint paint_slug81 = SkPaintPriv::Unflatten(paintbuffer_slug81);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data82 = malloc(596);
        hexToRawData("00000040000040c2e67b9243000010410070804300c02544f80200000000803f0000000000708043000000000000803f00006c4300000000000000000000803f030000000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f008081430000404300009b43000073430100000000808143000040430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000300d00000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f00009d4300003c430000ef43000071430300000000009d43000040430000b94300003d430000d44300003c43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43003000000ee0a01002ae200005a8f01000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f0080ef43000070430040094400007543030000000080ef43000070430000fb430000704300400344000070430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430030000009e0c00009f0c00009f0c0000", data82, 596);
        auto slug82 = sktext::gpu::Slug::Deserialize(data82, 596);
        free(data82);
        void *paintdata_slug82 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug82, 28);
        SkReadBuffer paintbuffer_slug82 = SkReadBuffer(paintdata_slug82, 28);
        SkPaint paint_slug82 = SkPaintPriv::Unflatten(paintbuffer_slug82);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data83 = malloc(668);
        hexToRawData("c0f5a041000040c2703d3044000010410042094400c02544580300000000803f0000000000420944000000000000803f00006c4300000000000000000000803f030000000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f00400e4400003c4300004444000071430400000000400e4400003d4300801b4400003d4300402a4400003c430080374400003d43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300400000021c5000031400100e1950100410301000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f004045440000434300804a4400006c43010000000040454400004343eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003d0c00000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f00404b4400003c4300c09c44000075430800000000404b4400003d4300c0584400003c430000674400003c43008076440000664300a0814400003f430080884400003c430000904400003c4300e0964400003f43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000d0b70100ec8b0000bcd10000a8c3010050750000d037010074750000b4980000", data83, 668);
        auto slug83 = sktext::gpu::Slug::Deserialize(data83, 668);
        free(data83);
        void *paintdata_slug83 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug83, 28);
        SkReadBuffer paintbuffer_slug83 = SkReadBuffer(paintdata_slug83, 28);
        SkPaint paint_slug83 = SkPaintPriv::Unflatten(paintbuffer_slug83);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data84 = malloc(372);
        hexToRawData("00000040000040c200c02b440000c0400000604200c03a44a80100000000803f0000000000006042000000000000803f0000a04300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000a04300000000000000000000803f000068420000884300c039440000a3430d00000000006842000088430000e4420000894300002a4300008843000062430000884300008d43008088430080a84300008a430000c543008089430080e14300008a430080fd4300008a4300800d4400809a4300801a440080884300402844000088430000384400808a43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300d000000e47c0100ecc50000d4880000b4cc00009cf40000f08b000040830000287700002c830000b0c6010034220100a8710100b0c30100", data84, 372);
        auto slug84 = sktext::gpu::Slug::Deserialize(data84, 372);
        free(data84);
        void *paintdata_slug84 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug84, 28);
        SkReadBuffer paintbuffer_slug84 = SkReadBuffer(paintdata_slug84, 28);
        SkPaint paint_slug84 = SkPaintPriv::Unflatten(paintbuffer_slug84);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data85 = malloc(300);
        hexToRawData("00004040000040c20000c3430000a0400088574400c03a44480100000000803f0000000000885744000000000000803f0000a04300000000000000000000803f010000000100000000000000010000000000803f0000000000885744000000000000803f0000a04300000000000000000000803f004058440000884300809c440080a24307000000004058440080884300006744008089430000764400008a430000814400808843006088440000884300e08e44000088430000964400008843c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43007000000a977000005ed000055d4000055c70000d116010079bb0000298a0000", data85, 300);
        auto slug85 = sktext::gpu::Slug::Deserialize(data85, 300);
        free(data85);
        void *paintdata_slug85 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug85, 28);
        SkReadBuffer paintbuffer_slug85 = SkReadBuffer(paintdata_slug85, 28);
        SkPaint paint_slug85 = SkPaintPriv::Unflatten(paintbuffer_slug85);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data86 = malloc(240);
        hexToRawData("00000040000040c20000dc420000a0400000604200005144f80000000000803f0000000000006042000000000000803f0080cc4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cc4300000000000000000000803f000068420080b443000026430000cf4302000000000068420080b4430000e2420080b443c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43002000000d8630100049f0100", data86, 240);
        auto slug86 = sktext::gpu::Slug::Deserialize(data86, 240);
        free(data86);
        void *paintdata_slug86 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug86, 28);
        SkReadBuffer paintbuffer_slug86 = SkReadBuffer(paintdata_slug86, 28);
        SkPaint paint_slug86 = SkPaintPriv::Unflatten(paintbuffer_slug86);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect149 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect149, 28);
        SkReadBuffer paintBuffer_rect149(paintdata_rect149, 28);
        SkPaint paintRect149 = SkPaintPriv::Unflatten(paintBuffer_rect149);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect150 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect150, 28);
        SkReadBuffer paintBuffer_rect150(paintdata_rect150, 28);
        SkPaint paintRect150 = SkPaintPriv::Unflatten(paintBuffer_rect150);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -606.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 606.000000, 1316.000000, 1214.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect146);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect147);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect148);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug74->draw(canvas, paint_slug74);
        slug74->draw(canvas);
        free(paintdata_slug74);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug75->draw(canvas, paint_slug75);
        slug75->draw(canvas);
        free(paintdata_slug75);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug76->draw(canvas, paint_slug76);
        slug76->draw(canvas);
        free(paintdata_slug76);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug77->draw(canvas, paint_slug77);
        slug77->draw(canvas);
        free(paintdata_slug77);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug78->draw(canvas, paint_slug78);
        slug78->draw(canvas);
        free(paintdata_slug78);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug79->draw(canvas, paint_slug79);
        slug79->draw(canvas);
        free(paintdata_slug79);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug80->draw(canvas, paint_slug80);
        slug80->draw(canvas);
        free(paintdata_slug80);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug81->draw(canvas, paint_slug81);
        slug81->draw(canvas);
        free(paintdata_slug81);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug82->draw(canvas, paint_slug82);
        slug82->draw(canvas);
        free(paintdata_slug82);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug83->draw(canvas, paint_slug83);
        slug83->draw(canvas);
        free(paintdata_slug83);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug84->draw(canvas, paint_slug84);
        slug84->draw(canvas);
        free(paintdata_slug84);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug85->draw(canvas, paint_slug85);
        slug85->draw(canvas);
        free(paintdata_slug85);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug86->draw(canvas, paint_slug86);
        slug86->draw(canvas);
        free(paintdata_slug86);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect149);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect150);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 218F6FD22A1503484FF178A07B190261_1759762418993596.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest24, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect151 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect151, 28);
        SkReadBuffer paintBuffer_rect151(paintdata_rect151, 28);
        SkPaint paintRect151 = SkPaintPriv::Unflatten(paintBuffer_rect151);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect152 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect152, 28);
        SkReadBuffer paintBuffer_rect152(paintdata_rect152, 28);
        SkPaint paintRect152 = SkPaintPriv::Unflatten(paintBuffer_rect152);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect153 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect153, 28);
        SkReadBuffer paintBuffer_rect153(paintdata_rect153, 28);
        SkPaint paintRect153 = SkPaintPriv::Unflatten(paintBuffer_rect153);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data87 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000244400000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000244400000000000000000000803f00005042008018440000e04200802344010000000000504200801844824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data87, 228);
        auto slug87 = sktext::gpu::Slug::Deserialize(data87, 228);
        free(data87);
        void *paintdata_slug87 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug87, 28);
        SkReadBuffer paintbuffer_slug87 = SkReadBuffer(paintdata_slug87, 28);
        SkPaint paint_slug87 = SkPaintPriv::Unflatten(paintbuffer_slug87);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data88 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000224400000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000224400000000000000000000803f0000114300801944000075430040224404000000000011430080194400002d4300c019440000474300c0194400005e4300801944b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data88, 264);
        auto slug88 = sktext::gpu::Slug::Deserialize(data88, 264);
        free(data88);
        void *paintdata_slug88 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug88, 28);
        SkReadBuffer paintbuffer_slug88 = SkReadBuffer(paintdata_slug88, 28);
        SkPaint paint_slug88 = SkPaintPriv::Unflatten(paintbuffer_slug88);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data89 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000244400000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000244400000000000000000000803f0080ac43000017440080c94300402544010000000080ac4300001744824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data89, 228);
        auto slug89 = sktext::gpu::Slug::Deserialize(data89, 228);
        free(data89);
        void *paintdata_slug89 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug89, 28);
        SkReadBuffer paintbuffer_slug89 = SkReadBuffer(paintdata_slug89, 28);
        SkPaint paint_slug89 = SkPaintPriv::Unflatten(paintbuffer_slug89);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data90 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000224400000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000224400000000000000000000803f0000d443008019440080024400402244040000000000d44300c019440000e043008019440000ed4300c019440080f94300801944b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data90, 264);
        auto slug90 = sktext::gpu::Slug::Deserialize(data90, 264);
        free(data90);
        void *paintdata_slug90 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug90, 28);
        SkReadBuffer paintbuffer_slug90 = SkReadBuffer(paintdata_slug90, 28);
        SkPaint paint_slug90 = SkPaintPriv::Unflatten(paintbuffer_slug90);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data91 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000244400000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000244400000000000000000000803f00801b440000174400802944004025440100000000801b4400001744824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data91, 228);
        auto slug91 = sktext::gpu::Slug::Deserialize(data91, 228);
        free(data91);
        void *paintdata_slug91 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug91, 28);
        SkReadBuffer paintbuffer_slug91 = SkReadBuffer(paintdata_slug91, 28);
        SkPaint paint_slug91 = SkPaintPriv::Unflatten(paintbuffer_slug91);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data92 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000224400000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000224400000000000000000000803f00002e440080194400003d44004022440300000000002e4400c0194400c0344400c020440040374400801944b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000224400000000000000000000803f00c03d44000019440040484400c022440100000000c03d44000019446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data92, 412);
        auto slug92 = sktext::gpu::Slug::Deserialize(data92, 412);
        free(data92);
        void *paintdata_slug92 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug92, 28);
        SkReadBuffer paintbuffer_slug92 = SkReadBuffer(paintdata_slug92, 28);
        SkPaint paint_slug92 = SkPaintPriv::Unflatten(paintbuffer_slug92);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data93 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f00c0254400000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f00c0254400000000000000000000803f00a0964400001e4400c09b4400c01f440100000000a0964400001e44675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data93, 228);
        auto slug93 = sktext::gpu::Slug::Deserialize(data93, 228);
        free(data93);
        void *paintdata_slug93 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug93, 28);
        SkReadBuffer paintbuffer_slug93 = SkReadBuffer(paintdata_slug93, 28);
        SkPaint paint_slug93 = SkPaintPriv::Unflatten(paintbuffer_slug93);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect154 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect154, 28);
        SkReadBuffer paintBuffer_rect154(paintdata_rect154, 28);
        SkPaint paintRect154 = SkPaintPriv::Unflatten(paintBuffer_rect154);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect155 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect155, 28);
        SkReadBuffer paintBuffer_rect155(paintdata_rect155, 28);
        SkPaint paintRect155 = SkPaintPriv::Unflatten(paintBuffer_rect155);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect36 = malloc(28);
        hexToRawData("0000000000008040000000000000000000000000cdcccc3e01030000", paintdata_rrect36, 28);
        SkReadBuffer paintBuffer_rrect36(paintdata_rrect36, 28);
        SkPaint paintRRect36 = SkPaintPriv::Unflatten(paintBuffer_rrect36);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect156 = malloc(320);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200f40000000000803f0000000000006042000000000000803f00a0b54400000000000000000000803f10000000536b4c696e6561724772616469656e7400000000b4000000010000a0040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdcc4c3e000000000000000000000000cdcc4c3e44000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f04000000000000008fc2f53c48e17a3f0000803f0000000000000000000000000000fc4200000000000000000000000000000000", paintdata_rect156, 320);
        SkReadBuffer paintBuffer_rect156(paintdata_rect156, 320);
        SkPaint paintRect156 = SkPaintPriv::Unflatten(paintBuffer_rect156);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data94 = malloc(540);
        hexToRawData("00000040000010c258e1564300008040000093420060c144100200000000803f0000000000009342000000000000803f0080004400000000000000000000803f020000000100000000000000010000000000803f0000000000009342000000000000803f0080004400000000000000000000803f000084420000ed430000004300c0024402000000000084420000ed430000b4420080ed43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000002000000ee090000020a00000100000000000000010000000000803f0000000000009342000000000000803f0080004400000000000000000000803f0000e4420080ea430000954300c00344040000000000e4420000ec4300001d430080ea43000045430080ea4300006f430080ea4300b0c1ac800000000200000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000de74000046e9000076cf0000bad10000", data94, 540);
        auto slug94 = sktext::gpu::Slug::Deserialize(data94, 540);
        free(data94);
        void *paintdata_slug94 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug94, 28);
        SkReadBuffer paintbuffer_slug94 = SkReadBuffer(paintdata_slug94, 28);
        SkPaint paint_slug94 = SkPaintPriv::Unflatten(paintbuffer_slug94);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data95 = malloc(316);
        hexToRawData("000000400000f8c11e2ea1420000000000bf92440060c144180100000000803f0000000000bf9244000000000000803f0080004400000000000000000000803f010000000100000000000000010000000000803f0000000000bf9244000000000000803f0080004400000000000000000000803f00e091440000ed4300009e4400c002440400000000e091440000ed4300e094440080ef43002096440000ed43004099440080ed43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000e4090000700c0000ee090000fa090000", data95, 316);
        auto slug95 = sktext::gpu::Slug::Deserialize(data95, 316);
        free(data95);
        void *paintdata_slug95 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug95, 28);
        SkReadBuffer paintbuffer_slug95 = SkReadBuffer(paintdata_slug95, 28);
        SkPaint paint_slug95 = SkPaintPriv::Unflatten(paintbuffer_slug95);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1212.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1212.000000, 1316.000000, 1820.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect151);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect152);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect153);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug87->draw(canvas, paint_slug87);
        slug87->draw(canvas);
        free(paintdata_slug87);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug88->draw(canvas, paint_slug88);
        slug88->draw(canvas);
        free(paintdata_slug88);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug89->draw(canvas, paint_slug89);
        slug89->draw(canvas);
        free(paintdata_slug89);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug90->draw(canvas, paint_slug90);
        slug90->draw(canvas);
        free(paintdata_slug90);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug91->draw(canvas, paint_slug91);
        slug91->draw(canvas);
        free(paintdata_slug91);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug92->draw(canvas, paint_slug92);
        slug92->draw(canvas);
        free(paintdata_slug92);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug93->draw(canvas, paint_slug93);
        slug93->draw(canvas);
        free(paintdata_slug93);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect154);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect155);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(571.000000, 1142.000000, 760.000000, 1331.000000);
        SkVector radii[4] = { { 94.500000,94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect36);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1453.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect156);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug94->draw(canvas, paint_slug94);
        slug94->draw(canvas);
        free(paintdata_slug94);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug95->draw(canvas, paint_slug95);
        slug95->draw(canvas);
        free(paintdata_slug95);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762419014006.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest25, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect157 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect157, 28);
        SkReadBuffer paintBuffer_rect157(paintdata_rect157, 28);
        SkPaint paintRect157 = SkPaintPriv::Unflatten(paintBuffer_rect157);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect158 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect158, 28);
        SkReadBuffer paintBuffer_rect158(paintdata_rect158, 28);
        SkPaint paintRect158 = SkPaintPriv::Unflatten(paintBuffer_rect158);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect159 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect159, 28);
        SkReadBuffer paintBuffer_rect159(paintdata_rect159, 28);
        SkPaint paintRect159 = SkPaintPriv::Unflatten(paintBuffer_rect159);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data96 = malloc(468);
        hexToRawData("0000803f000040c200e09244000010410000604200601545280200000000803f0000000000006042000000000000803f0000114300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000114300000000000000000000803f000064420000c24200e0994400001a4315000000000064420000c6420000e4420000c242000029430000c442000063430000c24200008e430000ca420000ac4300000b430000c5430000ca420000e1430000c2420000fd430000c44200c00c440000c84200801a440000cc4200002a4400000b43008036440000c242008044440000c442008052440000ca42008060440000c2420000704400000b4300807c440000c242004085440000c24200408c440000c242004093440000c442ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000f88c000054da000018780000a4d10000d8760000a8c30100f474000020f4000080ee0000208e000054b40000a8c3010020f4000080ee000088b6000060800100a8c30100fceb000090b6000020f4000080ee0000", data96, 468);
        auto slug96 = sktext::gpu::Slug::Deserialize(data96, 468);
        free(data96);
        void *paintdata_slug96 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug96, 28);
        SkReadBuffer paintbuffer_slug96 = SkReadBuffer(paintdata_slug96, 28);
        SkPaint paint_slug96 = SkPaintPriv::Unflatten(paintbuffer_slug96);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data97 = malloc(628);
        hexToRawData("0000a040000044c283209244000010410000604200a01a45100300000000803f0000000000006042000000000000803f0000654300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0000654300000000000000000000803f0000744200003b430000224300006643030000000000744200003c430000b44200003b430000f04200003b43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f0000654300000000000000000000803f00002743000034430020994400006e4313000000000027430000354300005d430000394300808a43000035430080a84300005a430000c243000035430000df43000035430080fb430000394300c00b4400003643000019440000374300c0284400005f4300003544000036430000434400003543000051440000384300005f440000354300006d440000354300407b4400003543008084440000354300808b44000035430080924400003443ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43013000000d016010088b6000060800100b0c60100287e0000f0aa0000d876000054780000f88c0000a8c3010018780000048c0000800b010090d2000068750000d0370100dc37010084ad0000208c0000", data97, 628);
        auto slug97 = sktext::gpu::Slug::Deserialize(data97, 628);
        free(data97);
        void *paintdata_slug97 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug97, 28);
        SkReadBuffer paintbuffer_slug97 = SkReadBuffer(paintdata_slug97, 28);
        SkPaint paint_slug97 = SkPaintPriv::Unflatten(paintbuffer_slug97);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data98 = malloc(468);
        hexToRawData("00008040000040c200c09244000010410000604200e01f45280200000000803f0000000000006042000000000000803f00809c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f00809c4300000000000000000000803f000070420080844300c099440000a1431500000000007042008086430000f0420080994300002943008084430000624300808f4300808c43008084430000a943008084430080c443008084430000e143000085430080fc430080844300400c440080844300801a4400808f430080284400808443008036440080844300404444008084430000544400809943004060440000854300806e440000854300407c4400008543004085440000864300208c44008084430020934400808443ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000d8760000a8c30100e4d80000c074000068750000b4a200001cb70000bc92010084ad0000e4d80000c074000098ab0000b4a200001cb70000a8c30100407a0000e4810000e8c600004c7f0100687500001cb70000", data98, 468);
        auto slug98 = sktext::gpu::Slug::Deserialize(data98, 468);
        free(data98);
        void *paintdata_slug98 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug98, 28);
        SkReadBuffer paintbuffer_slug98 = SkReadBuffer(paintdata_slug98, 28);
        SkPaint paint_slug98 = SkPaintPriv::Unflatten(paintbuffer_slug98);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data99 = malloc(468);
        hexToRawData("00004040000040c200e09244000010410000604200202545280200000000803f0000000000006042000000000000803f0080c64300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080c64300000000000000000000803f00006c420080ae4300e099440000cb431500000000006c420000b0430000e6420000b043000029430000af43000062430000b04300808c430000b0430000a9430000b0430080c4430080af430000e2430080ae43000000440080c34300800c440080af4300401a440080ae43004028440000af43004036440000af43008044440080ae43008052440080ae43008061440000c14300406e440000af4300007d440000af43004085440000af4300a08c440000b043004093440080ae43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000208e0000d0b800001cbb0000c4620100acea0000c4620100acf10000d0160100a8c3010044ef0000e4d80000ac780000147a0000fcc00000e4750000b0c60100c0c50000547800004c4e0100f8d40000400c0100", data99, 468);
        auto slug99 = sktext::gpu::Slug::Deserialize(data99, 468);
        free(data99);
        void *paintdata_slug99 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug99, 28);
        SkReadBuffer paintbuffer_slug99 = SkReadBuffer(paintdata_slug99, 28);
        SkPaint paint_slug99 = SkPaintPriv::Unflatten(paintbuffer_slug99);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data100 = malloc(448);
        hexToRawData("00000040000040c2fa7e89430000a0400000604200602a45200200000000803f0000000000006042000000000000803f0080f04300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0080f04300000000000000000000803f000068420080d843000089430000f34304000000000068420080d8430000e8420080da4300002a430080e343000061430080d843ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000906c0100d8760000c0740000548c00000100000000000000010000000000803f0000000000006042000000000000803f0080f04300000000000000000000803f000095430000ed430080a5430000f14303000000000095430000ed4300809b430000ed430000a2430000ed43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f80b0000f80b0000f80b0000", data100, 448);
        auto slug100 = sktext::gpu::Slug::Deserialize(data100, 448);
        free(data100);
        void *paintdata_slug100 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug100, 28);
        SkReadBuffer paintbuffer_slug100 = SkReadBuffer(paintdata_slug100, 28);
        SkPaint paint_slug100 = SkPaintPriv::Unflatten(paintbuffer_slug100);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data101 = malloc(240);
        hexToRawData("00000040000040c20000dc420000a04000f8a64300602a45f80000000000803f0000000000f8a643000000000000803f0080f04300000000000000000000803f010000000100000000000000010000000000803f0000000000f8a643000000000000803f0080f04300000000000000000000803f0000a8430080d8430000de430000f343020000000000a8430000d9430000c4430080d843c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300200000060820000dcd20000", data101, 240);
        auto slug101 = sktext::gpu::Slug::Deserialize(data101, 240);
        free(data101);
        void *paintdata_slug101 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug101, 28);
        SkReadBuffer paintbuffer_slug101 = SkReadBuffer(paintdata_slug101, 28);
        SkPaint paint_slug101 = SkPaintPriv::Unflatten(paintbuffer_slug101);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect160 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect160, 28);
        SkReadBuffer paintBuffer_rect160(paintdata_rect160, 28);
        SkPaint paintRect160 = SkPaintPriv::Unflatten(paintBuffer_rect160);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -2424.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2424.000000, 1316.000000, 3032.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect157);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect158);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect159);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug96->draw(canvas, paint_slug96);
        slug96->draw(canvas);
        free(paintdata_slug96);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug97->draw(canvas, paint_slug97);
        slug97->draw(canvas);
        free(paintdata_slug97);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug98->draw(canvas, paint_slug98);
        slug98->draw(canvas);
        free(paintdata_slug98);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug99->draw(canvas, paint_slug99);
        slug99->draw(canvas);
        free(paintdata_slug99);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug100->draw(canvas, paint_slug100);
        slug100->draw(canvas);
        free(paintdata_slug100);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug101->draw(canvas, paint_slug101);
        slug101->draw(canvas);
        free(paintdata_slug101);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 2784.000000, 1274.000000, 3198.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2784.000000, 453.000000, 3181.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect160);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 9557EC544AD5ECC62F6271877E15C907_1759762419024688.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest26, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect161 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect161, 28);
        SkReadBuffer paintBuffer_rect161(paintdata_rect161, 28);
        SkPaint paintRect161 = SkPaintPriv::Unflatten(paintBuffer_rect161);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect162 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect162, 28);
        SkReadBuffer paintBuffer_rect162(paintdata_rect162, 28);
        SkPaint paintRect162 = SkPaintPriv::Unflatten(paintBuffer_rect162);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect163 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect163, 28);
        SkReadBuffer paintBuffer_rect163(paintdata_rect163, 28);
        SkPaint paintRect163 = SkPaintPriv::Unflatten(paintBuffer_rect163);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect164 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect164, 28);
        SkReadBuffer paintBuffer_rect164(paintdata_rect164, 28);
        SkPaint paintRect164 = SkPaintPriv::Unflatten(paintBuffer_rect164);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect165 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect165, 28);
        SkReadBuffer paintBuffer_rect165(paintdata_rect165, 28);
        SkPaint paintRect165 = SkPaintPriv::Unflatten(paintBuffer_rect165);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data102 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000484200000000000000000000803f00005042000080400000e04200004042010000000000504200008040824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data102, 228);
        auto slug102 = sktext::gpu::Slug::Deserialize(data102, 228);
        free(data102);
        void *paintdata_slug102 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug102, 28);
        SkReadBuffer paintbuffer_slug102 = SkReadBuffer(paintdata_slug102, 28);
        SkPaint paint_slug102 = SkPaintPriv::Unflatten(paintbuffer_slug102);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data103 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000284200000000000000000000803f00001143000000410000754300002c4204000000000011430000004100002d4300001041000047430000104100005e4300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data103, 264);
        auto slug103 = sktext::gpu::Slug::Deserialize(data103, 264);
        free(data103);
        void *paintdata_slug103 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug103, 28);
        SkReadBuffer paintbuffer_slug103 = SkReadBuffer(paintdata_slug103, 28);
        SkPaint paint_slug103 = SkPaintPriv::Unflatten(paintbuffer_slug103);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data104 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f0080ac43000000c00080c94300005c42010000000080ac43000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data104, 228);
        auto slug104 = sktext::gpu::Slug::Deserialize(data104, 228);
        free(data104);
        void *paintdata_slug104 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug104, 28);
        SkReadBuffer paintbuffer_slug104 = SkReadBuffer(paintdata_slug104, 28);
        SkPaint paint_slug104 = SkPaintPriv::Unflatten(paintbuffer_slug104);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data105 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000284200000000000000000000803f0000d443000000410080024400002c42040000000000d443000010410000e043000000410000ed43000010410080f94300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data105, 264);
        auto slug105 = sktext::gpu::Slug::Deserialize(data105, 264);
        free(data105);
        void *paintdata_slug105 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug105, 28);
        SkReadBuffer paintbuffer_slug105 = SkReadBuffer(paintdata_slug105, 28);
        SkPaint paint_slug105 = SkPaintPriv::Unflatten(paintbuffer_slug105);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data106 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f00801b44000000c00080294400005c420100000000801b44000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data106, 228);
        auto slug106 = sktext::gpu::Slug::Deserialize(data106, 228);
        free(data106);
        void *paintdata_slug106 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug106, 28);
        SkReadBuffer paintbuffer_slug106 = SkReadBuffer(paintdata_slug106, 28);
        SkPaint paint_slug106 = SkPaintPriv::Unflatten(paintbuffer_slug106);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data107 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00002e440000004100003d4400002c420300000000002e440000104100c03444000014420040374400000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00c03d440000c04000404844000034420100000000c03d440000c0406f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data107, 412);
        auto slug107 = sktext::gpu::Slug::Deserialize(data107, 412);
        free(data107);
        void *paintdata_slug107 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug107, 28);
        SkReadBuffer paintbuffer_slug107 = SkReadBuffer(paintdata_slug107, 28);
        SkPaint paint_slug107 = SkPaintPriv::Unflatten(paintbuffer_slug107);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data108 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f00a096440000d04100c09b44000004420100000000a096440000d041675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data108, 228);
        auto slug108 = sktext::gpu::Slug::Deserialize(data108, 228);
        free(data108);
        void *paintdata_slug108 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug108, 28);
        SkReadBuffer paintbuffer_slug108 = SkReadBuffer(paintdata_slug108, 28);
        SkPaint paint_slug108 = SkPaintPriv::Unflatten(paintbuffer_slug108);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data109 = malloc(288);
        hexToRawData("0000803f000028c2050092430000a040000044430040e944380100000000803f0000000000004443000000000000803f0000634300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000634300000000000000000000803f00004543000039430000f44300006843060000000000454300003943000077430000394300009643000039430080ac43000039430000c64300003b430080dd4300003c4365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000c43c010020a8010094110100d8910000e098000000aa0000", data109, 288);
        auto slug109 = sktext::gpu::Slug::Deserialize(data109, 288);
        free(data109);
        void *paintdata_slug109 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug109, 28);
        SkReadBuffer paintbuffer_slug109 = SkReadBuffer(paintdata_slug109, 28);
        SkPaint paint_slug109 = SkPaintPriv::Unflatten(paintbuffer_slug109);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data110 = malloc(324);
        hexToRawData("0000803f0000e8c1baab3f43000000000000444300e0f044680100000000803f0000000000004443000000000000803f0000904300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000904300000000000000000000803f00004543008081430080c1430000904309000000000045430080814300005c430000894300006e43008081430000824300808143000093430080814300009e43008081430080a843000084430000ad43008081430000b84300808143f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000080a0000800c0000ef090000070a0000e8090000e8090000700c0000e7090000070a0000", data110, 324);
        auto slug110 = sktext::gpu::Slug::Deserialize(data110, 324);
        free(data110);
        void *paintdata_slug110 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug110, 28);
        SkReadBuffer paintbuffer_slug110 = SkReadBuffer(paintdata_slug110, 28);
        SkPaint paint_slug110 = SkPaintPriv::Unflatten(paintbuffer_slug110);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data111 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c24300e0f044200200000000803f000000000050c243000000000000803f0000904300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0000c84300007e430080eb4300009243020000000000c84300007f430080dd4300007e43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0080f34300007f430080294400009243050000000080f34300007f430080034400007f4300c00d440080804300001744008080430040204400007f43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data111, 448);
        auto slug111 = sktext::gpu::Slug::Deserialize(data111, 448);
        free(data111);
        void *paintdata_slug111 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug111, 28);
        SkReadBuffer paintbuffer_slug111 = SkReadBuffer(paintdata_slug111, 28);
        SkPaint paint_slug111 = SkPaintPriv::Unflatten(paintbuffer_slug111);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data112 = malloc(468);
        hexToRawData("0000803f000040c200a09244000010410000604200600045280200000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f000064420080b74300a099440000d44315000000000064420000b8430000e4420080b94300002a430000b843000066430080b74300008d430080b7430000ac430080c0430000c6430000b8430000e1430080b7430080fd430080b74300c00c440000b84300401a440080b743008028440000b943004036440000b843004044440080b743008052440080b743008060440000b84300806e440000b84300007e440080cc43002085440080b84300408c440080b743002093440080b743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000ac7800004cea0000389a0100b8d80000906c0100a4c3010054780000f4850000f8890000a8750000b48001007cd500006cd90000f479000020f4000080ee000098850000a8c30100f88c000054da0000048c0000", data112, 468);
        auto slug112 = sktext::gpu::Slug::Deserialize(data112, 468);
        free(data112);
        void *paintdata_slug112 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug112, 28);
        SkReadBuffer paintbuffer_slug112 = SkReadBuffer(paintdata_slug112, 28);
        SkPaint paint_slug112 = SkPaintPriv::Unflatten(paintbuffer_slug112);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data113 = malloc(468);
        hexToRawData("0000803f000040c200c09244000010410000604200a00545280200000000803f0000000000006042000000000000803f0080f94300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080f94300000000000000000000803f000064420080e14300c099440000fe4315000000000064420000e3430000e6420080e14300002b430000e243000061430000e24300808c430080e1430000a9430080e1430000c5430000e2430000e2430080e1430000fd430000e24300800c440000e34300c01a440000e343008028440000e443000038440080f643004044440000e24300c052440000e343008060440000e44300806e440080e14300407c440080e143006085440000e34300408c440080e343002093440000e243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000800b0100f8890000a87500006cd90000f479000020f4000080ee0000d0160100608200007cd50000208e000054b40000a8c30100e8c60000208e000054b40000fceb000068750000e0d8000088b60000e4ca0000", data113, 468);
        auto slug113 = sktext::gpu::Slug::Deserialize(data113, 468);
        free(data113);
        void *paintdata_slug113 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug113, 28);
        SkReadBuffer paintbuffer_slug113 = SkReadBuffer(paintdata_slug113, 28);
        SkPaint paint_slug113 = SkPaintPriv::Unflatten(paintbuffer_slug113);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data114 = malloc(496);
        hexToRawData("0000a040000040c206410244000010410000604200e00a45600200000000803f0000000000006042000000000000803f00c0114400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f000074420040074400002243000012440300000000007442008007440000b442004007440000f04200400744eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f00002b4300c0054400401044000014440800000000002b430040104400005c430000064400008a4300c005440000a643008006440080c243004006440000de4300c005440080fa4300c0064400400c4400000f44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000a8c3010018780000048c0000800b010044ef0000e4d8000060110100b0c60100", data114, 496);
        auto slug114 = sktext::gpu::Slug::Deserialize(data114, 496);
        free(data114);
        void *paintdata_slug114 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug114, 28);
        SkReadBuffer paintbuffer_slug114 = SkReadBuffer(paintdata_slug114, 28);
        SkPaint paint_slug114 = SkPaintPriv::Unflatten(paintbuffer_slug114);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect37 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect37, 28);
        SkReadBuffer paintBuffer_rrect37(paintdata_rrect37, 28);
        SkPaint paintRRect37 = SkPaintPriv::Unflatten(paintBuffer_rrect37);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect38 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect38, 28);
        SkReadBuffer paintBuffer_rrect38(paintdata_rrect38, 28);
        SkPaint paintRRect38 = SkPaintPriv::Unflatten(paintBuffer_rrect38);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata6 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata6, 92);
        SkPath path6;
        path6.readFromMemory(pathdata6, 92);
        void *paintdata_path6 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path6, 28);
        SkReadBuffer paintBuffer_path6(paintdata_path6, 28);
        SkPaint paintPath6 = SkPaintPriv::Unflatten(paintBuffer_path6);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage0;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage0.allocPixels(ii);
        SkCanvas tmp(fakeImage0);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1316.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect161);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect162);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect163);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect164);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect165);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug102->draw(canvas, paint_slug102);
        slug102->draw(canvas);
        free(paintdata_slug102);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug103->draw(canvas, paint_slug103);
        slug103->draw(canvas);
        free(paintdata_slug103);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug104->draw(canvas, paint_slug104);
        slug104->draw(canvas);
        free(paintdata_slug104);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug105->draw(canvas, paint_slug105);
        slug105->draw(canvas);
        free(paintdata_slug105);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug106->draw(canvas, paint_slug106);
        slug106->draw(canvas);
        free(paintdata_slug106);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug107->draw(canvas, paint_slug107);
        slug107->draw(canvas);
        free(paintdata_slug107);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug108->draw(canvas, paint_slug108);
        slug108->draw(canvas);
        free(paintdata_slug108);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug109->draw(canvas, paint_slug109);
        slug109->draw(canvas);
        free(paintdata_slug109);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1885.000000, 1274.000000, 1943.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug110->draw(canvas, paint_slug110);
        slug110->draw(canvas);
        free(paintdata_slug110);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug111->draw(canvas, paint_slug111);
        slug111->draw(canvas);
        free(paintdata_slug111);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug112->draw(canvas, paint_slug112);
        slug112->draw(canvas);
        free(paintdata_slug112);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug113->draw(canvas, paint_slug113);
        slug113->draw(canvas);
        free(paintdata_slug113);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug114->draw(canvas, paint_slug114);
        slug114->draw(canvas);
        free(paintdata_slug114);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect37);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect38);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path6, paintPath6);
        free(pathdata6);
        free(paintdata_path6);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage0)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage0);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762419040559.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest27, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect166 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect166, 28);
        SkReadBuffer paintBuffer_rect166(paintdata_rect166, 28);
        SkPaint paintRect166 = SkPaintPriv::Unflatten(paintBuffer_rect166);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect167 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect167, 28);
        SkReadBuffer paintBuffer_rect167(paintdata_rect167, 28);
        SkPaint paintRect167 = SkPaintPriv::Unflatten(paintBuffer_rect167);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect168 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect168, 28);
        SkReadBuffer paintBuffer_rect168(paintdata_rect168, 28);
        SkPaint paintRect168 = SkPaintPriv::Unflatten(paintBuffer_rect168);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data115 = malloc(264);
        hexToRawData("00000040000024c2060042430000a0400000444300005f43180100000000803f0000000000004443000000000000803f0000c94300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000c94300000000000000000000803f000046430080b4430000c3430080cb4304000000000046430080b44300007a430080b543000097430080b5430000ac430080b44365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000a877000004ed000054d4000054c70000", data115, 264);
        auto slug115 = sktext::gpu::Slug::Deserialize(data115, 264);
        free(data115);
        void *paintdata_slug115 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug115, 28);
        SkReadBuffer paintbuffer_slug115 = SkReadBuffer(paintdata_slug115, 28);
        SkPaint paint_slug115 = SkPaintPriv::Unflatten(paintbuffer_slug115);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data116 = malloc(324);
        hexToRawData("000040400000e8c1baab3943000000000000444300008e43680100000000803f0000000000004443000000000000803f0080e74300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0080e74300000000000000000000803f000047430000d9430000bf430080e74309000000000047430000d94300005b430000d943000072430080e043000082430000d943000092430000d94300009e430000d9430080a8430080db430000ad430000d9430000b9430000d943f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000e8090000e4090000800c0000f3090000ec090000e8090000700c0000f3090000eb090000", data116, 324);
        auto slug116 = sktext::gpu::Slug::Deserialize(data116, 324);
        free(data116);
        void *paintdata_slug116 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug116, 28);
        SkReadBuffer paintbuffer_slug116 = SkReadBuffer(paintdata_slug116, 28);
        SkPaint paint_slug116 = SkPaintPriv::Unflatten(paintbuffer_slug116);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data117 = malloc(448);
        hexToRawData("00523641000008c22f659043000080400050c24300008e43200200000000803f000000000050c243000000000000803f0080e74300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0080e74300000000000000000000803f0000c8430080d6430080eb430080e943020000000000c8430000d7430080dd430080d643817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0080e74300000000000000000000803f0080f3430000d743008029440080e943050000000080f3430000d743008003440000d74300000d440000d74300c016440000d743008020440000d843817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000da630100049f01009e8c0000", data117, 448);
        auto slug117 = sktext::gpu::Slug::Deserialize(data117, 448);
        free(data117);
        void *paintdata_slug117 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug117, 28);
        SkReadBuffer paintbuffer_slug117 = SkReadBuffer(paintdata_slug117, 28);
        SkPaint paint_slug117 = SkPaintPriv::Unflatten(paintbuffer_slug117);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data118 = malloc(252);
        hexToRawData("00525641000004c254caf8420000804000bb294400008e43080100000000803f0000000000bb2944000000000000803f0080e74300000000000000000000803f010000000100000000000000010000000000803f0000000000bb2944000000000000803f0080e74300000000000000000000803f00402d440000d743000049440080e9430300000000402d440000d843004036440000d74300c03f440000d743817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300300000089b400001b390100057b0100", data118, 252);
        auto slug118 = sktext::gpu::Slug::Deserialize(data118, 252);
        free(data118);
        void *paintdata_slug118 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug118, 28);
        SkReadBuffer paintbuffer_slug118 = SkReadBuffer(paintdata_slug118, 28);
        SkPaint paint_slug118 = SkPaintPriv::Unflatten(paintbuffer_slug118);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data119 = malloc(632);
        hexToRawData("00000000000040c2ae0702440000a040000060420080cd43280300000000803f0000000000006042000000000000803f0080134400000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0080134400000000000000000000803f00006042004009440000b842008013440100000000006042004009440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000006042000000000000803f0080134400000000000000000000803f0000be42008007440040064400c01444080000000000be42008007440000174300c0074400004e4300800744008082430080074400009f4300c007440000bb43008007440000d74300c007440000f34300400844c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43008000000f84a010090a10000d0370100e08c0000e48100003c7d0100a8a10000408300000100000000000000010000000000803f0000000000006042000000000000803f0080134400000000000000000000803f000007440040094400001044008013440100000000000744004009440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data119, 632);
        auto slug119 = sktext::gpu::Slug::Deserialize(data119, 632);
        free(data119);
        void *paintdata_slug119 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug119, 28);
        SkReadBuffer paintbuffer_slug119 = SkReadBuffer(paintdata_slug119, 28);
        SkPaint paint_slug119 = SkPaintPriv::Unflatten(paintbuffer_slug119);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data120 = malloc(288);
        hexToRawData("00001442000040c2008093430000c040001010440080cd43380100000000803f0000000000101044000000000000803f0080134400000000000000000000803f010000000100000000000000010000000000803f0000000000101044000000000000803f0080134400000000000000000000803f004019440080074400005a4400001544060000000040194400c0074400801e440080074400802c440080074400803a4400c0074400804844008007440000584400c00844ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000f5c40100717a0100058c000035220100a9710100b1c30100", data120, 288);
        auto slug120 = sktext::gpu::Slug::Deserialize(data120, 288);
        free(data120);
        void *paintdata_slug120 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug120, 28);
        SkReadBuffer paintbuffer_slug120 = SkReadBuffer(paintdata_slug120, 28);
        SkPaint paint_slug120 = SkPaintPriv::Unflatten(paintbuffer_slug120);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data121 = malloc(424);
        hexToRawData("00000000000040c25c0f81430000a040001064440080cd43000200000000803f0000000000106444000000000000803f0080134400000000000000000000803f020000000100000000000000010000000000803f0000000000106444000000000000803f0080134400000000000000000000803f004064440040094400006d44008013440100000000406444004009440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000390c00000100000000000000010000000000803f0000000000106444000000000000803f0080134400000000000000000000803f00406e44008007440040924400c014440400000000406e440040084400c07b440000084400e084440080074400c08b4400800744c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43004000000b598000009760000d5880000b5cc0000", data121, 424);
        auto slug121 = sktext::gpu::Slug::Deserialize(data121, 424);
        free(data121);
        void *paintdata_slug121 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug121, 28);
        SkReadBuffer paintbuffer_slug121 = SkReadBuffer(paintdata_slug121, 28);
        SkPaint paint_slug121 = SkPaintPriv::Unflatten(paintbuffer_slug121);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data122 = malloc(228);
        hexToRawData("d3d2d2bd00007cc26a697c420000000000cf02440000b642e80000000000803f0000000000cf0244000000000000803f0000874300000000000000000000803f010000000100000000000000010000000000803f0000000000cf0244000000000000803f0000874300000000000000000000803f00c006440000514300800e44000086430100000000c0064400005143340d57044c0000000100000063657273380000000400000000007c420000803f000000000000803f00000000000000000000803f000080bf00000000000000006d6d6dff590000000100b4300100000049000000", data122, 228);
        auto slug122 = sktext::gpu::Slug::Deserialize(data122, 228);
        free(data122);
        void *paintdata_slug122 = malloc(28);
        hexToRawData("0000000000008040f9f8f83ef9f8f83ef9f8f83e0000803f01030000", paintdata_slug122, 28);
        SkReadBuffer paintbuffer_slug122 = SkReadBuffer(paintdata_slug122, 28);
        SkPaint paint_slug122 = SkPaintPriv::Unflatten(paintbuffer_slug122);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data123 = malloc(264);
        hexToRawData("00000040000010c20c0027430000804000301c4400009442180100000000803f0000000000301c44000000000000803f00007d4300000000000000000000803f010000000100000000000000010000000000803f0000000000301c44000000000000803f00007d4300000000000000000000803f00c01c440000594300004644008080430400000000c01c4400005c430000274400005943008031440000594300003c44000059435bf1126b4c0000000100000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf00000000000000006d6d6dff590000000100b43004000000ef740000e7c700009f85000083d30000", data123, 264);
        auto slug123 = sktext::gpu::Slug::Deserialize(data123, 264);
        free(data123);
        void *paintdata_slug123 = malloc(28);
        hexToRawData("0000000000008040f9f8f83ef9f8f83ef9f8f83e0000803f01030000", paintdata_slug123, 28);
        SkReadBuffer paintbuffer_slug123 = SkReadBuffer(paintdata_slug123, 28);
        SkPaint paint_slug123 = SkPaintPriv::Unflatten(paintbuffer_slug123);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect39 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect39, 28);
        SkReadBuffer paintBuffer_rrect39(paintdata_rrect39, 28);
        SkPaint paintRRect39 = SkPaintPriv::Unflatten(paintBuffer_rrect39);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect40 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect40, 28);
        SkReadBuffer paintBuffer_rrect40(paintdata_rrect40, 28);
        SkPaint paintRRect40 = SkPaintPriv::Unflatten(paintBuffer_rrect40);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata7 = malloc(224);
        hexToRawData("0501000016000000040000000f0000005839fc408b6c37408b6cff408b6c37409cc400417b143e40ac1c00416ce743405839b8407b1400417110b740e05b01418941b44042600141355e8a401f850141237a874075870141d34d86404035004116d9fe3f93184440bdbef33fe4973740508d074014ae374019045e404f8d3740e04f65404f8d37400bd76b4030083c402b876e4082c04240d1229f406666c640b81ec94084eb41405a69cb40ccf936401058d1403c0a37405839fc40ec7c37401e04583f462f563fe4da0a3f5bbf543f00040103010301030104010103010500", pathdata7, 224);
        SkPath path7;
        path7.readFromMemory(pathdata7, 224);
        void *paintdata_path7 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_path7, 28);
        SkReadBuffer paintBuffer_path7(paintdata_path7, 28);
        SkPaint paintPath7 = SkPaintPriv::Unflatten(paintBuffer_path7);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 1344.000000, 608.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect166);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect167);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect168);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 173.000000, 1274.000000, 242.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug115->draw(canvas, paint_slug115);
        slug115->draw(canvas);
        free(paintdata_slug115);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 242.000000, 1274.000000, 299.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug116->draw(canvas, paint_slug116);
        slug116->draw(canvas);
        free(paintdata_slug116);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug117->draw(canvas, paint_slug117);
        slug117->draw(canvas);
        free(paintdata_slug117);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug118->draw(canvas, paint_slug118);
        slug118->draw(canvas);
        free(paintdata_slug118);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug119->draw(canvas, paint_slug119);
        slug119->draw(canvas);
        free(paintdata_slug119);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug120->draw(canvas, paint_slug120);
        slug120->draw(canvas);
        free(paintdata_slug120);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug121->draw(canvas, paint_slug121);
        slug121->draw(canvas);
        free(paintdata_slug121);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug122->draw(canvas, paint_slug122);
        slug122->draw(canvas);
        free(paintdata_slug122);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug123->draw(canvas, paint_slug123);
        slug123->draw(canvas);
        free(paintdata_slug123);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 165.000000, 168.000000, 277.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect39);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 166.500000, 166.500000, 275.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect40);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 231.000000, 172.000000, 280.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,-847.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,308.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path7, paintPath7);
        free(pathdata7);
        free(paintdata_path7);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 4C1E70458F41462162DA2BB2AC0836C9_1759762419056023.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest28, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect169 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect169, 28);
        SkReadBuffer paintBuffer_rect169(paintdata_rect169, 28);
        SkPaint paintRect169 = SkPaintPriv::Unflatten(paintBuffer_rect169);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect170 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect170, 28);
        SkReadBuffer paintBuffer_rect170(paintdata_rect170, 28);
        SkPaint paintRect170 = SkPaintPriv::Unflatten(paintBuffer_rect170);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect171 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect171, 28);
        SkReadBuffer paintBuffer_rect171(paintdata_rect171, 28);
        SkPaint paintRect171 = SkPaintPriv::Unflatten(paintBuffer_rect171);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data124 = malloc(656);
        hexToRawData("00000000000040c2edfc16440000a040000060420080f743480300000000803f0000000000006042000000000000803f0000884200000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f000060420000d841000030430000884203000000000060420000d8410000de420000d841000010430000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43003000000a802000031020000310200000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f000036430000a04100801b440000924208000000000036430000a04100006d430000b841000091430000a0410000ad430000a8410000c9430000b8410000e5430000b84100c000440000c04100c00e440000c041c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300800000074750000b49800005ca1000044f800007c71010040830000287700002c8300000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f00001c440000d84100002544000088420100000000001c440000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data124, 656);
        auto slug124 = sktext::gpu::Slug::Deserialize(data124, 656);
        free(data124);
        void *paintdata_slug124 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug124, 28);
        SkReadBuffer paintbuffer_slug124 = SkReadBuffer(paintdata_slug124, 28);
        SkPaint paint_slug124 = SkPaintPriv::Unflatten(paintbuffer_slug124);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data125 = malloc(228);
        hexToRawData("0000804000003cc2000098410000c040000525440080f743e80000000000803f0000000000052544000000000000803f0000884200000000000000000000803f010000000100000000000000010000000000803f0000000000052544000000000000803f0000884200000000000000000000803f000026440000a84100c029440000944201000000000026440000a841ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000fcc40100", data125, 228);
        auto slug125 = sktext::gpu::Slug::Deserialize(data125, 228);
        free(data125);
        void *paintdata_slug125 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug125, 28);
        SkReadBuffer paintbuffer_slug125 = SkReadBuffer(paintdata_slug125, 28);
        SkPaint paint_slug125 = SkPaintPriv::Unflatten(paintbuffer_slug125);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data126 = malloc(484);
        hexToRawData("00000000000040c2ae4706440000a040000533440080f743500200000000803f0000000000053344000000000000803f0000884200000000000000000000803f020000000100000000000000010000000000803f0000000000053344000000000000803f0000884200000000000000000000803f000033440000d84100003c440000884201000000000033440000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000053344000000000000803f0000884200000000000000000000803f00c03c440000a04100c09c44000092420900000000c03c440000c04100c04a440000a841004058440000a041008066440000b041008074440000a841006081440000a041004088440000a84100408f440000c041004096440000b841c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43009000000ed0a010029e20000598f010025aa0000199f0100f94a01009df40000f18b000041830000", data126, 484);
        auto slug126 = sktext::gpu::Slug::Deserialize(data126, 484);
        free(data126);
        void *paintdata_slug126 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug126, 28);
        SkReadBuffer paintbuffer_slug126 = SkReadBuffer(paintdata_slug126, 28);
        SkPaint paint_slug126 = SkPaintPriv::Unflatten(paintbuffer_slug126);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data127 = malloc(388);
        hexToRawData("00004040000030c20000b842000080400000604200c01044d00100000000803f0000000000006042000000000000803f0000184300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0000184300000000000000000000803f00006c420000d8420000dc4200001c430100000000006c420000d842c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430010000002c8300000100000000000000010000000000803f0000000000006042000000000000803f0000184300000000000000000000803f0000e0420000de420000144300001843010000000000e0420000de420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data127, 388);
        auto slug127 = sktext::gpu::Slug::Deserialize(data127, 388);
        free(data127);
        void *paintdata_slug127 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug127, 28);
        SkReadBuffer paintbuffer_slug127 = SkReadBuffer(paintdata_slug127, 28);
        SkPaint paint_slug127 = SkPaintPriv::Unflatten(paintbuffer_slug127);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data128 = malloc(888);
        hexToRawData("00000040000044c29bc47744000010410020144300c01044900400000000803f0000000000201443000000000000803f0000184300000000000000000000803f040000000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f000016430000ce420000d54300001d4305000000000016430000d242000051430000d242008084430000d24200009f430000d2420080bb430000ce42ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300500000079ca0000698f0000158f00000d7a0000893f01000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f0080e143000012430000e64300002143010000000080e14300001243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000a9c301000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f0080f9430000de4200c01a4400001843030000000080f9430000de4200c00a440000de42000013440000de42eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000a902000032020000320200000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f00401c440000d04200808e44000021430a00000000401c440000d04200002a440000d642008037440000d042004045440000d242004053440000d642004061440000d24200406f440000d84200407d440000d04200a085440000d04200608d4400001243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300a00000075750000b59800005da1000045f800007d7101009df40000f18b00008d8300002d720100a9c30100", data128, 888);
        auto slug128 = sktext::gpu::Slug::Deserialize(data128, 888);
        free(data128);
        void *paintdata_slug128 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug128, 28);
        SkReadBuffer paintbuffer_slug128 = SkReadBuffer(paintdata_slug128, 28);
        SkPaint paint_slug128 = SkPaintPriv::Unflatten(paintbuffer_slug128);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data129 = malloc(228);
        hexToRawData("00000040000030c2000054420000e0408066934400c01044e80000000000803f0000000080669344000000000000803f0000184300000000000000000000803f010000000100000000000000010000000000803f0000000080669344000000000000803f0000184300000000000000000000803f00c093440000d84200009a4400001f430100000000c093440000d8420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000310d0000", data129, 228);
        auto slug129 = sktext::gpu::Slug::Deserialize(data129, 228);
        free(data129);
        void *paintdata_slug129 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug129, 28);
        SkReadBuffer paintbuffer_slug129 = SkReadBuffer(paintdata_slug129, 28);
        SkPaint paint_slug129 = SkPaintPriv::Unflatten(paintbuffer_slug129);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data130 = malloc(252);
        hexToRawData("0000803f000040c2000026430000a0400000604200c02544080100000000803f0000000000006042000000000000803f00006c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f00006c4300000000000000000000803f0000644200003c4300005e4300007143030000000000644200003e430000e44200003d4300002b4300003c43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300300000024aa0000189f0100f84a0100", data130, 252);
        auto slug130 = sktext::gpu::Slug::Deserialize(data130, 252);
        free(data130);
        void *paintdata_slug130 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug130, 28);
        SkReadBuffer paintbuffer_slug130 = SkReadBuffer(paintdata_slug130, 28);
        SkPaint paint_slug130 = SkPaintPriv::Unflatten(paintbuffer_slug130);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data131 = malloc(228);
        hexToRawData("70144e41000024c21c850742000000000000604300c02544e80000000000803f0000000000006043000000000000803f00006c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006043000000000000803f00006c4300000000000000000000803f00006d43000043430000814300006c430100000000006d4300004343eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003c0c0000", data131, 228);
        auto slug131 = sktext::gpu::Slug::Deserialize(data131, 228);
        free(data131);
        void *paintdata_slug131 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug131, 28);
        SkReadBuffer paintbuffer_slug131 = SkReadBuffer(paintdata_slug131, 28);
        SkPaint paint_slug131 = SkPaintPriv::Unflatten(paintbuffer_slug131);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data132 = malloc(596);
        hexToRawData("00000040000040c2e67b9243000010410070804300c02544f80200000000803f0000000000708043000000000000803f00006c4300000000000000000000803f030000000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f008081430000404300009b43000073430100000000808143000040430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000300d00000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f00009d4300003c430000ef43000071430300000000009d43000040430000b94300003d430000d44300003c43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43003000000ee0a01002ae200005a8f01000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f0080ef43000070430040094400007543030000000080ef43000070430000fb430000704300400344000070430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430030000009e0c00009f0c00009f0c0000", data132, 596);
        auto slug132 = sktext::gpu::Slug::Deserialize(data132, 596);
        free(data132);
        void *paintdata_slug132 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug132, 28);
        SkReadBuffer paintbuffer_slug132 = SkReadBuffer(paintdata_slug132, 28);
        SkPaint paint_slug132 = SkPaintPriv::Unflatten(paintbuffer_slug132);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data133 = malloc(668);
        hexToRawData("c0f5a041000040c2703d3044000010410042094400c02544580300000000803f0000000000420944000000000000803f00006c4300000000000000000000803f030000000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f00400e4400003c4300004444000071430400000000400e4400003d4300801b4400003d4300402a4400003c430080374400003d43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300400000021c5000031400100e1950100410301000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f004045440000434300804a4400006c43010000000040454400004343eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003d0c00000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f00404b4400003c4300c09c44000075430800000000404b4400003d4300c0584400003c430000674400003c43008076440000664300a0814400003f430080884400003c430000904400003c4300e0964400003f43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000d0b70100ec8b0000bcd10000a8c3010050750000d037010074750000b4980000", data133, 668);
        auto slug133 = sktext::gpu::Slug::Deserialize(data133, 668);
        free(data133);
        void *paintdata_slug133 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug133, 28);
        SkReadBuffer paintbuffer_slug133 = SkReadBuffer(paintdata_slug133, 28);
        SkPaint paint_slug133 = SkPaintPriv::Unflatten(paintbuffer_slug133);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data134 = malloc(372);
        hexToRawData("00000040000040c200c02b440000c0400000604200c03a44a80100000000803f0000000000006042000000000000803f0000a04300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000a04300000000000000000000803f000068420000884300c039440000a3430d00000000006842000088430000e4420000894300002a4300008843000062430000884300008d43008088430080a84300008a430000c543008089430080e14300008a430080fd4300008a4300800d4400809a4300801a440080884300402844000088430000384400808a43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300d000000e47c0100ecc50000d4880000b4cc00009cf40000f08b000040830000287700002c830000b0c6010034220100a8710100b0c30100", data134, 372);
        auto slug134 = sktext::gpu::Slug::Deserialize(data134, 372);
        free(data134);
        void *paintdata_slug134 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug134, 28);
        SkReadBuffer paintbuffer_slug134 = SkReadBuffer(paintdata_slug134, 28);
        SkPaint paint_slug134 = SkPaintPriv::Unflatten(paintbuffer_slug134);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data135 = malloc(300);
        hexToRawData("00004040000040c20000c3430000a0400088574400c03a44480100000000803f0000000000885744000000000000803f0000a04300000000000000000000803f010000000100000000000000010000000000803f0000000000885744000000000000803f0000a04300000000000000000000803f004058440000884300809c440080a24307000000004058440080884300006744008089430000764400008a430000814400808843006088440000884300e08e44000088430000964400008843c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43007000000a977000005ed000055d4000055c70000d116010079bb0000298a0000", data135, 300);
        auto slug135 = sktext::gpu::Slug::Deserialize(data135, 300);
        free(data135);
        void *paintdata_slug135 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug135, 28);
        SkReadBuffer paintbuffer_slug135 = SkReadBuffer(paintdata_slug135, 28);
        SkPaint paint_slug135 = SkPaintPriv::Unflatten(paintbuffer_slug135);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data136 = malloc(240);
        hexToRawData("00000040000040c20000dc420000a0400000604200005144f80000000000803f0000000000006042000000000000803f0080cc4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cc4300000000000000000000803f000068420080b443000026430000cf4302000000000068420080b4430000e2420080b443c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43002000000d8630100049f0100", data136, 240);
        auto slug136 = sktext::gpu::Slug::Deserialize(data136, 240);
        free(data136);
        void *paintdata_slug136 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug136, 28);
        SkReadBuffer paintbuffer_slug136 = SkReadBuffer(paintdata_slug136, 28);
        SkPaint paint_slug136 = SkPaintPriv::Unflatten(paintbuffer_slug136);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect172 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect172, 28);
        SkReadBuffer paintBuffer_rect172(paintdata_rect172, 28);
        SkPaint paintRect172 = SkPaintPriv::Unflatten(paintBuffer_rect172);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect173 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect173, 28);
        SkReadBuffer paintBuffer_rect173(paintdata_rect173, 28);
        SkPaint paintRect173 = SkPaintPriv::Unflatten(paintBuffer_rect173);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -606.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 606.000000, 1344.000000, 1214.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect169);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect170);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect171);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug124->draw(canvas, paint_slug124);
        slug124->draw(canvas);
        free(paintdata_slug124);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug125->draw(canvas, paint_slug125);
        slug125->draw(canvas);
        free(paintdata_slug125);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug126->draw(canvas, paint_slug126);
        slug126->draw(canvas);
        free(paintdata_slug126);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug127->draw(canvas, paint_slug127);
        slug127->draw(canvas);
        free(paintdata_slug127);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug128->draw(canvas, paint_slug128);
        slug128->draw(canvas);
        free(paintdata_slug128);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug129->draw(canvas, paint_slug129);
        slug129->draw(canvas);
        free(paintdata_slug129);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug130->draw(canvas, paint_slug130);
        slug130->draw(canvas);
        free(paintdata_slug130);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug131->draw(canvas, paint_slug131);
        slug131->draw(canvas);
        free(paintdata_slug131);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug132->draw(canvas, paint_slug132);
        slug132->draw(canvas);
        free(paintdata_slug132);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug133->draw(canvas, paint_slug133);
        slug133->draw(canvas);
        free(paintdata_slug133);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug134->draw(canvas, paint_slug134);
        slug134->draw(canvas);
        free(paintdata_slug134);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug135->draw(canvas, paint_slug135);
        slug135->draw(canvas);
        free(paintdata_slug135);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug136->draw(canvas, paint_slug136);
        slug136->draw(canvas);
        free(paintdata_slug136);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect172);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect173);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 69F5BD3189171B8691AD66A449205439_1759762419057631.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest29, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect174 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect174, 28);
        SkReadBuffer paintBuffer_rect174(paintdata_rect174, 28);
        SkPaint paintRect174 = SkPaintPriv::Unflatten(paintBuffer_rect174);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect175 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect175, 28);
        SkReadBuffer paintBuffer_rect175(paintdata_rect175, 28);
        SkPaint paintRect175 = SkPaintPriv::Unflatten(paintBuffer_rect175);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect176 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect176, 28);
        SkReadBuffer paintBuffer_rect176(paintdata_rect176, 28);
        SkPaint paintRect176 = SkPaintPriv::Unflatten(paintBuffer_rect176);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data137 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000244400000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000244400000000000000000000803f00005042008018440000e04200802344010000000000504200801844824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data137, 228);
        auto slug137 = sktext::gpu::Slug::Deserialize(data137, 228);
        free(data137);
        void *paintdata_slug137 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug137, 28);
        SkReadBuffer paintbuffer_slug137 = SkReadBuffer(paintdata_slug137, 28);
        SkPaint paint_slug137 = SkPaintPriv::Unflatten(paintbuffer_slug137);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data138 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000224400000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000224400000000000000000000803f0000114300801944000075430040224404000000000011430080194400002d4300c019440000474300c0194400005e4300801944b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data138, 264);
        auto slug138 = sktext::gpu::Slug::Deserialize(data138, 264);
        free(data138);
        void *paintdata_slug138 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug138, 28);
        SkReadBuffer paintbuffer_slug138 = SkReadBuffer(paintdata_slug138, 28);
        SkPaint paint_slug138 = SkPaintPriv::Unflatten(paintbuffer_slug138);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data139 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000244400000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000244400000000000000000000803f0080ac43000017440080c94300402544010000000080ac4300001744824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data139, 228);
        auto slug139 = sktext::gpu::Slug::Deserialize(data139, 228);
        free(data139);
        void *paintdata_slug139 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug139, 28);
        SkReadBuffer paintbuffer_slug139 = SkReadBuffer(paintdata_slug139, 28);
        SkPaint paint_slug139 = SkPaintPriv::Unflatten(paintbuffer_slug139);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data140 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000224400000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000224400000000000000000000803f0000d443008019440080024400402244040000000000d44300c019440000e043008019440000ed4300c019440080f94300801944b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data140, 264);
        auto slug140 = sktext::gpu::Slug::Deserialize(data140, 264);
        free(data140);
        void *paintdata_slug140 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug140, 28);
        SkReadBuffer paintbuffer_slug140 = SkReadBuffer(paintdata_slug140, 28);
        SkPaint paint_slug140 = SkPaintPriv::Unflatten(paintbuffer_slug140);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data141 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000244400000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000244400000000000000000000803f00801b440000174400802944004025440100000000801b4400001744824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data141, 228);
        auto slug141 = sktext::gpu::Slug::Deserialize(data141, 228);
        free(data141);
        void *paintdata_slug141 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug141, 28);
        SkReadBuffer paintbuffer_slug141 = SkReadBuffer(paintdata_slug141, 28);
        SkPaint paint_slug141 = SkPaintPriv::Unflatten(paintbuffer_slug141);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data142 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000224400000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000224400000000000000000000803f00002e440080194400003d44004022440300000000002e4400c0194400c0344400c020440040374400801944b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000224400000000000000000000803f00c03d44000019440040484400c022440100000000c03d44000019446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data142, 412);
        auto slug142 = sktext::gpu::Slug::Deserialize(data142, 412);
        free(data142);
        void *paintdata_slug142 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug142, 28);
        SkReadBuffer paintbuffer_slug142 = SkReadBuffer(paintdata_slug142, 28);
        SkPaint paint_slug142 = SkPaintPriv::Unflatten(paintbuffer_slug142);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data143 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f00c0254400000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f00c0254400000000000000000000803f00a0964400001e4400c09b4400c01f440100000000a0964400001e44675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data143, 228);
        auto slug143 = sktext::gpu::Slug::Deserialize(data143, 228);
        free(data143);
        void *paintdata_slug143 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug143, 28);
        SkReadBuffer paintbuffer_slug143 = SkReadBuffer(paintdata_slug143, 28);
        SkPaint paint_slug143 = SkPaintPriv::Unflatten(paintbuffer_slug143);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect177 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect177, 28);
        SkReadBuffer paintBuffer_rect177(paintdata_rect177, 28);
        SkPaint paintRect177 = SkPaintPriv::Unflatten(paintBuffer_rect177);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect178 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect178, 28);
        SkReadBuffer paintBuffer_rect178(paintdata_rect178, 28);
        SkPaint paintRect178 = SkPaintPriv::Unflatten(paintBuffer_rect178);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect41 = malloc(28);
        hexToRawData("0000000000008040000000000000000000000000cdcccc3e01030000", paintdata_rrect41, 28);
        SkReadBuffer paintBuffer_rrect41(paintdata_rrect41, 28);
        SkPaint paintRRect41 = SkPaintPriv::Unflatten(paintBuffer_rrect41);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data144 = malloc(228);
        hexToRawData("0000000080e686c2a0c9d34300341b4100d01e4400009e44e80000000000803f0000000000d01e44000000000000803f0000674300000000000000000000803f010000000100000000000000010000000000803f0000000000d01e44000000000000803f0000674300000000000000000000803f00c020440000234300003044000071430100000000c02044000023431a3f826b4c0000000100000063657273380000000d00000000009a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000ffffffff590000000100b4300100000009000000", data144, 228);
        auto slug144 = sktext::gpu::Slug::Deserialize(data144, 228);
        free(data144);
        void *paintdata_slug144 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug144, 28);
        SkReadBuffer paintbuffer_slug144 = SkReadBuffer(paintdata_slug144, 28);
        SkPaint paint_slug144 = SkPaintPriv::Unflatten(paintbuffer_slug144);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect179 = malloc(320);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200f40000000000803f0000000000006042000000000000803f00a0b54400000000000000000000803f10000000536b4c696e6561724772616469656e7400000000b4000000010000a0040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdcc4c3e000000000000000000000000cdcc4c3e44000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f04000000000000008fc2f53c48e17a3f0000803f0000000000000000000000000000fc4200000000000000000000000000000000", paintdata_rect179, 320);
        SkReadBuffer paintBuffer_rect179(paintdata_rect179, 320);
        SkPaint paintRect179 = SkPaintPriv::Unflatten(paintBuffer_rect179);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data145 = malloc(540);
        hexToRawData("00000040000010c258e1564300008040000093420060c144100200000000803f0000000000009342000000000000803f0080004400000000000000000000803f020000000100000000000000010000000000803f0000000000009342000000000000803f0080004400000000000000000000803f000084420000ed430000004300c0024402000000000084420000ed430000b4420080ed43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000002000000ee090000020a00000100000000000000010000000000803f0000000000009342000000000000803f0080004400000000000000000000803f0000e4420080ea430000954300c00344040000000000e4420000ec4300001d430080ea43000045430080ea4300006f430080ea4300b0c1ac800000000200000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000de74000046e9000076cf0000bad10000", data145, 540);
        auto slug145 = sktext::gpu::Slug::Deserialize(data145, 540);
        free(data145);
        void *paintdata_slug145 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug145, 28);
        SkReadBuffer paintbuffer_slug145 = SkReadBuffer(paintdata_slug145, 28);
        SkPaint paint_slug145 = SkPaintPriv::Unflatten(paintbuffer_slug145);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data146 = malloc(316);
        hexToRawData("000000400000f8c11e2ea1420000000000bf92440060c144180100000000803f0000000000bf9244000000000000803f0080004400000000000000000000803f010000000100000000000000010000000000803f0000000000bf9244000000000000803f0080004400000000000000000000803f00e091440000ed4300009e4400c002440400000000e091440000ed4300e094440080ef43002096440000ed43004099440080ed43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000e4090000700c0000ee090000fa090000", data146, 316);
        auto slug146 = sktext::gpu::Slug::Deserialize(data146, 316);
        free(data146);
        void *paintdata_slug146 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug146, 28);
        SkReadBuffer paintbuffer_slug146 = SkReadBuffer(paintdata_slug146, 28);
        SkPaint paint_slug146 = SkPaintPriv::Unflatten(paintbuffer_slug146);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1212.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1212.000000, 1344.000000, 1820.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect174);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect175);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect176);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug137->draw(canvas, paint_slug137);
        slug137->draw(canvas);
        free(paintdata_slug137);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug138->draw(canvas, paint_slug138);
        slug138->draw(canvas);
        free(paintdata_slug138);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug139->draw(canvas, paint_slug139);
        slug139->draw(canvas);
        free(paintdata_slug139);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug140->draw(canvas, paint_slug140);
        slug140->draw(canvas);
        free(paintdata_slug140);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug141->draw(canvas, paint_slug141);
        slug141->draw(canvas);
        free(paintdata_slug141);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug142->draw(canvas, paint_slug142);
        slug142->draw(canvas);
        free(paintdata_slug142);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug143->draw(canvas, paint_slug143);
        slug143->draw(canvas);
        free(paintdata_slug143);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect177);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect178);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(571.000000, 1142.000000, 760.000000, 1331.000000);
        SkVector radii[4] = { { 94.500000,94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect41);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug144->draw(canvas, paint_slug144);
        slug144->draw(canvas);
        free(paintdata_slug144);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1453.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect179);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug145->draw(canvas, paint_slug145);
        slug145->draw(canvas);
        free(paintdata_slug145);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug146->draw(canvas, paint_slug146);
        slug146->draw(canvas);
        free(paintdata_slug146);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 3700CA16BE9BC5CF494D5852B375A67D_1759762419059271.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest30, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect180 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect180, 28);
        SkReadBuffer paintBuffer_rect180(paintdata_rect180, 28);
        SkPaint paintRect180 = SkPaintPriv::Unflatten(paintBuffer_rect180);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect181 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect181, 28);
        SkReadBuffer paintBuffer_rect181(paintdata_rect181, 28);
        SkPaint paintRect181 = SkPaintPriv::Unflatten(paintBuffer_rect181);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect182 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect182, 28);
        SkReadBuffer paintBuffer_rect182(paintdata_rect182, 28);
        SkPaint paintRect182 = SkPaintPriv::Unflatten(paintBuffer_rect182);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect183 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect183, 28);
        SkReadBuffer paintBuffer_rect183(paintdata_rect183, 28);
        SkPaint paintRect183 = SkPaintPriv::Unflatten(paintBuffer_rect183);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect184 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect184, 28);
        SkReadBuffer paintBuffer_rect184(paintdata_rect184, 28);
        SkPaint paintRect184 = SkPaintPriv::Unflatten(paintBuffer_rect184);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data147 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000484200000000000000000000803f00005042000080400000e04200004042010000000000504200008040824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data147, 228);
        auto slug147 = sktext::gpu::Slug::Deserialize(data147, 228);
        free(data147);
        void *paintdata_slug147 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug147, 28);
        SkReadBuffer paintbuffer_slug147 = SkReadBuffer(paintdata_slug147, 28);
        SkPaint paint_slug147 = SkPaintPriv::Unflatten(paintbuffer_slug147);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data148 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000284200000000000000000000803f00001143000000410000754300002c4204000000000011430000004100002d4300001041000047430000104100005e4300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data148, 264);
        auto slug148 = sktext::gpu::Slug::Deserialize(data148, 264);
        free(data148);
        void *paintdata_slug148 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug148, 28);
        SkReadBuffer paintbuffer_slug148 = SkReadBuffer(paintdata_slug148, 28);
        SkPaint paint_slug148 = SkPaintPriv::Unflatten(paintbuffer_slug148);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data149 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f0080ac43000000c00080c94300005c42010000000080ac43000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data149, 228);
        auto slug149 = sktext::gpu::Slug::Deserialize(data149, 228);
        free(data149);
        void *paintdata_slug149 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug149, 28);
        SkReadBuffer paintbuffer_slug149 = SkReadBuffer(paintdata_slug149, 28);
        SkPaint paint_slug149 = SkPaintPriv::Unflatten(paintbuffer_slug149);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data150 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000284200000000000000000000803f0000d443000000410080024400002c42040000000000d443000010410000e043000000410000ed43000010410080f94300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data150, 264);
        auto slug150 = sktext::gpu::Slug::Deserialize(data150, 264);
        free(data150);
        void *paintdata_slug150 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug150, 28);
        SkReadBuffer paintbuffer_slug150 = SkReadBuffer(paintdata_slug150, 28);
        SkPaint paint_slug150 = SkPaintPriv::Unflatten(paintbuffer_slug150);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data151 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f00801b44000000c00080294400005c420100000000801b44000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data151, 228);
        auto slug151 = sktext::gpu::Slug::Deserialize(data151, 228);
        free(data151);
        void *paintdata_slug151 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug151, 28);
        SkReadBuffer paintbuffer_slug151 = SkReadBuffer(paintdata_slug151, 28);
        SkPaint paint_slug151 = SkPaintPriv::Unflatten(paintbuffer_slug151);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data152 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00002e440000004100003d4400002c420300000000002e440000104100c03444000014420040374400000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00c03d440000c04000404844000034420100000000c03d440000c0406f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data152, 412);
        auto slug152 = sktext::gpu::Slug::Deserialize(data152, 412);
        free(data152);
        void *paintdata_slug152 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug152, 28);
        SkReadBuffer paintbuffer_slug152 = SkReadBuffer(paintdata_slug152, 28);
        SkPaint paint_slug152 = SkPaintPriv::Unflatten(paintbuffer_slug152);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data153 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f00a096440000d04100c09b44000004420100000000a096440000d041675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data153, 228);
        auto slug153 = sktext::gpu::Slug::Deserialize(data153, 228);
        free(data153);
        void *paintdata_slug153 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug153, 28);
        SkReadBuffer paintbuffer_slug153 = SkReadBuffer(paintdata_slug153, 28);
        SkPaint paint_slug153 = SkPaintPriv::Unflatten(paintbuffer_slug153);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data154 = malloc(288);
        hexToRawData("0000803f000028c2050092430000a040000044430040e944380100000000803f0000000000004443000000000000803f0000634300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000634300000000000000000000803f00004543000039430000f44300006843060000000000454300003943000077430000394300009643000039430080ac43000039430000c64300003b430080dd4300003c4365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000c43c010020a8010094110100d8910000e098000000aa0000", data154, 288);
        auto slug154 = sktext::gpu::Slug::Deserialize(data154, 288);
        free(data154);
        void *paintdata_slug154 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug154, 28);
        SkReadBuffer paintbuffer_slug154 = SkReadBuffer(paintdata_slug154, 28);
        SkPaint paint_slug154 = SkPaintPriv::Unflatten(paintbuffer_slug154);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data155 = malloc(324);
        hexToRawData("0000803f0000e8c1baab3f43000000000000444300e0f044680100000000803f0000000000004443000000000000803f0000904300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000904300000000000000000000803f00004543008081430080c1430000904309000000000045430080814300005c430000894300006e43008081430000824300808143000093430080814300009e43008081430080a843000084430000ad43008081430000b84300808143f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000080a0000800c0000ef090000070a0000e8090000e8090000700c0000e7090000070a0000", data155, 324);
        auto slug155 = sktext::gpu::Slug::Deserialize(data155, 324);
        free(data155);
        void *paintdata_slug155 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug155, 28);
        SkReadBuffer paintbuffer_slug155 = SkReadBuffer(paintdata_slug155, 28);
        SkPaint paint_slug155 = SkPaintPriv::Unflatten(paintbuffer_slug155);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data156 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c24300e0f044200200000000803f000000000050c243000000000000803f0000904300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0000c84300007e430080eb4300009243020000000000c84300007f430080dd4300007e43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0080f34300007f430080294400009243050000000080f34300007f430080034400007f4300c00d440080804300001744008080430040204400007f43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data156, 448);
        auto slug156 = sktext::gpu::Slug::Deserialize(data156, 448);
        free(data156);
        void *paintdata_slug156 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug156, 28);
        SkReadBuffer paintbuffer_slug156 = SkReadBuffer(paintdata_slug156, 28);
        SkPaint paint_slug156 = SkPaintPriv::Unflatten(paintbuffer_slug156);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data157 = malloc(468);
        hexToRawData("0000803f000040c200a09244000010410000604200600045280200000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f000064420080b74300a099440000d44315000000000064420000b8430000e4420080b94300002a430000b843000066430080b74300008d430080b7430000ac430080c0430000c6430000b8430000e1430080b7430080fd430080b74300c00c440000b84300401a440080b743008028440000b943004036440000b843004044440080b743008052440080b743008060440000b84300806e440000b84300007e440080cc43002085440080b84300408c440080b743002093440080b743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000ac7800004cea0000389a0100b8d80000906c0100a4c3010054780000f4850000f8890000a8750000b48001007cd500006cd90000f479000020f4000080ee000098850000a8c30100f88c000054da0000048c0000", data157, 468);
        auto slug157 = sktext::gpu::Slug::Deserialize(data157, 468);
        free(data157);
        void *paintdata_slug157 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug157, 28);
        SkReadBuffer paintbuffer_slug157 = SkReadBuffer(paintdata_slug157, 28);
        SkPaint paint_slug157 = SkPaintPriv::Unflatten(paintbuffer_slug157);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data158 = malloc(468);
        hexToRawData("0000803f000040c200c09244000010410000604200a00545280200000000803f0000000000006042000000000000803f0080f94300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080f94300000000000000000000803f000064420080e14300c099440000fe4315000000000064420000e3430000e6420080e14300002b430000e243000061430000e24300808c430080e1430000a9430080e1430000c5430000e2430000e2430080e1430000fd430000e24300800c440000e34300c01a440000e343008028440000e443000038440080f643004044440000e24300c052440000e343008060440000e44300806e440080e14300407c440080e143006085440000e34300408c440080e343002093440000e243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000800b0100f8890000a87500006cd90000f479000020f4000080ee0000d0160100608200007cd50000208e000054b40000a8c30100e8c60000208e000054b40000fceb000068750000e0d8000088b60000e4ca0000", data158, 468);
        auto slug158 = sktext::gpu::Slug::Deserialize(data158, 468);
        free(data158);
        void *paintdata_slug158 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug158, 28);
        SkReadBuffer paintbuffer_slug158 = SkReadBuffer(paintdata_slug158, 28);
        SkPaint paint_slug158 = SkPaintPriv::Unflatten(paintbuffer_slug158);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data159 = malloc(496);
        hexToRawData("0000a040000040c206410244000010410000604200e00a45600200000000803f0000000000006042000000000000803f00c0114400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f000074420040074400002243000012440300000000007442008007440000b442004007440000f04200400744eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f00002b4300c0054400401044000014440800000000002b430040104400005c430000064400008a4300c005440000a643008006440080c243004006440000de4300c005440080fa4300c0064400400c4400000f44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000a8c3010018780000048c0000800b010044ef0000e4d8000060110100b0c60100", data159, 496);
        auto slug159 = sktext::gpu::Slug::Deserialize(data159, 496);
        free(data159);
        void *paintdata_slug159 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug159, 28);
        SkReadBuffer paintbuffer_slug159 = SkReadBuffer(paintdata_slug159, 28);
        SkPaint paint_slug159 = SkPaintPriv::Unflatten(paintbuffer_slug159);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect42 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect42, 28);
        SkReadBuffer paintBuffer_rrect42(paintdata_rrect42, 28);
        SkPaint paintRRect42 = SkPaintPriv::Unflatten(paintBuffer_rrect42);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect43 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect43, 28);
        SkReadBuffer paintBuffer_rrect43(paintdata_rrect43, 28);
        SkPaint paintRRect43 = SkPaintPriv::Unflatten(paintBuffer_rrect43);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata8 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata8, 92);
        SkPath path8;
        path8.readFromMemory(pathdata8, 92);
        void *paintdata_path8 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path8, 28);
        SkReadBuffer paintBuffer_path8(paintdata_path8, 28);
        SkPaint paintPath8 = SkPaintPriv::Unflatten(paintBuffer_path8);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage1;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage1.allocPixels(ii);
        SkCanvas tmp(fakeImage1);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1344.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect180);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect181);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect182);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect183);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect184);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug147->draw(canvas, paint_slug147);
        slug147->draw(canvas);
        free(paintdata_slug147);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug148->draw(canvas, paint_slug148);
        slug148->draw(canvas);
        free(paintdata_slug148);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug149->draw(canvas, paint_slug149);
        slug149->draw(canvas);
        free(paintdata_slug149);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug150->draw(canvas, paint_slug150);
        slug150->draw(canvas);
        free(paintdata_slug150);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug151->draw(canvas, paint_slug151);
        slug151->draw(canvas);
        free(paintdata_slug151);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug152->draw(canvas, paint_slug152);
        slug152->draw(canvas);
        free(paintdata_slug152);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug153->draw(canvas, paint_slug153);
        slug153->draw(canvas);
        free(paintdata_slug153);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug154->draw(canvas, paint_slug154);
        slug154->draw(canvas);
        free(paintdata_slug154);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1885.000000, 1274.000000, 1943.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug155->draw(canvas, paint_slug155);
        slug155->draw(canvas);
        free(paintdata_slug155);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug156->draw(canvas, paint_slug156);
        slug156->draw(canvas);
        free(paintdata_slug156);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug157->draw(canvas, paint_slug157);
        slug157->draw(canvas);
        free(paintdata_slug157);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug158->draw(canvas, paint_slug158);
        slug158->draw(canvas);
        free(paintdata_slug158);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug159->draw(canvas, paint_slug159);
        slug159->draw(canvas);
        free(paintdata_slug159);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect42);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect43);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path8, paintPath8);
        free(pathdata8);
        free(paintdata_path8);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage1)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage1);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762419061950.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest31, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect185 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect185, 28);
        SkReadBuffer paintBuffer_rect185(paintdata_rect185, 28);
        SkPaint paintRect185 = SkPaintPriv::Unflatten(paintBuffer_rect185);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect186 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect186, 28);
        SkReadBuffer paintBuffer_rect186(paintdata_rect186, 28);
        SkPaint paintRect186 = SkPaintPriv::Unflatten(paintBuffer_rect186);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect187 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect187, 28);
        SkReadBuffer paintBuffer_rect187(paintdata_rect187, 28);
        SkPaint paintRect187 = SkPaintPriv::Unflatten(paintBuffer_rect187);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data160 = malloc(468);
        hexToRawData("0000803f000040c200e09244000010410000604200601545280200000000803f0000000000006042000000000000803f0000114300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000114300000000000000000000803f000064420000c24200e0994400001a4315000000000064420000c6420000e4420000c242000029430000c442000063430000c24200008e430000ca420000ac4300000b430000c5430000ca420000e1430000c2420000fd430000c44200c00c440000c84200801a440000cc4200002a4400000b43008036440000c242008044440000c442008052440000ca42008060440000c2420000704400000b4300807c440000c242004085440000c24200408c440000c242004093440000c442ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000f88c000054da000018780000a4d10000d8760000a8c30100f474000020f4000080ee0000208e000054b40000a8c3010020f4000080ee000088b6000060800100a8c30100fceb000090b6000020f4000080ee0000", data160, 468);
        auto slug160 = sktext::gpu::Slug::Deserialize(data160, 468);
        free(data160);
        void *paintdata_slug160 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug160, 28);
        SkReadBuffer paintbuffer_slug160 = SkReadBuffer(paintdata_slug160, 28);
        SkPaint paint_slug160 = SkPaintPriv::Unflatten(paintbuffer_slug160);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data161 = malloc(628);
        hexToRawData("0000a040000044c283209244000010410000604200a01a45100300000000803f0000000000006042000000000000803f0000654300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0000654300000000000000000000803f0000744200003b430000224300006643030000000000744200003c430000b44200003b430000f04200003b43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f0000654300000000000000000000803f00002743000034430020994400006e4313000000000027430000354300005d430000394300808a43000035430080a84300005a430000c243000035430000df43000035430080fb430000394300c00b4400003643000019440000374300c0284400005f4300003544000036430000434400003543000051440000384300005f440000354300006d440000354300407b4400003543008084440000354300808b44000035430080924400003443ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43013000000d016010088b6000060800100b0c60100287e0000f0aa0000d876000054780000f88c0000a8c3010018780000048c0000800b010090d2000068750000d0370100dc37010084ad0000208c0000", data161, 628);
        auto slug161 = sktext::gpu::Slug::Deserialize(data161, 628);
        free(data161);
        void *paintdata_slug161 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug161, 28);
        SkReadBuffer paintbuffer_slug161 = SkReadBuffer(paintdata_slug161, 28);
        SkPaint paint_slug161 = SkPaintPriv::Unflatten(paintbuffer_slug161);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data162 = malloc(468);
        hexToRawData("00008040000040c200c09244000010410000604200e01f45280200000000803f0000000000006042000000000000803f00809c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f00809c4300000000000000000000803f000070420080844300c099440000a1431500000000007042008086430000f0420080994300002943008084430000624300808f4300808c43008084430000a943008084430080c443008084430000e143000085430080fc430080844300400c440080844300801a4400808f430080284400808443008036440080844300404444008084430000544400809943004060440000854300806e440000854300407c4400008543004085440000864300208c44008084430020934400808443ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000d8760000a8c30100e4d80000c074000068750000b4a200001cb70000bc92010084ad0000e4d80000c074000098ab0000b4a200001cb70000a8c30100407a0000e4810000e8c600004c7f0100687500001cb70000", data162, 468);
        auto slug162 = sktext::gpu::Slug::Deserialize(data162, 468);
        free(data162);
        void *paintdata_slug162 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug162, 28);
        SkReadBuffer paintbuffer_slug162 = SkReadBuffer(paintdata_slug162, 28);
        SkPaint paint_slug162 = SkPaintPriv::Unflatten(paintbuffer_slug162);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data163 = malloc(468);
        hexToRawData("00004040000040c200e09244000010410000604200202545280200000000803f0000000000006042000000000000803f0080c64300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080c64300000000000000000000803f00006c420080ae4300e099440000cb431500000000006c420000b0430000e6420000b043000029430000af43000062430000b04300808c430000b0430000a9430000b0430080c4430080af430000e2430080ae43000000440080c34300800c440080af4300401a440080ae43004028440000af43004036440000af43008044440080ae43008052440080ae43008061440000c14300406e440000af4300007d440000af43004085440000af4300a08c440000b043004093440080ae43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000208e0000d0b800001cbb0000c4620100acea0000c4620100acf10000d0160100a8c3010044ef0000e4d80000ac780000147a0000fcc00000e4750000b0c60100c0c50000547800004c4e0100f8d40000400c0100", data163, 468);
        auto slug163 = sktext::gpu::Slug::Deserialize(data163, 468);
        free(data163);
        void *paintdata_slug163 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug163, 28);
        SkReadBuffer paintbuffer_slug163 = SkReadBuffer(paintdata_slug163, 28);
        SkPaint paint_slug163 = SkPaintPriv::Unflatten(paintbuffer_slug163);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data164 = malloc(448);
        hexToRawData("00000040000040c2fa7e89430000a0400000604200602a45200200000000803f0000000000006042000000000000803f0080f04300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0080f04300000000000000000000803f000068420080d843000089430000f34304000000000068420080d8430000e8420080da4300002a430080e343000061430080d843ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000906c0100d8760000c0740000548c00000100000000000000010000000000803f0000000000006042000000000000803f0080f04300000000000000000000803f000095430000ed430080a5430000f14303000000000095430000ed4300809b430000ed430000a2430000ed43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f80b0000f80b0000f80b0000", data164, 448);
        auto slug164 = sktext::gpu::Slug::Deserialize(data164, 448);
        free(data164);
        void *paintdata_slug164 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug164, 28);
        SkReadBuffer paintbuffer_slug164 = SkReadBuffer(paintdata_slug164, 28);
        SkPaint paint_slug164 = SkPaintPriv::Unflatten(paintbuffer_slug164);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data165 = malloc(240);
        hexToRawData("00000040000040c20000dc420000a04000f8a64300602a45f80000000000803f0000000000f8a643000000000000803f0080f04300000000000000000000803f010000000100000000000000010000000000803f0000000000f8a643000000000000803f0080f04300000000000000000000803f0000a8430080d8430000de430000f343020000000000a8430000d9430000c4430080d843c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300200000060820000dcd20000", data165, 240);
        auto slug165 = sktext::gpu::Slug::Deserialize(data165, 240);
        free(data165);
        void *paintdata_slug165 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug165, 28);
        SkReadBuffer paintbuffer_slug165 = SkReadBuffer(paintdata_slug165, 28);
        SkPaint paint_slug165 = SkPaintPriv::Unflatten(paintbuffer_slug165);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect188 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect188, 28);
        SkReadBuffer paintBuffer_rect188(paintdata_rect188, 28);
        SkPaint paintRect188 = SkPaintPriv::Unflatten(paintBuffer_rect188);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -2424.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2424.000000, 1344.000000, 3032.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect185);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect186);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect187);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug160->draw(canvas, paint_slug160);
        slug160->draw(canvas);
        free(paintdata_slug160);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug161->draw(canvas, paint_slug161);
        slug161->draw(canvas);
        free(paintdata_slug161);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug162->draw(canvas, paint_slug162);
        slug162->draw(canvas);
        free(paintdata_slug162);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug163->draw(canvas, paint_slug163);
        slug163->draw(canvas);
        free(paintdata_slug163);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug164->draw(canvas, paint_slug164);
        slug164->draw(canvas);
        free(paintdata_slug164);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug165->draw(canvas, paint_slug165);
        slug165->draw(canvas);
        free(paintdata_slug165);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 2784.000000, 1274.000000, 3198.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2784.000000, 453.000000, 3181.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect188);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: A9702F0CDCE37AB0174144DE680A9AF3_1759762419075090.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest32, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect189 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect189, 28);
        SkReadBuffer paintBuffer_rect189(paintdata_rect189, 28);
        SkPaint paintRect189 = SkPaintPriv::Unflatten(paintBuffer_rect189);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect190 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect190, 28);
        SkReadBuffer paintBuffer_rect190(paintdata_rect190, 28);
        SkPaint paintRect190 = SkPaintPriv::Unflatten(paintBuffer_rect190);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect191 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect191, 28);
        SkReadBuffer paintBuffer_rect191(paintdata_rect191, 28);
        SkPaint paintRect191 = SkPaintPriv::Unflatten(paintBuffer_rect191);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data166 = malloc(264);
        hexToRawData("00000040000024c2060042430000a0400000444300005f43180100000000803f0000000000004443000000000000803f0000c94300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000c94300000000000000000000803f000046430080b4430000c3430080cb4304000000000046430080b44300007a430080b543000097430080b5430000ac430080b44365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000a877000004ed000054d4000054c70000", data166, 264);
        auto slug166 = sktext::gpu::Slug::Deserialize(data166, 264);
        free(data166);
        void *paintdata_slug166 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug166, 28);
        SkReadBuffer paintbuffer_slug166 = SkReadBuffer(paintdata_slug166, 28);
        SkPaint paint_slug166 = SkPaintPriv::Unflatten(paintbuffer_slug166);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data167 = malloc(324);
        hexToRawData("000040400000e8c1baab3943000000000000444300008e43680100000000803f0000000000004443000000000000803f0080e74300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0080e74300000000000000000000803f000047430000d9430000bf430080e74309000000000047430000d94300005b430000d943000072430080e043000082430000d943000092430000d94300009e430000d9430080a8430080db430000ad430000d9430000b9430000d943f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000e8090000e4090000800c0000f3090000ec090000e8090000700c0000f3090000eb090000", data167, 324);
        auto slug167 = sktext::gpu::Slug::Deserialize(data167, 324);
        free(data167);
        void *paintdata_slug167 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug167, 28);
        SkReadBuffer paintbuffer_slug167 = SkReadBuffer(paintdata_slug167, 28);
        SkPaint paint_slug167 = SkPaintPriv::Unflatten(paintbuffer_slug167);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data168 = malloc(448);
        hexToRawData("00523641000008c22f659043000080400050c24300008e43200200000000803f000000000050c243000000000000803f0080e74300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0080e74300000000000000000000803f0000c8430080d6430080eb430080e943020000000000c8430000d7430080dd430080d643817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0080e74300000000000000000000803f0080f3430000d743008029440080e943050000000080f3430000d743008003440000d74300000d440000d74300c016440000d743008020440000d843817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000da630100049f01009e8c0000", data168, 448);
        auto slug168 = sktext::gpu::Slug::Deserialize(data168, 448);
        free(data168);
        void *paintdata_slug168 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug168, 28);
        SkReadBuffer paintbuffer_slug168 = SkReadBuffer(paintdata_slug168, 28);
        SkPaint paint_slug168 = SkPaintPriv::Unflatten(paintbuffer_slug168);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data169 = malloc(252);
        hexToRawData("00525641000004c254caf8420000804000bb294400008e43080100000000803f0000000000bb2944000000000000803f0080e74300000000000000000000803f010000000100000000000000010000000000803f0000000000bb2944000000000000803f0080e74300000000000000000000803f00402d440000d743000049440080e9430300000000402d440000d843004036440000d74300c03f440000d743817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300300000089b400001b390100057b0100", data169, 252);
        auto slug169 = sktext::gpu::Slug::Deserialize(data169, 252);
        free(data169);
        void *paintdata_slug169 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug169, 28);
        SkReadBuffer paintbuffer_slug169 = SkReadBuffer(paintdata_slug169, 28);
        SkPaint paint_slug169 = SkPaintPriv::Unflatten(paintbuffer_slug169);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data170 = malloc(632);
        hexToRawData("00000000000040c2ae0702440000a040000060420080cd43280300000000803f0000000000006042000000000000803f0080134400000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0080134400000000000000000000803f00006042004009440000b842008013440100000000006042004009440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000006042000000000000803f0080134400000000000000000000803f0000be42008007440040064400c01444080000000000be42008007440000174300c0074400004e4300800744008082430080074400009f4300c007440000bb43008007440000d74300c007440000f34300400844c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43008000000f84a010090a10000d0370100e08c0000e48100003c7d0100a8a10000408300000100000000000000010000000000803f0000000000006042000000000000803f0080134400000000000000000000803f000007440040094400001044008013440100000000000744004009440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data170, 632);
        auto slug170 = sktext::gpu::Slug::Deserialize(data170, 632);
        free(data170);
        void *paintdata_slug170 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug170, 28);
        SkReadBuffer paintbuffer_slug170 = SkReadBuffer(paintdata_slug170, 28);
        SkPaint paint_slug170 = SkPaintPriv::Unflatten(paintbuffer_slug170);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data171 = malloc(288);
        hexToRawData("00001442000040c2008093430000c040001010440080cd43380100000000803f0000000000101044000000000000803f0080134400000000000000000000803f010000000100000000000000010000000000803f0000000000101044000000000000803f0080134400000000000000000000803f004019440080074400005a4400001544060000000040194400c0074400801e440080074400802c440080074400803a4400c0074400804844008007440000584400c00844ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000f5c40100717a0100058c000035220100a9710100b1c30100", data171, 288);
        auto slug171 = sktext::gpu::Slug::Deserialize(data171, 288);
        free(data171);
        void *paintdata_slug171 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug171, 28);
        SkReadBuffer paintbuffer_slug171 = SkReadBuffer(paintdata_slug171, 28);
        SkPaint paint_slug171 = SkPaintPriv::Unflatten(paintbuffer_slug171);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data172 = malloc(424);
        hexToRawData("00000000000040c25c0f81430000a040001064440080cd43000200000000803f0000000000106444000000000000803f0080134400000000000000000000803f020000000100000000000000010000000000803f0000000000106444000000000000803f0080134400000000000000000000803f004064440040094400006d44008013440100000000406444004009440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000390c00000100000000000000010000000000803f0000000000106444000000000000803f0080134400000000000000000000803f00406e44008007440040924400c014440400000000406e440040084400c07b440000084400e084440080074400c08b4400800744c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43004000000b598000009760000d5880000b5cc0000", data172, 424);
        auto slug172 = sktext::gpu::Slug::Deserialize(data172, 424);
        free(data172);
        void *paintdata_slug172 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug172, 28);
        SkReadBuffer paintbuffer_slug172 = SkReadBuffer(paintdata_slug172, 28);
        SkPaint paint_slug172 = SkPaintPriv::Unflatten(paintbuffer_slug172);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data173 = malloc(228);
        hexToRawData("d3d2d2bd00007cc26a697c420000000000cf02440000b642e80000000000803f0000000000cf0244000000000000803f0000874300000000000000000000803f010000000100000000000000010000000000803f0000000000cf0244000000000000803f0000874300000000000000000000803f00c006440000514300800e44000086430100000000c0064400005143340d57044c0000000100000063657273380000000400000000007c420000803f000000000000803f00000000000000000000803f000080bf00000000000000006d6d6dff590000000100b4300100000049000000", data173, 228);
        auto slug173 = sktext::gpu::Slug::Deserialize(data173, 228);
        free(data173);
        void *paintdata_slug173 = malloc(28);
        hexToRawData("0000000000008040f9f8f83ef9f8f83ef9f8f83e0000803f01030000", paintdata_slug173, 28);
        SkReadBuffer paintbuffer_slug173 = SkReadBuffer(paintdata_slug173, 28);
        SkPaint paint_slug173 = SkPaintPriv::Unflatten(paintbuffer_slug173);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data174 = malloc(264);
        hexToRawData("00000040000010c20c0027430000804000301c4400009442180100000000803f0000000000301c44000000000000803f00007d4300000000000000000000803f010000000100000000000000010000000000803f0000000000301c44000000000000803f00007d4300000000000000000000803f00c01c440000594300004644008080430400000000c01c4400005c430000274400005943008031440000594300003c44000059435bf1126b4c0000000100000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf00000000000000006d6d6dff590000000100b43004000000ef740000e7c700009f85000083d30000", data174, 264);
        auto slug174 = sktext::gpu::Slug::Deserialize(data174, 264);
        free(data174);
        void *paintdata_slug174 = malloc(28);
        hexToRawData("0000000000008040f9f8f83ef9f8f83ef9f8f83e0000803f01030000", paintdata_slug174, 28);
        SkReadBuffer paintbuffer_slug174 = SkReadBuffer(paintdata_slug174, 28);
        SkPaint paint_slug174 = SkPaintPriv::Unflatten(paintbuffer_slug174);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect44 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect44, 28);
        SkReadBuffer paintBuffer_rrect44(paintdata_rrect44, 28);
        SkPaint paintRRect44 = SkPaintPriv::Unflatten(paintBuffer_rrect44);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage2;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage2.allocPixels(ii);
        SkCanvas tmp(fakeImage2);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage3;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage3.allocPixels(ii);
        SkCanvas tmp(fakeImage3);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect45 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect45, 28);
        SkReadBuffer paintBuffer_rrect45(paintdata_rrect45, 28);
        SkPaint paintRRect45 = SkPaintPriv::Unflatten(paintBuffer_rrect45);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata9 = malloc(224);
        hexToRawData("0501000016000000040000000f0000005839fc408b6c37408b6cff408b6c37409cc400417b143e40ac1c00416ce743405839b8407b1400417110b740e05b01418941b44042600141355e8a401f850141237a874075870141d34d86404035004116d9fe3f93184440bdbef33fe4973740508d074014ae374019045e404f8d3740e04f65404f8d37400bd76b4030083c402b876e4082c04240d1229f406666c640b81ec94084eb41405a69cb40ccf936401058d1403c0a37405839fc40ec7c37401e04583f462f563fe4da0a3f5bbf543f00040103010301030104010103010500", pathdata9, 224);
        SkPath path9;
        path9.readFromMemory(pathdata9, 224);
        void *paintdata_path9 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_path9, 28);
        SkReadBuffer paintBuffer_path9(paintdata_path9, 28);
        SkPaint paintPath9 = SkPaintPriv::Unflatten(paintBuffer_path9);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 1344.000000, 608.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect189);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect190);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect191);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 173.000000, 1274.000000, 242.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug166->draw(canvas, paint_slug166);
        slug166->draw(canvas);
        free(paintdata_slug166);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 242.000000, 1274.000000, 299.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug167->draw(canvas, paint_slug167);
        slug167->draw(canvas);
        free(paintdata_slug167);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug168->draw(canvas, paint_slug168);
        slug168->draw(canvas);
        free(paintdata_slug168);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug169->draw(canvas, paint_slug169);
        slug169->draw(canvas);
        free(paintdata_slug169);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug170->draw(canvas, paint_slug170);
        slug170->draw(canvas);
        free(paintdata_slug170);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug171->draw(canvas, paint_slug171);
        slug171->draw(canvas);
        free(paintdata_slug171);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug172->draw(canvas, paint_slug172);
        slug172->draw(canvas);
        free(paintdata_slug172);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug173->draw(canvas, paint_slug173);
        slug173->draw(canvas);
        free(paintdata_slug173);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug174->draw(canvas, paint_slug174);
        slug174->draw(canvas);
        free(paintdata_slug174);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 165.000000, 168.000000, 277.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect44);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 165.000000, 168.000000, 277.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage2)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 165.000000, 168.000000, 277.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage2);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 173.000000, 1274.000000, 242.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage3)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(416.000000, 181.000000, 479.000000, 230.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage3);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 166.500000, 166.500000, 275.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect45);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 231.000000, 172.000000, 280.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,-847.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,308.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path9, paintPath9);
        free(pathdata9);
        free(paintdata_path9);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 9557EC544AD5ECC62F6271877E15C907_1759762419076665.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest33, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect192 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect192, 28);
        SkReadBuffer paintBuffer_rect192(paintdata_rect192, 28);
        SkPaint paintRect192 = SkPaintPriv::Unflatten(paintBuffer_rect192);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect193 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect193, 28);
        SkReadBuffer paintBuffer_rect193(paintdata_rect193, 28);
        SkPaint paintRect193 = SkPaintPriv::Unflatten(paintBuffer_rect193);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect194 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect194, 28);
        SkReadBuffer paintBuffer_rect194(paintdata_rect194, 28);
        SkPaint paintRect194 = SkPaintPriv::Unflatten(paintBuffer_rect194);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data175 = malloc(656);
        hexToRawData("00000000000040c2edfc16440000a040000060420080f743480300000000803f0000000000006042000000000000803f0000884200000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f000060420000d841000030430000884203000000000060420000d8410000de420000d841000010430000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43003000000a802000031020000310200000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f000036430000a04100801b440000924208000000000036430000a04100006d430000b841000091430000a0410000ad430000a8410000c9430000b8410000e5430000b84100c000440000c04100c00e440000c041c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300800000074750000b49800005ca1000044f800007c71010040830000287700002c8300000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f00001c440000d84100002544000088420100000000001c440000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data175, 656);
        auto slug175 = sktext::gpu::Slug::Deserialize(data175, 656);
        free(data175);
        void *paintdata_slug175 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug175, 28);
        SkReadBuffer paintbuffer_slug175 = SkReadBuffer(paintdata_slug175, 28);
        SkPaint paint_slug175 = SkPaintPriv::Unflatten(paintbuffer_slug175);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data176 = malloc(228);
        hexToRawData("0000804000003cc2000098410000c040000525440080f743e80000000000803f0000000000052544000000000000803f0000884200000000000000000000803f010000000100000000000000010000000000803f0000000000052544000000000000803f0000884200000000000000000000803f000026440000a84100c029440000944201000000000026440000a841ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000fcc40100", data176, 228);
        auto slug176 = sktext::gpu::Slug::Deserialize(data176, 228);
        free(data176);
        void *paintdata_slug176 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug176, 28);
        SkReadBuffer paintbuffer_slug176 = SkReadBuffer(paintdata_slug176, 28);
        SkPaint paint_slug176 = SkPaintPriv::Unflatten(paintbuffer_slug176);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data177 = malloc(484);
        hexToRawData("00000000000040c2ae4706440000a040000533440080f743500200000000803f0000000000053344000000000000803f0000884200000000000000000000803f020000000100000000000000010000000000803f0000000000053344000000000000803f0000884200000000000000000000803f000033440000d84100003c440000884201000000000033440000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000053344000000000000803f0000884200000000000000000000803f00c03c440000a04100c09c44000092420900000000c03c440000c04100c04a440000a841004058440000a041008066440000b041008074440000a841006081440000a041004088440000a84100408f440000c041004096440000b841c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43009000000ed0a010029e20000598f010025aa0000199f0100f94a01009df40000f18b000041830000", data177, 484);
        auto slug177 = sktext::gpu::Slug::Deserialize(data177, 484);
        free(data177);
        void *paintdata_slug177 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug177, 28);
        SkReadBuffer paintbuffer_slug177 = SkReadBuffer(paintdata_slug177, 28);
        SkPaint paint_slug177 = SkPaintPriv::Unflatten(paintbuffer_slug177);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data178 = malloc(388);
        hexToRawData("00004040000030c20000b842000080400000604200c01044d00100000000803f0000000000006042000000000000803f0000184300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0000184300000000000000000000803f00006c420000d8420000dc4200001c430100000000006c420000d842c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430010000002c8300000100000000000000010000000000803f0000000000006042000000000000803f0000184300000000000000000000803f0000e0420000de420000144300001843010000000000e0420000de420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data178, 388);
        auto slug178 = sktext::gpu::Slug::Deserialize(data178, 388);
        free(data178);
        void *paintdata_slug178 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug178, 28);
        SkReadBuffer paintbuffer_slug178 = SkReadBuffer(paintdata_slug178, 28);
        SkPaint paint_slug178 = SkPaintPriv::Unflatten(paintbuffer_slug178);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data179 = malloc(888);
        hexToRawData("00000040000044c29bc47744000010410020144300c01044900400000000803f0000000000201443000000000000803f0000184300000000000000000000803f040000000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f000016430000ce420000d54300001d4305000000000016430000d242000051430000d242008084430000d24200009f430000d2420080bb430000ce42ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300500000079ca0000698f0000158f00000d7a0000893f01000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f0080e143000012430000e64300002143010000000080e14300001243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000a9c301000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f0080f9430000de4200c01a4400001843030000000080f9430000de4200c00a440000de42000013440000de42eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000a902000032020000320200000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f00401c440000d04200808e44000021430a00000000401c440000d04200002a440000d642008037440000d042004045440000d242004053440000d642004061440000d24200406f440000d84200407d440000d04200a085440000d04200608d4400001243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300a00000075750000b59800005da1000045f800007d7101009df40000f18b00008d8300002d720100a9c30100", data179, 888);
        auto slug179 = sktext::gpu::Slug::Deserialize(data179, 888);
        free(data179);
        void *paintdata_slug179 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug179, 28);
        SkReadBuffer paintbuffer_slug179 = SkReadBuffer(paintdata_slug179, 28);
        SkPaint paint_slug179 = SkPaintPriv::Unflatten(paintbuffer_slug179);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data180 = malloc(228);
        hexToRawData("00000040000030c2000054420000e0408066934400c01044e80000000000803f0000000080669344000000000000803f0000184300000000000000000000803f010000000100000000000000010000000000803f0000000080669344000000000000803f0000184300000000000000000000803f00c093440000d84200009a4400001f430100000000c093440000d8420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000310d0000", data180, 228);
        auto slug180 = sktext::gpu::Slug::Deserialize(data180, 228);
        free(data180);
        void *paintdata_slug180 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug180, 28);
        SkReadBuffer paintbuffer_slug180 = SkReadBuffer(paintdata_slug180, 28);
        SkPaint paint_slug180 = SkPaintPriv::Unflatten(paintbuffer_slug180);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data181 = malloc(252);
        hexToRawData("0000803f000040c2000026430000a0400000604200c02544080100000000803f0000000000006042000000000000803f00006c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f00006c4300000000000000000000803f0000644200003c4300005e4300007143030000000000644200003e430000e44200003d4300002b4300003c43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300300000024aa0000189f0100f84a0100", data181, 252);
        auto slug181 = sktext::gpu::Slug::Deserialize(data181, 252);
        free(data181);
        void *paintdata_slug181 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug181, 28);
        SkReadBuffer paintbuffer_slug181 = SkReadBuffer(paintdata_slug181, 28);
        SkPaint paint_slug181 = SkPaintPriv::Unflatten(paintbuffer_slug181);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data182 = malloc(228);
        hexToRawData("70144e41000024c21c850742000000000000604300c02544e80000000000803f0000000000006043000000000000803f00006c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006043000000000000803f00006c4300000000000000000000803f00006d43000043430000814300006c430100000000006d4300004343eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003c0c0000", data182, 228);
        auto slug182 = sktext::gpu::Slug::Deserialize(data182, 228);
        free(data182);
        void *paintdata_slug182 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug182, 28);
        SkReadBuffer paintbuffer_slug182 = SkReadBuffer(paintdata_slug182, 28);
        SkPaint paint_slug182 = SkPaintPriv::Unflatten(paintbuffer_slug182);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data183 = malloc(596);
        hexToRawData("00000040000040c2e67b9243000010410070804300c02544f80200000000803f0000000000708043000000000000803f00006c4300000000000000000000803f030000000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f008081430000404300009b43000073430100000000808143000040430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000300d00000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f00009d4300003c430000ef43000071430300000000009d43000040430000b94300003d430000d44300003c43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43003000000ee0a01002ae200005a8f01000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f0080ef43000070430040094400007543030000000080ef43000070430000fb430000704300400344000070430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430030000009e0c00009f0c00009f0c0000", data183, 596);
        auto slug183 = sktext::gpu::Slug::Deserialize(data183, 596);
        free(data183);
        void *paintdata_slug183 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug183, 28);
        SkReadBuffer paintbuffer_slug183 = SkReadBuffer(paintdata_slug183, 28);
        SkPaint paint_slug183 = SkPaintPriv::Unflatten(paintbuffer_slug183);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data184 = malloc(668);
        hexToRawData("c0f5a041000040c2703d3044000010410042094400c02544580300000000803f0000000000420944000000000000803f00006c4300000000000000000000803f030000000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f00400e4400003c4300004444000071430400000000400e4400003d4300801b4400003d4300402a4400003c430080374400003d43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300400000021c5000031400100e1950100410301000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f004045440000434300804a4400006c43010000000040454400004343eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003d0c00000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f00404b4400003c4300c09c44000075430800000000404b4400003d4300c0584400003c430000674400003c43008076440000664300a0814400003f430080884400003c430000904400003c4300e0964400003f43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000d0b70100ec8b0000bcd10000a8c3010050750000d037010074750000b4980000", data184, 668);
        auto slug184 = sktext::gpu::Slug::Deserialize(data184, 668);
        free(data184);
        void *paintdata_slug184 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug184, 28);
        SkReadBuffer paintbuffer_slug184 = SkReadBuffer(paintdata_slug184, 28);
        SkPaint paint_slug184 = SkPaintPriv::Unflatten(paintbuffer_slug184);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data185 = malloc(372);
        hexToRawData("00000040000040c200c02b440000c0400000604200c03a44a80100000000803f0000000000006042000000000000803f0000a04300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000a04300000000000000000000803f000068420000884300c039440000a3430d00000000006842000088430000e4420000894300002a4300008843000062430000884300008d43008088430080a84300008a430000c543008089430080e14300008a430080fd4300008a4300800d4400809a4300801a440080884300402844000088430000384400808a43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300d000000e47c0100ecc50000d4880000b4cc00009cf40000f08b000040830000287700002c830000b0c6010034220100a8710100b0c30100", data185, 372);
        auto slug185 = sktext::gpu::Slug::Deserialize(data185, 372);
        free(data185);
        void *paintdata_slug185 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug185, 28);
        SkReadBuffer paintbuffer_slug185 = SkReadBuffer(paintdata_slug185, 28);
        SkPaint paint_slug185 = SkPaintPriv::Unflatten(paintbuffer_slug185);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage4;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 42);
        fakeImage4.allocPixels(ii);
        SkCanvas tmp(fakeImage4);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data186 = malloc(300);
        hexToRawData("00004040000040c20000c3430000a0400088574400c03a44480100000000803f0000000000885744000000000000803f0000a04300000000000000000000803f010000000100000000000000010000000000803f0000000000885744000000000000803f0000a04300000000000000000000803f004058440000884300809c440080a24307000000004058440080884300006744008089430000764400008a430000814400808843006088440000884300e08e44000088430000964400008843c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43007000000a977000005ed000055d4000055c70000d116010079bb0000298a0000", data186, 300);
        auto slug186 = sktext::gpu::Slug::Deserialize(data186, 300);
        free(data186);
        void *paintdata_slug186 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug186, 28);
        SkReadBuffer paintbuffer_slug186 = SkReadBuffer(paintdata_slug186, 28);
        SkPaint paint_slug186 = SkPaintPriv::Unflatten(paintbuffer_slug186);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data187 = malloc(240);
        hexToRawData("00000040000040c20000dc420000a0400000604200005144f80000000000803f0000000000006042000000000000803f0080cc4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cc4300000000000000000000803f000068420080b443000026430000cf4302000000000068420080b4430000e2420080b443c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43002000000d8630100049f0100", data187, 240);
        auto slug187 = sktext::gpu::Slug::Deserialize(data187, 240);
        free(data187);
        void *paintdata_slug187 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug187, 28);
        SkReadBuffer paintbuffer_slug187 = SkReadBuffer(paintdata_slug187, 28);
        SkPaint paint_slug187 = SkPaintPriv::Unflatten(paintbuffer_slug187);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect195 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect195, 28);
        SkReadBuffer paintBuffer_rect195(paintdata_rect195, 28);
        SkPaint paintRect195 = SkPaintPriv::Unflatten(paintBuffer_rect195);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect196 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect196, 28);
        SkReadBuffer paintBuffer_rect196(paintdata_rect196, 28);
        SkPaint paintRect196 = SkPaintPriv::Unflatten(paintBuffer_rect196);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -606.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 606.000000, 1344.000000, 1214.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect192);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect193);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect194);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug175->draw(canvas, paint_slug175);
        slug175->draw(canvas);
        free(paintdata_slug175);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug176->draw(canvas, paint_slug176);
        slug176->draw(canvas);
        free(paintdata_slug176);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug177->draw(canvas, paint_slug177);
        slug177->draw(canvas);
        free(paintdata_slug177);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug178->draw(canvas, paint_slug178);
        slug178->draw(canvas);
        free(paintdata_slug178);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug179->draw(canvas, paint_slug179);
        slug179->draw(canvas);
        free(paintdata_slug179);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug180->draw(canvas, paint_slug180);
        slug180->draw(canvas);
        free(paintdata_slug180);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug181->draw(canvas, paint_slug181);
        slug181->draw(canvas);
        free(paintdata_slug181);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug182->draw(canvas, paint_slug182);
        slug182->draw(canvas);
        free(paintdata_slug182);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug183->draw(canvas, paint_slug183);
        slug183->draw(canvas);
        free(paintdata_slug183);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug184->draw(canvas, paint_slug184);
        slug184->draw(canvas);
        free(paintdata_slug184);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug185->draw(canvas, paint_slug185);
        slug185->draw(canvas);
        free(paintdata_slug185);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage4)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(799.000000, 696.000000, 855.000000, 752.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage4);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug186->draw(canvas, paint_slug186);
        slug186->draw(canvas);
        free(paintdata_slug186);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug187->draw(canvas, paint_slug187);
        slug187->draw(canvas);
        free(paintdata_slug187);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect195);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect196);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 3E8F3D4370FF5C06D70F960E9D49EDED_1759762419112048.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest34, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect197 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect197, 28);
        SkReadBuffer paintBuffer_rect197(paintdata_rect197, 28);
        SkPaint paintRect197 = SkPaintPriv::Unflatten(paintBuffer_rect197);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect198 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect198, 28);
        SkReadBuffer paintBuffer_rect198(paintdata_rect198, 28);
        SkPaint paintRect198 = SkPaintPriv::Unflatten(paintBuffer_rect198);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect199 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect199, 28);
        SkReadBuffer paintBuffer_rect199(paintdata_rect199, 28);
        SkPaint paintRect199 = SkPaintPriv::Unflatten(paintBuffer_rect199);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect200 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect200, 28);
        SkReadBuffer paintBuffer_rect200(paintdata_rect200, 28);
        SkPaint paintRect200 = SkPaintPriv::Unflatten(paintBuffer_rect200);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect201 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect201, 28);
        SkReadBuffer paintBuffer_rect201(paintdata_rect201, 28);
        SkPaint paintRect201 = SkPaintPriv::Unflatten(paintBuffer_rect201);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data188 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000484200000000000000000000803f00005042000080400000e04200004042010000000000504200008040824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data188, 228);
        auto slug188 = sktext::gpu::Slug::Deserialize(data188, 228);
        free(data188);
        void *paintdata_slug188 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug188, 28);
        SkReadBuffer paintbuffer_slug188 = SkReadBuffer(paintdata_slug188, 28);
        SkPaint paint_slug188 = SkPaintPriv::Unflatten(paintbuffer_slug188);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data189 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000284200000000000000000000803f00001143000000410000754300002c4204000000000011430000004100002d4300001041000047430000104100005e4300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data189, 264);
        auto slug189 = sktext::gpu::Slug::Deserialize(data189, 264);
        free(data189);
        void *paintdata_slug189 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug189, 28);
        SkReadBuffer paintbuffer_slug189 = SkReadBuffer(paintdata_slug189, 28);
        SkPaint paint_slug189 = SkPaintPriv::Unflatten(paintbuffer_slug189);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data190 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f0080ac43000000c00080c94300005c42010000000080ac43000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data190, 228);
        auto slug190 = sktext::gpu::Slug::Deserialize(data190, 228);
        free(data190);
        void *paintdata_slug190 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug190, 28);
        SkReadBuffer paintbuffer_slug190 = SkReadBuffer(paintdata_slug190, 28);
        SkPaint paint_slug190 = SkPaintPriv::Unflatten(paintbuffer_slug190);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data191 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000284200000000000000000000803f0000d443000000410080024400002c42040000000000d443000010410000e043000000410000ed43000010410080f94300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data191, 264);
        auto slug191 = sktext::gpu::Slug::Deserialize(data191, 264);
        free(data191);
        void *paintdata_slug191 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug191, 28);
        SkReadBuffer paintbuffer_slug191 = SkReadBuffer(paintdata_slug191, 28);
        SkPaint paint_slug191 = SkPaintPriv::Unflatten(paintbuffer_slug191);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data192 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f00801b44000000c00080294400005c420100000000801b44000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data192, 228);
        auto slug192 = sktext::gpu::Slug::Deserialize(data192, 228);
        free(data192);
        void *paintdata_slug192 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug192, 28);
        SkReadBuffer paintbuffer_slug192 = SkReadBuffer(paintdata_slug192, 28);
        SkPaint paint_slug192 = SkPaintPriv::Unflatten(paintbuffer_slug192);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data193 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00002e440000004100003d4400002c420300000000002e440000104100c03444000014420040374400000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00c03d440000c04000404844000034420100000000c03d440000c0406f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data193, 412);
        auto slug193 = sktext::gpu::Slug::Deserialize(data193, 412);
        free(data193);
        void *paintdata_slug193 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug193, 28);
        SkReadBuffer paintbuffer_slug193 = SkReadBuffer(paintdata_slug193, 28);
        SkPaint paint_slug193 = SkPaintPriv::Unflatten(paintbuffer_slug193);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data194 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f00a096440000d04100c09b44000004420100000000a096440000d041675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data194, 228);
        auto slug194 = sktext::gpu::Slug::Deserialize(data194, 228);
        free(data194);
        void *paintdata_slug194 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug194, 28);
        SkReadBuffer paintbuffer_slug194 = SkReadBuffer(paintdata_slug194, 28);
        SkPaint paint_slug194 = SkPaintPriv::Unflatten(paintbuffer_slug194);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data195 = malloc(288);
        hexToRawData("0000803f000028c2050092430000a040000044430040e944380100000000803f0000000000004443000000000000803f0000634300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000634300000000000000000000803f00004543000039430000f44300006843060000000000454300003943000077430000394300009643000039430080ac43000039430000c64300003b430080dd4300003c4365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000c43c010020a8010094110100d8910000e098000000aa0000", data195, 288);
        auto slug195 = sktext::gpu::Slug::Deserialize(data195, 288);
        free(data195);
        void *paintdata_slug195 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug195, 28);
        SkReadBuffer paintbuffer_slug195 = SkReadBuffer(paintdata_slug195, 28);
        SkPaint paint_slug195 = SkPaintPriv::Unflatten(paintbuffer_slug195);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data196 = malloc(324);
        hexToRawData("0000803f0000e8c1baab3f43000000000000444300e0f044680100000000803f0000000000004443000000000000803f0000904300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000904300000000000000000000803f00004543008081430080c1430000904309000000000045430080814300005c430000894300006e43008081430000824300808143000093430080814300009e43008081430080a843000084430000ad43008081430000b84300808143f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000080a0000800c0000ef090000070a0000e8090000e8090000700c0000e7090000070a0000", data196, 324);
        auto slug196 = sktext::gpu::Slug::Deserialize(data196, 324);
        free(data196);
        void *paintdata_slug196 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug196, 28);
        SkReadBuffer paintbuffer_slug196 = SkReadBuffer(paintdata_slug196, 28);
        SkPaint paint_slug196 = SkPaintPriv::Unflatten(paintbuffer_slug196);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data197 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c24300e0f044200200000000803f000000000050c243000000000000803f0000904300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0000c84300007e430080eb4300009243020000000000c84300007f430080dd4300007e43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0080f34300007f430080294400009243050000000080f34300007f430080034400007f4300c00d440080804300001744008080430040204400007f43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data197, 448);
        auto slug197 = sktext::gpu::Slug::Deserialize(data197, 448);
        free(data197);
        void *paintdata_slug197 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug197, 28);
        SkReadBuffer paintbuffer_slug197 = SkReadBuffer(paintdata_slug197, 28);
        SkPaint paint_slug197 = SkPaintPriv::Unflatten(paintbuffer_slug197);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data198 = malloc(468);
        hexToRawData("0000803f000040c200a09244000010410000604200600045280200000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f000064420080b74300a099440000d44315000000000064420000b8430000e4420080b94300002a430000b843000066430080b74300008d430080b7430000ac430080c0430000c6430000b8430000e1430080b7430080fd430080b74300c00c440000b84300401a440080b743008028440000b943004036440000b843004044440080b743008052440080b743008060440000b84300806e440000b84300007e440080cc43002085440080b84300408c440080b743002093440080b743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000ac7800004cea0000389a0100b8d80000906c0100a4c3010054780000f4850000f8890000a8750000b48001007cd500006cd90000f479000020f4000080ee000098850000a8c30100f88c000054da0000048c0000", data198, 468);
        auto slug198 = sktext::gpu::Slug::Deserialize(data198, 468);
        free(data198);
        void *paintdata_slug198 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug198, 28);
        SkReadBuffer paintbuffer_slug198 = SkReadBuffer(paintdata_slug198, 28);
        SkPaint paint_slug198 = SkPaintPriv::Unflatten(paintbuffer_slug198);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data199 = malloc(468);
        hexToRawData("0000803f000040c200c09244000010410000604200a00545280200000000803f0000000000006042000000000000803f0080f94300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080f94300000000000000000000803f000064420080e14300c099440000fe4315000000000064420000e3430000e6420080e14300002b430000e243000061430000e24300808c430080e1430000a9430080e1430000c5430000e2430000e2430080e1430000fd430000e24300800c440000e34300c01a440000e343008028440000e443000038440080f643004044440000e24300c052440000e343008060440000e44300806e440080e14300407c440080e143006085440000e34300408c440080e343002093440000e243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000800b0100f8890000a87500006cd90000f479000020f4000080ee0000d0160100608200007cd50000208e000054b40000a8c30100e8c60000208e000054b40000fceb000068750000e0d8000088b60000e4ca0000", data199, 468);
        auto slug199 = sktext::gpu::Slug::Deserialize(data199, 468);
        free(data199);
        void *paintdata_slug199 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug199, 28);
        SkReadBuffer paintbuffer_slug199 = SkReadBuffer(paintdata_slug199, 28);
        SkPaint paint_slug199 = SkPaintPriv::Unflatten(paintbuffer_slug199);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data200 = malloc(496);
        hexToRawData("0000a040000040c206410244000010410000604200e00a45600200000000803f0000000000006042000000000000803f00c0114400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f000074420040074400002243000012440300000000007442008007440000b442004007440000f04200400744eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f00002b4300c0054400401044000014440800000000002b430040104400005c430000064400008a4300c005440000a643008006440080c243004006440000de4300c005440080fa4300c0064400400c4400000f44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000a8c3010018780000048c0000800b010044ef0000e4d8000060110100b0c60100", data200, 496);
        auto slug200 = sktext::gpu::Slug::Deserialize(data200, 496);
        free(data200);
        void *paintdata_slug200 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug200, 28);
        SkReadBuffer paintbuffer_slug200 = SkReadBuffer(paintdata_slug200, 28);
        SkPaint paint_slug200 = SkPaintPriv::Unflatten(paintbuffer_slug200);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect46 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect46, 28);
        SkReadBuffer paintBuffer_rrect46(paintdata_rrect46, 28);
        SkPaint paintRRect46 = SkPaintPriv::Unflatten(paintBuffer_rrect46);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage5;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage5.allocPixels(ii);
        SkCanvas tmp(fakeImage5);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage6;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage6.allocPixels(ii);
        SkCanvas tmp(fakeImage6);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect47 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect47, 28);
        SkReadBuffer paintBuffer_rrect47(paintdata_rrect47, 28);
        SkPaint paintRRect47 = SkPaintPriv::Unflatten(paintBuffer_rrect47);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata10 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata10, 92);
        SkPath path10;
        path10.readFromMemory(pathdata10, 92);
        void *paintdata_path10 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path10, 28);
        SkReadBuffer paintBuffer_path10(paintdata_path10, 28);
        SkPaint paintPath10 = SkPaintPriv::Unflatten(paintBuffer_path10);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage7;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage7.allocPixels(ii);
        SkCanvas tmp(fakeImage7);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1344.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect197);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect198);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect199);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect200);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect201);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug188->draw(canvas, paint_slug188);
        slug188->draw(canvas);
        free(paintdata_slug188);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug189->draw(canvas, paint_slug189);
        slug189->draw(canvas);
        free(paintdata_slug189);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug190->draw(canvas, paint_slug190);
        slug190->draw(canvas);
        free(paintdata_slug190);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug191->draw(canvas, paint_slug191);
        slug191->draw(canvas);
        free(paintdata_slug191);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug192->draw(canvas, paint_slug192);
        slug192->draw(canvas);
        free(paintdata_slug192);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug193->draw(canvas, paint_slug193);
        slug193->draw(canvas);
        free(paintdata_slug193);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug194->draw(canvas, paint_slug194);
        slug194->draw(canvas);
        free(paintdata_slug194);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug195->draw(canvas, paint_slug195);
        slug195->draw(canvas);
        free(paintdata_slug195);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1885.000000, 1274.000000, 1943.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug196->draw(canvas, paint_slug196);
        slug196->draw(canvas);
        free(paintdata_slug196);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug197->draw(canvas, paint_slug197);
        slug197->draw(canvas);
        free(paintdata_slug197);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug198->draw(canvas, paint_slug198);
        slug198->draw(canvas);
        free(paintdata_slug198);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug199->draw(canvas, paint_slug199);
        slug199->draw(canvas);
        free(paintdata_slug199);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug200->draw(canvas, paint_slug200);
        slug200->draw(canvas);
        free(paintdata_slug200);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect46);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage5)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage5);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage6)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(514.000000, 1824.000000, 577.000000, 1873.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage6);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect47);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path10, paintPath10);
        free(pathdata10);
        free(paintdata_path10);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage7)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage7);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762419115728.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest35, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect202 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect202, 28);
        SkReadBuffer paintBuffer_rect202(paintdata_rect202, 28);
        SkPaint paintRect202 = SkPaintPriv::Unflatten(paintBuffer_rect202);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect203 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect203, 28);
        SkReadBuffer paintBuffer_rect203(paintdata_rect203, 28);
        SkPaint paintRect203 = SkPaintPriv::Unflatten(paintBuffer_rect203);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect204 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect204, 28);
        SkReadBuffer paintBuffer_rect204(paintdata_rect204, 28);
        SkPaint paintRect204 = SkPaintPriv::Unflatten(paintBuffer_rect204);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data201 = malloc(468);
        hexToRawData("0000803f000040c200e09244000010410000604200601545280200000000803f0000000000006042000000000000803f0000114300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000114300000000000000000000803f000064420000c24200e0994400001a4315000000000064420000c6420000e4420000c242000029430000c442000063430000c24200008e430000ca420000ac4300000b430000c5430000ca420000e1430000c2420000fd430000c44200c00c440000c84200801a440000cc4200002a4400000b43008036440000c242008044440000c442008052440000ca42008060440000c2420000704400000b4300807c440000c242004085440000c24200408c440000c242004093440000c442ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000f88c000054da000018780000a4d10000d8760000a8c30100f474000020f4000080ee0000208e000054b40000a8c3010020f4000080ee000088b6000060800100a8c30100fceb000090b6000020f4000080ee0000", data201, 468);
        auto slug201 = sktext::gpu::Slug::Deserialize(data201, 468);
        free(data201);
        void *paintdata_slug201 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug201, 28);
        SkReadBuffer paintbuffer_slug201 = SkReadBuffer(paintdata_slug201, 28);
        SkPaint paint_slug201 = SkPaintPriv::Unflatten(paintbuffer_slug201);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data202 = malloc(628);
        hexToRawData("0000a040000044c283209244000010410000604200a01a45100300000000803f0000000000006042000000000000803f0000654300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0000654300000000000000000000803f0000744200003b430000224300006643030000000000744200003c430000b44200003b430000f04200003b43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f0000654300000000000000000000803f00002743000034430020994400006e4313000000000027430000354300005d430000394300808a43000035430080a84300005a430000c243000035430000df43000035430080fb430000394300c00b4400003643000019440000374300c0284400005f4300003544000036430000434400003543000051440000384300005f440000354300006d440000354300407b4400003543008084440000354300808b44000035430080924400003443ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43013000000d016010088b6000060800100b0c60100287e0000f0aa0000d876000054780000f88c0000a8c3010018780000048c0000800b010090d2000068750000d0370100dc37010084ad0000208c0000", data202, 628);
        auto slug202 = sktext::gpu::Slug::Deserialize(data202, 628);
        free(data202);
        void *paintdata_slug202 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug202, 28);
        SkReadBuffer paintbuffer_slug202 = SkReadBuffer(paintdata_slug202, 28);
        SkPaint paint_slug202 = SkPaintPriv::Unflatten(paintbuffer_slug202);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data203 = malloc(468);
        hexToRawData("00008040000040c200c09244000010410000604200e01f45280200000000803f0000000000006042000000000000803f00809c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f00809c4300000000000000000000803f000070420080844300c099440000a1431500000000007042008086430000f0420080994300002943008084430000624300808f4300808c43008084430000a943008084430080c443008084430000e143000085430080fc430080844300400c440080844300801a4400808f430080284400808443008036440080844300404444008084430000544400809943004060440000854300806e440000854300407c4400008543004085440000864300208c44008084430020934400808443ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000d8760000a8c30100e4d80000c074000068750000b4a200001cb70000bc92010084ad0000e4d80000c074000098ab0000b4a200001cb70000a8c30100407a0000e4810000e8c600004c7f0100687500001cb70000", data203, 468);
        auto slug203 = sktext::gpu::Slug::Deserialize(data203, 468);
        free(data203);
        void *paintdata_slug203 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug203, 28);
        SkReadBuffer paintbuffer_slug203 = SkReadBuffer(paintdata_slug203, 28);
        SkPaint paint_slug203 = SkPaintPriv::Unflatten(paintbuffer_slug203);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data204 = malloc(468);
        hexToRawData("00004040000040c200e09244000010410000604200202545280200000000803f0000000000006042000000000000803f0080c64300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080c64300000000000000000000803f00006c420080ae4300e099440000cb431500000000006c420000b0430000e6420000b043000029430000af43000062430000b04300808c430000b0430000a9430000b0430080c4430080af430000e2430080ae43000000440080c34300800c440080af4300401a440080ae43004028440000af43004036440000af43008044440080ae43008052440080ae43008061440000c14300406e440000af4300007d440000af43004085440000af4300a08c440000b043004093440080ae43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000208e0000d0b800001cbb0000c4620100acea0000c4620100acf10000d0160100a8c3010044ef0000e4d80000ac780000147a0000fcc00000e4750000b0c60100c0c50000547800004c4e0100f8d40000400c0100", data204, 468);
        auto slug204 = sktext::gpu::Slug::Deserialize(data204, 468);
        free(data204);
        void *paintdata_slug204 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug204, 28);
        SkReadBuffer paintbuffer_slug204 = SkReadBuffer(paintdata_slug204, 28);
        SkPaint paint_slug204 = SkPaintPriv::Unflatten(paintbuffer_slug204);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data205 = malloc(448);
        hexToRawData("00000040000040c2fa7e89430000a0400000604200602a45200200000000803f0000000000006042000000000000803f0080f04300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0080f04300000000000000000000803f000068420080d843000089430000f34304000000000068420080d8430000e8420080da4300002a430080e343000061430080d843ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000906c0100d8760000c0740000548c00000100000000000000010000000000803f0000000000006042000000000000803f0080f04300000000000000000000803f000095430000ed430080a5430000f14303000000000095430000ed4300809b430000ed430000a2430000ed43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f80b0000f80b0000f80b0000", data205, 448);
        auto slug205 = sktext::gpu::Slug::Deserialize(data205, 448);
        free(data205);
        void *paintdata_slug205 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug205, 28);
        SkReadBuffer paintbuffer_slug205 = SkReadBuffer(paintdata_slug205, 28);
        SkPaint paint_slug205 = SkPaintPriv::Unflatten(paintbuffer_slug205);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data206 = malloc(240);
        hexToRawData("00000040000040c20000dc420000a04000f8a64300602a45f80000000000803f0000000000f8a643000000000000803f0080f04300000000000000000000803f010000000100000000000000010000000000803f0000000000f8a643000000000000803f0080f04300000000000000000000803f0000a8430080d8430000de430000f343020000000000a8430000d9430000c4430080d843c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300200000060820000dcd20000", data206, 240);
        auto slug206 = sktext::gpu::Slug::Deserialize(data206, 240);
        free(data206);
        void *paintdata_slug206 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug206, 28);
        SkReadBuffer paintbuffer_slug206 = SkReadBuffer(paintdata_slug206, 28);
        SkPaint paint_slug206 = SkPaintPriv::Unflatten(paintbuffer_slug206);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect205 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect205, 28);
        SkReadBuffer paintBuffer_rect205(paintdata_rect205, 28);
        SkPaint paintRect205 = SkPaintPriv::Unflatten(paintBuffer_rect205);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage8;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(291, 270);
        fakeImage8.allocPixels(ii);
        SkCanvas tmp(fakeImage8);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 291, 270), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -2424.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 2424.000000, 1344.000000, 3032.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect202);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect203);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect204);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug201->draw(canvas, paint_slug201);
        slug201->draw(canvas);
        free(paintdata_slug201);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug202->draw(canvas, paint_slug202);
        slug202->draw(canvas);
        free(paintdata_slug202);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug203->draw(canvas, paint_slug203);
        slug203->draw(canvas);
        free(paintdata_slug203);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug204->draw(canvas, paint_slug204);
        slug204->draw(canvas);
        free(paintdata_slug204);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug205->draw(canvas, paint_slug205);
        slug205->draw(canvas);
        free(paintdata_slug205);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug206->draw(canvas, paint_slug206);
        slug206->draw(canvas);
        free(paintdata_slug206);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 2784.000000, 1274.000000, 3198.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2784.000000, 453.000000, 3181.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect205);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage8)
    //    break;
    SkRect src = SkRect::MakeLTRB(10.222483, 0.000000, 280.777496, 270.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 2784.000000, 453.000000, 3181.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage8);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 4A96AA84C6F9086A08F383C2A37C98A7_1759762419132107.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest36, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect206 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect206, 28);
        SkReadBuffer paintBuffer_rect206(paintdata_rect206, 28);
        SkPaint paintRect206 = SkPaintPriv::Unflatten(paintBuffer_rect206);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect207 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect207, 28);
        SkReadBuffer paintBuffer_rect207(paintdata_rect207, 28);
        SkPaint paintRect207 = SkPaintPriv::Unflatten(paintBuffer_rect207);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect208 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect208, 28);
        SkReadBuffer paintBuffer_rect208(paintdata_rect208, 28);
        SkPaint paintRect208 = SkPaintPriv::Unflatten(paintBuffer_rect208);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect209 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect209, 28);
        SkReadBuffer paintBuffer_rect209(paintdata_rect209, 28);
        SkPaint paintRect209 = SkPaintPriv::Unflatten(paintBuffer_rect209);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect210 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect210, 28);
        SkReadBuffer paintBuffer_rect210(paintdata_rect210, 28);
        SkPaint paintRect210 = SkPaintPriv::Unflatten(paintBuffer_rect210);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data207 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000484200000000000000000000803f00005042000080400000e04200004042010000000000504200008040824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data207, 228);
        auto slug207 = sktext::gpu::Slug::Deserialize(data207, 228);
        free(data207);
        void *paintdata_slug207 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug207, 28);
        SkReadBuffer paintbuffer_slug207 = SkReadBuffer(paintdata_slug207, 28);
        SkPaint paint_slug207 = SkPaintPriv::Unflatten(paintbuffer_slug207);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data208 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000284200000000000000000000803f00001143000000410000754300002c4204000000000011430000004100002d4300001041000047430000104100005e4300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data208, 264);
        auto slug208 = sktext::gpu::Slug::Deserialize(data208, 264);
        free(data208);
        void *paintdata_slug208 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug208, 28);
        SkReadBuffer paintbuffer_slug208 = SkReadBuffer(paintdata_slug208, 28);
        SkPaint paint_slug208 = SkPaintPriv::Unflatten(paintbuffer_slug208);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data209 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f0080ac43000000c00080c94300005c42010000000080ac43000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data209, 228);
        auto slug209 = sktext::gpu::Slug::Deserialize(data209, 228);
        free(data209);
        void *paintdata_slug209 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug209, 28);
        SkReadBuffer paintbuffer_slug209 = SkReadBuffer(paintdata_slug209, 28);
        SkPaint paint_slug209 = SkPaintPriv::Unflatten(paintbuffer_slug209);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data210 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000284200000000000000000000803f0000d443000000410080024400002c42040000000000d443000010410000e043000000410000ed43000010410080f94300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data210, 264);
        auto slug210 = sktext::gpu::Slug::Deserialize(data210, 264);
        free(data210);
        void *paintdata_slug210 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug210, 28);
        SkReadBuffer paintbuffer_slug210 = SkReadBuffer(paintdata_slug210, 28);
        SkPaint paint_slug210 = SkPaintPriv::Unflatten(paintbuffer_slug210);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data211 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f00801b44000000c00080294400005c420100000000801b44000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data211, 228);
        auto slug211 = sktext::gpu::Slug::Deserialize(data211, 228);
        free(data211);
        void *paintdata_slug211 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug211, 28);
        SkReadBuffer paintbuffer_slug211 = SkReadBuffer(paintdata_slug211, 28);
        SkPaint paint_slug211 = SkPaintPriv::Unflatten(paintbuffer_slug211);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data212 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00002e440000004100003d4400002c420300000000002e440000104100c03444000014420040374400000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00c03d440000c04000404844000034420100000000c03d440000c0406f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data212, 412);
        auto slug212 = sktext::gpu::Slug::Deserialize(data212, 412);
        free(data212);
        void *paintdata_slug212 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug212, 28);
        SkReadBuffer paintbuffer_slug212 = SkReadBuffer(paintdata_slug212, 28);
        SkPaint paint_slug212 = SkPaintPriv::Unflatten(paintbuffer_slug212);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data213 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f00a096440000d04100c09b44000004420100000000a096440000d041675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data213, 228);
        auto slug213 = sktext::gpu::Slug::Deserialize(data213, 228);
        free(data213);
        void *paintdata_slug213 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug213, 28);
        SkReadBuffer paintbuffer_slug213 = SkReadBuffer(paintdata_slug213, 28);
        SkPaint paint_slug213 = SkPaintPriv::Unflatten(paintbuffer_slug213);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data214 = malloc(288);
        hexToRawData("0000803f000028c2050092430000a040000044430040e944380100000000803f0000000000004443000000000000803f0000634300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000634300000000000000000000803f00004543000039430000f44300006843060000000000454300003943000077430000394300009643000039430080ac43000039430000c64300003b430080dd4300003c4365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000c43c010020a8010094110100d8910000e098000000aa0000", data214, 288);
        auto slug214 = sktext::gpu::Slug::Deserialize(data214, 288);
        free(data214);
        void *paintdata_slug214 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug214, 28);
        SkReadBuffer paintbuffer_slug214 = SkReadBuffer(paintdata_slug214, 28);
        SkPaint paint_slug214 = SkPaintPriv::Unflatten(paintbuffer_slug214);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data215 = malloc(324);
        hexToRawData("0000803f0000e8c1baab3f43000000000000444300e0f044680100000000803f0000000000004443000000000000803f0000904300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000904300000000000000000000803f00004543008081430080c1430000904309000000000045430080814300005c430000894300006e43008081430000824300808143000093430080814300009e43008081430080a843000084430000ad43008081430000b84300808143f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000080a0000800c0000ef090000070a0000e8090000e8090000700c0000e7090000070a0000", data215, 324);
        auto slug215 = sktext::gpu::Slug::Deserialize(data215, 324);
        free(data215);
        void *paintdata_slug215 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug215, 28);
        SkReadBuffer paintbuffer_slug215 = SkReadBuffer(paintdata_slug215, 28);
        SkPaint paint_slug215 = SkPaintPriv::Unflatten(paintbuffer_slug215);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data216 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c24300e0f044200200000000803f000000000050c243000000000000803f0000904300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0000c84300007e430080eb4300009243020000000000c84300007f430080dd4300007e43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0080f34300007f430080294400009243050000000080f34300007f430080034400007f4300c00d440080804300001744008080430040204400007f43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data216, 448);
        auto slug216 = sktext::gpu::Slug::Deserialize(data216, 448);
        free(data216);
        void *paintdata_slug216 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug216, 28);
        SkReadBuffer paintbuffer_slug216 = SkReadBuffer(paintdata_slug216, 28);
        SkPaint paint_slug216 = SkPaintPriv::Unflatten(paintbuffer_slug216);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data217 = malloc(468);
        hexToRawData("0000803f000040c200a09244000010410000604200600045280200000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f000064420080b74300a099440000d44315000000000064420000b8430000e4420080b94300002a430000b843000066430080b74300008d430080b7430000ac430080c0430000c6430000b8430000e1430080b7430080fd430080b74300c00c440000b84300401a440080b743008028440000b943004036440000b843004044440080b743008052440080b743008060440000b84300806e440000b84300007e440080cc43002085440080b84300408c440080b743002093440080b743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000ac7800004cea0000389a0100b8d80000906c0100a4c3010054780000f4850000f8890000a8750000b48001007cd500006cd90000f479000020f4000080ee000098850000a8c30100f88c000054da0000048c0000", data217, 468);
        auto slug217 = sktext::gpu::Slug::Deserialize(data217, 468);
        free(data217);
        void *paintdata_slug217 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug217, 28);
        SkReadBuffer paintbuffer_slug217 = SkReadBuffer(paintdata_slug217, 28);
        SkPaint paint_slug217 = SkPaintPriv::Unflatten(paintbuffer_slug217);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data218 = malloc(468);
        hexToRawData("0000803f000040c200c09244000010410000604200a00545280200000000803f0000000000006042000000000000803f0080f94300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080f94300000000000000000000803f000064420080e14300c099440000fe4315000000000064420000e3430000e6420080e14300002b430000e243000061430000e24300808c430080e1430000a9430080e1430000c5430000e2430000e2430080e1430000fd430000e24300800c440000e34300c01a440000e343008028440000e443000038440080f643004044440000e24300c052440000e343008060440000e44300806e440080e14300407c440080e143006085440000e34300408c440080e343002093440000e243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000800b0100f8890000a87500006cd90000f479000020f4000080ee0000d0160100608200007cd50000208e000054b40000a8c30100e8c60000208e000054b40000fceb000068750000e0d8000088b60000e4ca0000", data218, 468);
        auto slug218 = sktext::gpu::Slug::Deserialize(data218, 468);
        free(data218);
        void *paintdata_slug218 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug218, 28);
        SkReadBuffer paintbuffer_slug218 = SkReadBuffer(paintdata_slug218, 28);
        SkPaint paint_slug218 = SkPaintPriv::Unflatten(paintbuffer_slug218);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data219 = malloc(496);
        hexToRawData("0000a040000040c206410244000010410000604200e00a45600200000000803f0000000000006042000000000000803f00c0114400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f000074420040074400002243000012440300000000007442008007440000b442004007440000f04200400744eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f00002b4300c0054400401044000014440800000000002b430040104400005c430000064400008a4300c005440000a643008006440080c243004006440000de4300c005440080fa4300c0064400400c4400000f44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000a8c3010018780000048c0000800b010044ef0000e4d8000060110100b0c60100", data219, 496);
        auto slug219 = sktext::gpu::Slug::Deserialize(data219, 496);
        free(data219);
        void *paintdata_slug219 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug219, 28);
        SkReadBuffer paintbuffer_slug219 = SkReadBuffer(paintdata_slug219, 28);
        SkPaint paint_slug219 = SkPaintPriv::Unflatten(paintbuffer_slug219);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect48 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect48, 28);
        SkReadBuffer paintBuffer_rrect48(paintdata_rrect48, 28);
        SkPaint paintRRect48 = SkPaintPriv::Unflatten(paintBuffer_rrect48);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage9;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage9.allocPixels(ii);
        SkCanvas tmp(fakeImage9);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage10;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage10.allocPixels(ii);
        SkCanvas tmp(fakeImage10);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect49 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect49, 28);
        SkReadBuffer paintBuffer_rrect49(paintdata_rrect49, 28);
        SkPaint paintRRect49 = SkPaintPriv::Unflatten(paintBuffer_rrect49);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata11 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata11, 92);
        SkPath path11;
        path11.readFromMemory(pathdata11, 92);
        void *paintdata_path11 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path11, 28);
        SkReadBuffer paintBuffer_path11(paintdata_path11, 28);
        SkPaint paintPath11 = SkPaintPriv::Unflatten(paintBuffer_path11);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage11;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage11.allocPixels(ii);
        SkCanvas tmp(fakeImage11);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1316.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect206);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect207);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect208);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect209);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect210);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug207->draw(canvas, paint_slug207);
        slug207->draw(canvas);
        free(paintdata_slug207);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug208->draw(canvas, paint_slug208);
        slug208->draw(canvas);
        free(paintdata_slug208);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug209->draw(canvas, paint_slug209);
        slug209->draw(canvas);
        free(paintdata_slug209);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug210->draw(canvas, paint_slug210);
        slug210->draw(canvas);
        free(paintdata_slug210);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug211->draw(canvas, paint_slug211);
        slug211->draw(canvas);
        free(paintdata_slug211);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug212->draw(canvas, paint_slug212);
        slug212->draw(canvas);
        free(paintdata_slug212);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug213->draw(canvas, paint_slug213);
        slug213->draw(canvas);
        free(paintdata_slug213);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug214->draw(canvas, paint_slug214);
        slug214->draw(canvas);
        free(paintdata_slug214);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1885.000000, 1274.000000, 1943.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug215->draw(canvas, paint_slug215);
        slug215->draw(canvas);
        free(paintdata_slug215);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug216->draw(canvas, paint_slug216);
        slug216->draw(canvas);
        free(paintdata_slug216);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug217->draw(canvas, paint_slug217);
        slug217->draw(canvas);
        free(paintdata_slug217);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug218->draw(canvas, paint_slug218);
        slug218->draw(canvas);
        free(paintdata_slug218);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug219->draw(canvas, paint_slug219);
        slug219->draw(canvas);
        free(paintdata_slug219);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect48);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage9)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage9);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage10)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(514.000000, 1824.000000, 577.000000, 1873.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage10);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect49);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path11, paintPath11);
        free(pathdata11);
        free(paintdata_path11);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage11)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 42.000000, 42.000000, 84.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage11);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762419161109.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest37, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect211 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect211, 28);
        SkReadBuffer paintBuffer_rect211(paintdata_rect211, 28);
        SkPaint paintRect211 = SkPaintPriv::Unflatten(paintBuffer_rect211);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect212 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect212, 28);
        SkReadBuffer paintBuffer_rect212(paintdata_rect212, 28);
        SkPaint paintRect212 = SkPaintPriv::Unflatten(paintBuffer_rect212);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect213 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect213, 28);
        SkReadBuffer paintBuffer_rect213(paintdata_rect213, 28);
        SkPaint paintRect213 = SkPaintPriv::Unflatten(paintBuffer_rect213);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data220 = malloc(656);
        hexToRawData("00000000000040c2edfc16440000a040000060420080f743480300000000803f0000000000006042000000000000803f0000884200000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f000060420000d841000030430000884203000000000060420000d8410000de420000d841000010430000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43003000000a802000031020000310200000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f000036430000a04100801b440000924208000000000036430000a04100006d430000b841000091430000a0410000ad430000a8410000c9430000b8410000e5430000b84100c000440000c04100c00e440000c041c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300800000074750000b49800005ca1000044f800007c71010040830000287700002c8300000100000000000000010000000000803f0000000000006042000000000000803f0000884200000000000000000000803f00001c440000d84100002544000088420100000000001c440000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data220, 656);
        auto slug220 = sktext::gpu::Slug::Deserialize(data220, 656);
        free(data220);
        void *paintdata_slug220 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug220, 28);
        SkReadBuffer paintbuffer_slug220 = SkReadBuffer(paintdata_slug220, 28);
        SkPaint paint_slug220 = SkPaintPriv::Unflatten(paintbuffer_slug220);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data221 = malloc(228);
        hexToRawData("0000804000003cc2000098410000c040000525440080f743e80000000000803f0000000000052544000000000000803f0000884200000000000000000000803f010000000100000000000000010000000000803f0000000000052544000000000000803f0000884200000000000000000000803f000026440000a84100c029440000944201000000000026440000a841ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000fcc40100", data221, 228);
        auto slug221 = sktext::gpu::Slug::Deserialize(data221, 228);
        free(data221);
        void *paintdata_slug221 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug221, 28);
        SkReadBuffer paintbuffer_slug221 = SkReadBuffer(paintdata_slug221, 28);
        SkPaint paint_slug221 = SkPaintPriv::Unflatten(paintbuffer_slug221);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data222 = malloc(484);
        hexToRawData("00000000000040c2ae4706440000a040000533440080f743500200000000803f0000000000053344000000000000803f0000884200000000000000000000803f020000000100000000000000010000000000803f0000000000053344000000000000803f0000884200000000000000000000803f000033440000d84100003c440000884201000000000033440000d8410753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000053344000000000000803f0000884200000000000000000000803f00c03c440000a04100c09c44000092420900000000c03c440000c04100c04a440000a841004058440000a041008066440000b041008074440000a841006081440000a041004088440000a84100408f440000c041004096440000b841c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43009000000ed0a010029e20000598f010025aa0000199f0100f94a01009df40000f18b000041830000", data222, 484);
        auto slug222 = sktext::gpu::Slug::Deserialize(data222, 484);
        free(data222);
        void *paintdata_slug222 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug222, 28);
        SkReadBuffer paintbuffer_slug222 = SkReadBuffer(paintdata_slug222, 28);
        SkPaint paint_slug222 = SkPaintPriv::Unflatten(paintbuffer_slug222);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data223 = malloc(388);
        hexToRawData("00004040000030c20000b842000080400000604200c01044d00100000000803f0000000000006042000000000000803f0000184300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0000184300000000000000000000803f00006c420000d8420000dc4200001c430100000000006c420000d842c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430010000002c8300000100000000000000010000000000803f0000000000006042000000000000803f0000184300000000000000000000803f0000e0420000de420000144300001843010000000000e0420000de420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data223, 388);
        auto slug223 = sktext::gpu::Slug::Deserialize(data223, 388);
        free(data223);
        void *paintdata_slug223 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug223, 28);
        SkReadBuffer paintbuffer_slug223 = SkReadBuffer(paintdata_slug223, 28);
        SkPaint paint_slug223 = SkPaintPriv::Unflatten(paintbuffer_slug223);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data224 = malloc(888);
        hexToRawData("00000040000044c29bc47744000010410020144300c01044900400000000803f0000000000201443000000000000803f0000184300000000000000000000803f040000000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f000016430000ce420000d54300001d4305000000000016430000d242000051430000d242008084430000d24200009f430000d2420080bb430000ce42ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300500000079ca0000698f0000158f00000d7a0000893f01000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f0080e143000012430000e64300002143010000000080e14300001243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000a9c301000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f0080f9430000de4200c01a4400001843030000000080f9430000de4200c00a440000de42000013440000de42eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000a902000032020000320200000100000000000000010000000000803f0000000000201443000000000000803f0000184300000000000000000000803f00401c440000d04200808e44000021430a00000000401c440000d04200002a440000d642008037440000d042004045440000d242004053440000d642004061440000d24200406f440000d84200407d440000d04200a085440000d04200608d4400001243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300a00000075750000b59800005da1000045f800007d7101009df40000f18b00008d8300002d720100a9c30100", data224, 888);
        auto slug224 = sktext::gpu::Slug::Deserialize(data224, 888);
        free(data224);
        void *paintdata_slug224 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug224, 28);
        SkReadBuffer paintbuffer_slug224 = SkReadBuffer(paintdata_slug224, 28);
        SkPaint paint_slug224 = SkPaintPriv::Unflatten(paintbuffer_slug224);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data225 = malloc(228);
        hexToRawData("00000040000030c2000054420000e0408066934400c01044e80000000000803f0000000080669344000000000000803f0000184300000000000000000000803f010000000100000000000000010000000000803f0000000080669344000000000000803f0000184300000000000000000000803f00c093440000d84200009a4400001f430100000000c093440000d8420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000310d0000", data225, 228);
        auto slug225 = sktext::gpu::Slug::Deserialize(data225, 228);
        free(data225);
        void *paintdata_slug225 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug225, 28);
        SkReadBuffer paintbuffer_slug225 = SkReadBuffer(paintdata_slug225, 28);
        SkPaint paint_slug225 = SkPaintPriv::Unflatten(paintbuffer_slug225);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data226 = malloc(252);
        hexToRawData("0000803f000040c2000026430000a0400000604200c02544080100000000803f0000000000006042000000000000803f00006c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f00006c4300000000000000000000803f0000644200003c4300005e4300007143030000000000644200003e430000e44200003d4300002b4300003c43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300300000024aa0000189f0100f84a0100", data226, 252);
        auto slug226 = sktext::gpu::Slug::Deserialize(data226, 252);
        free(data226);
        void *paintdata_slug226 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug226, 28);
        SkReadBuffer paintbuffer_slug226 = SkReadBuffer(paintdata_slug226, 28);
        SkPaint paint_slug226 = SkPaintPriv::Unflatten(paintbuffer_slug226);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data227 = malloc(228);
        hexToRawData("70144e41000024c21c850742000000000000604300c02544e80000000000803f0000000000006043000000000000803f00006c4300000000000000000000803f010000000100000000000000010000000000803f0000000000006043000000000000803f00006c4300000000000000000000803f00006d43000043430000814300006c430100000000006d4300004343eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003c0c0000", data227, 228);
        auto slug227 = sktext::gpu::Slug::Deserialize(data227, 228);
        free(data227);
        void *paintdata_slug227 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug227, 28);
        SkReadBuffer paintbuffer_slug227 = SkReadBuffer(paintdata_slug227, 28);
        SkPaint paint_slug227 = SkPaintPriv::Unflatten(paintbuffer_slug227);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data228 = malloc(596);
        hexToRawData("00000040000040c2e67b9243000010410070804300c02544f80200000000803f0000000000708043000000000000803f00006c4300000000000000000000803f030000000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f008081430000404300009b43000073430100000000808143000040430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000300d00000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f00009d4300003c430000ef43000071430300000000009d43000040430000b94300003d430000d44300003c43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43003000000ee0a01002ae200005a8f01000100000000000000010000000000803f0000000000708043000000000000803f00006c4300000000000000000000803f0080ef43000070430040094400007543030000000080ef43000070430000fb430000704300400344000070430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430030000009e0c00009f0c00009f0c0000", data228, 596);
        auto slug228 = sktext::gpu::Slug::Deserialize(data228, 596);
        free(data228);
        void *paintdata_slug228 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug228, 28);
        SkReadBuffer paintbuffer_slug228 = SkReadBuffer(paintdata_slug228, 28);
        SkPaint paint_slug228 = SkPaintPriv::Unflatten(paintbuffer_slug228);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data229 = malloc(668);
        hexToRawData("c0f5a041000040c2703d3044000010410042094400c02544580300000000803f0000000000420944000000000000803f00006c4300000000000000000000803f030000000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f00400e4400003c4300004444000071430400000000400e4400003d4300801b4400003d4300402a4400003c430080374400003d43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300400000021c5000031400100e1950100410301000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f004045440000434300804a4400006c43010000000040454400004343eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003d0c00000100000000000000010000000000803f0000000000420944000000000000803f00006c4300000000000000000000803f00404b4400003c4300c09c44000075430800000000404b4400003d4300c0584400003c430000674400003c43008076440000664300a0814400003f430080884400003c430000904400003c4300e0964400003f43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000d0b70100ec8b0000bcd10000a8c3010050750000d037010074750000b4980000", data229, 668);
        auto slug229 = sktext::gpu::Slug::Deserialize(data229, 668);
        free(data229);
        void *paintdata_slug229 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug229, 28);
        SkReadBuffer paintbuffer_slug229 = SkReadBuffer(paintdata_slug229, 28);
        SkPaint paint_slug229 = SkPaintPriv::Unflatten(paintbuffer_slug229);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data230 = malloc(372);
        hexToRawData("00000040000040c200c02b440000c0400000604200c03a44a80100000000803f0000000000006042000000000000803f0000a04300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000a04300000000000000000000803f000068420000884300c039440000a3430d00000000006842000088430000e4420000894300002a4300008843000062430000884300008d43008088430080a84300008a430000c543008089430080e14300008a430080fd4300008a4300800d4400809a4300801a440080884300402844000088430000384400808a43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300d000000e47c0100ecc50000d4880000b4cc00009cf40000f08b000040830000287700002c830000b0c6010034220100a8710100b0c30100", data230, 372);
        auto slug230 = sktext::gpu::Slug::Deserialize(data230, 372);
        free(data230);
        void *paintdata_slug230 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug230, 28);
        SkReadBuffer paintbuffer_slug230 = SkReadBuffer(paintdata_slug230, 28);
        SkPaint paint_slug230 = SkPaintPriv::Unflatten(paintbuffer_slug230);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage12;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 42);
        fakeImage12.allocPixels(ii);
        SkCanvas tmp(fakeImage12);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data231 = malloc(300);
        hexToRawData("00004040000040c20000c3430000a0400088574400c03a44480100000000803f0000000000885744000000000000803f0000a04300000000000000000000803f010000000100000000000000010000000000803f0000000000885744000000000000803f0000a04300000000000000000000803f004058440000884300809c440080a24307000000004058440080884300006744008089430000764400008a430000814400808843006088440000884300e08e44000088430000964400008843c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43007000000a977000005ed000055d4000055c70000d116010079bb0000298a0000", data231, 300);
        auto slug231 = sktext::gpu::Slug::Deserialize(data231, 300);
        free(data231);
        void *paintdata_slug231 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug231, 28);
        SkReadBuffer paintbuffer_slug231 = SkReadBuffer(paintdata_slug231, 28);
        SkPaint paint_slug231 = SkPaintPriv::Unflatten(paintbuffer_slug231);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data232 = malloc(240);
        hexToRawData("00000040000040c20000dc420000a0400000604200005144f80000000000803f0000000000006042000000000000803f0080cc4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cc4300000000000000000000803f000068420080b443000026430000cf4302000000000068420080b4430000e2420080b443c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43002000000d8630100049f0100", data232, 240);
        auto slug232 = sktext::gpu::Slug::Deserialize(data232, 240);
        free(data232);
        void *paintdata_slug232 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug232, 28);
        SkReadBuffer paintbuffer_slug232 = SkReadBuffer(paintdata_slug232, 28);
        SkPaint paint_slug232 = SkPaintPriv::Unflatten(paintbuffer_slug232);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect214 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect214, 28);
        SkReadBuffer paintBuffer_rect214(paintdata_rect214, 28);
        SkPaint paintRect214 = SkPaintPriv::Unflatten(paintBuffer_rect214);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect215 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect215, 28);
        SkReadBuffer paintBuffer_rect215(paintdata_rect215, 28);
        SkPaint paintRect215 = SkPaintPriv::Unflatten(paintBuffer_rect215);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage13;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(640, 360);
        fakeImage13.allocPixels(ii);
        SkCanvas tmp(fakeImage13);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 640, 360), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -606.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 606.000000, 1316.000000, 1214.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect211);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect212);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect213);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug220->draw(canvas, paint_slug220);
        slug220->draw(canvas);
        free(paintdata_slug220);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug221->draw(canvas, paint_slug221);
        slug221->draw(canvas);
        free(paintdata_slug221);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug222->draw(canvas, paint_slug222);
        slug222->draw(canvas);
        free(paintdata_slug222);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug223->draw(canvas, paint_slug223);
        slug223->draw(canvas);
        free(paintdata_slug223);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug224->draw(canvas, paint_slug224);
        slug224->draw(canvas);
        free(paintdata_slug224);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug225->draw(canvas, paint_slug225);
        slug225->draw(canvas);
        free(paintdata_slug225);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug226->draw(canvas, paint_slug226);
        slug226->draw(canvas);
        free(paintdata_slug226);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug227->draw(canvas, paint_slug227);
        slug227->draw(canvas);
        free(paintdata_slug227);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug228->draw(canvas, paint_slug228);
        slug228->draw(canvas);
        free(paintdata_slug228);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug229->draw(canvas, paint_slug229);
        slug229->draw(canvas);
        free(paintdata_slug229);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug230->draw(canvas, paint_slug230);
        slug230->draw(canvas);
        free(paintdata_slug230);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage12)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(799.000000, 696.000000, 855.000000, 752.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage12);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug231->draw(canvas, paint_slug231);
        slug231->draw(canvas);
        free(paintdata_slug231);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug232->draw(canvas, paint_slug232);
        slug232->draw(canvas);
        free(paintdata_slug232);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect214);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect215);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage13)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 640.000000, 360.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage13);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 218F6FD22A1503484FF178A07B190261_1759762419164504.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest38, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect216 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect216, 28);
        SkReadBuffer paintBuffer_rect216(paintdata_rect216, 28);
        SkPaint paintRect216 = SkPaintPriv::Unflatten(paintBuffer_rect216);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect217 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect217, 28);
        SkReadBuffer paintBuffer_rect217(paintdata_rect217, 28);
        SkPaint paintRect217 = SkPaintPriv::Unflatten(paintBuffer_rect217);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect218 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect218, 28);
        SkReadBuffer paintBuffer_rect218(paintdata_rect218, 28);
        SkPaint paintRect218 = SkPaintPriv::Unflatten(paintBuffer_rect218);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data233 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000244400000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000244400000000000000000000803f00005042008018440000e04200802344010000000000504200801844824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data233, 228);
        auto slug233 = sktext::gpu::Slug::Deserialize(data233, 228);
        free(data233);
        void *paintdata_slug233 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug233, 28);
        SkReadBuffer paintbuffer_slug233 = SkReadBuffer(paintdata_slug233, 28);
        SkPaint paint_slug233 = SkPaintPriv::Unflatten(paintbuffer_slug233);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data234 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000224400000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000224400000000000000000000803f0000114300801944000075430040224404000000000011430080194400002d4300c019440000474300c0194400005e4300801944b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data234, 264);
        auto slug234 = sktext::gpu::Slug::Deserialize(data234, 264);
        free(data234);
        void *paintdata_slug234 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug234, 28);
        SkReadBuffer paintbuffer_slug234 = SkReadBuffer(paintdata_slug234, 28);
        SkPaint paint_slug234 = SkPaintPriv::Unflatten(paintbuffer_slug234);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data235 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000244400000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000244400000000000000000000803f0080ac43000017440080c94300402544010000000080ac4300001744824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data235, 228);
        auto slug235 = sktext::gpu::Slug::Deserialize(data235, 228);
        free(data235);
        void *paintdata_slug235 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug235, 28);
        SkReadBuffer paintbuffer_slug235 = SkReadBuffer(paintdata_slug235, 28);
        SkPaint paint_slug235 = SkPaintPriv::Unflatten(paintbuffer_slug235);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data236 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000224400000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000224400000000000000000000803f0000d443008019440080024400402244040000000000d44300c019440000e043008019440000ed4300c019440080f94300801944b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data236, 264);
        auto slug236 = sktext::gpu::Slug::Deserialize(data236, 264);
        free(data236);
        void *paintdata_slug236 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug236, 28);
        SkReadBuffer paintbuffer_slug236 = SkReadBuffer(paintdata_slug236, 28);
        SkPaint paint_slug236 = SkPaintPriv::Unflatten(paintbuffer_slug236);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data237 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000244400000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000244400000000000000000000803f00801b440000174400802944004025440100000000801b4400001744824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data237, 228);
        auto slug237 = sktext::gpu::Slug::Deserialize(data237, 228);
        free(data237);
        void *paintdata_slug237 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug237, 28);
        SkReadBuffer paintbuffer_slug237 = SkReadBuffer(paintdata_slug237, 28);
        SkPaint paint_slug237 = SkPaintPriv::Unflatten(paintbuffer_slug237);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data238 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000224400000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000224400000000000000000000803f00002e440080194400003d44004022440300000000002e4400c0194400c0344400c020440040374400801944b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000224400000000000000000000803f00c03d44000019440040484400c022440100000000c03d44000019446f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data238, 412);
        auto slug238 = sktext::gpu::Slug::Deserialize(data238, 412);
        free(data238);
        void *paintdata_slug238 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug238, 28);
        SkReadBuffer paintbuffer_slug238 = SkReadBuffer(paintdata_slug238, 28);
        SkPaint paint_slug238 = SkPaintPriv::Unflatten(paintbuffer_slug238);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data239 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f00c0254400000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f00c0254400000000000000000000803f00a0964400001e4400c09b4400c01f440100000000a0964400001e44675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data239, 228);
        auto slug239 = sktext::gpu::Slug::Deserialize(data239, 228);
        free(data239);
        void *paintdata_slug239 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug239, 28);
        SkReadBuffer paintbuffer_slug239 = SkReadBuffer(paintdata_slug239, 28);
        SkPaint paint_slug239 = SkPaintPriv::Unflatten(paintbuffer_slug239);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect219 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect219, 28);
        SkReadBuffer paintBuffer_rect219(paintdata_rect219, 28);
        SkPaint paintRect219 = SkPaintPriv::Unflatten(paintBuffer_rect219);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect220 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect220, 28);
        SkReadBuffer paintBuffer_rect220(paintdata_rect220, 28);
        SkPaint paintRect220 = SkPaintPriv::Unflatten(paintBuffer_rect220);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage14;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(640, 360);
        fakeImage14.allocPixels(ii);
        SkCanvas tmp(fakeImage14);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 640, 360), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect50 = malloc(28);
        hexToRawData("0000000000008040000000000000000000000000cdcccc3e01030000", paintdata_rrect50, 28);
        SkReadBuffer paintBuffer_rrect50(paintdata_rrect50, 28);
        SkPaint paintRRect50 = SkPaintPriv::Unflatten(paintBuffer_rrect50);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data240 = malloc(228);
        hexToRawData("0000000080e686c2a0c9d34300341b4100d01e4400009e44e80000000000803f0000000000d01e44000000000000803f0000674300000000000000000000803f010000000100000000000000010000000000803f0000000000d01e44000000000000803f0000674300000000000000000000803f00c020440000234300003044000071430100000000c02044000023431a3f826b4c0000000100000063657273380000000d00000000009a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000ffffffff590000000100b4300100000009000000", data240, 228);
        auto slug240 = sktext::gpu::Slug::Deserialize(data240, 228);
        free(data240);
        void *paintdata_slug240 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug240, 28);
        SkReadBuffer paintbuffer_slug240 = SkReadBuffer(paintdata_slug240, 28);
        SkPaint paint_slug240 = SkPaintPriv::Unflatten(paintbuffer_slug240);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect221 = malloc(320);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200f40000000000803f0000000000006042000000000000803f00a0b54400000000000000000000803f10000000536b4c696e6561724772616469656e7400000000b4000000010000a0040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdcc4c3e000000000000000000000000cdcc4c3e44000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f04000000000000008fc2f53c48e17a3f0000803f0000000000000000000000000000fc4200000000000000000000000000000000", paintdata_rect221, 320);
        SkReadBuffer paintBuffer_rect221(paintdata_rect221, 320);
        SkPaint paintRect221 = SkPaintPriv::Unflatten(paintBuffer_rect221);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data241 = malloc(540);
        hexToRawData("00000040000010c258e1564300008040000093420060c144100200000000803f0000000000009342000000000000803f0080004400000000000000000000803f020000000100000000000000010000000000803f0000000000009342000000000000803f0080004400000000000000000000803f000084420000ed430000004300c0024402000000000084420000ed430000b4420080ed43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000002000000ee090000020a00000100000000000000010000000000803f0000000000009342000000000000803f0080004400000000000000000000803f0000e4420080ea430000954300c00344040000000000e4420000ec4300001d430080ea43000045430080ea4300006f430080ea4300b0c1ac800000000200000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000de74000046e9000076cf0000bad10000", data241, 540);
        auto slug241 = sktext::gpu::Slug::Deserialize(data241, 540);
        free(data241);
        void *paintdata_slug241 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug241, 28);
        SkReadBuffer paintbuffer_slug241 = SkReadBuffer(paintdata_slug241, 28);
        SkPaint paint_slug241 = SkPaintPriv::Unflatten(paintbuffer_slug241);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data242 = malloc(316);
        hexToRawData("000000400000f8c11e2ea1420000000000bf92440060c144180100000000803f0000000000bf9244000000000000803f0080004400000000000000000000803f010000000100000000000000010000000000803f0000000000bf9244000000000000803f0080004400000000000000000000803f00e091440000ed4300009e4400c002440400000000e091440000ed4300e094440080ef43002096440000ed43004099440080ed43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000e4090000700c0000ee090000fa090000", data242, 316);
        auto slug242 = sktext::gpu::Slug::Deserialize(data242, 316);
        free(data242);
        void *paintdata_slug242 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug242, 28);
        SkReadBuffer paintbuffer_slug242 = SkReadBuffer(paintdata_slug242, 28);
        SkPaint paint_slug242 = SkPaintPriv::Unflatten(paintbuffer_slug242);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1212.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1212.000000, 1316.000000, 1820.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect216);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect217);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect218);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug233->draw(canvas, paint_slug233);
        slug233->draw(canvas);
        free(paintdata_slug233);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug234->draw(canvas, paint_slug234);
        slug234->draw(canvas);
        free(paintdata_slug234);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug235->draw(canvas, paint_slug235);
        slug235->draw(canvas);
        free(paintdata_slug235);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug236->draw(canvas, paint_slug236);
        slug236->draw(canvas);
        free(paintdata_slug236);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug237->draw(canvas, paint_slug237);
        slug237->draw(canvas);
        free(paintdata_slug237);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug238->draw(canvas, paint_slug238);
        slug238->draw(canvas);
        free(paintdata_slug238);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug239->draw(canvas, paint_slug239);
        slug239->draw(canvas);
        free(paintdata_slug239);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect219);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect220);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage14)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 640.000000, 360.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage14);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(571.000000, 1142.000000, 760.000000, 1331.000000);
        SkVector radii[4] = { { 94.500000,94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect50);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug240->draw(canvas, paint_slug240);
        slug240->draw(canvas);
        free(paintdata_slug240);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1453.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect221);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug241->draw(canvas, paint_slug241);
        slug241->draw(canvas);
        free(paintdata_slug241);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug242->draw(canvas, paint_slug242);
        slug242->draw(canvas);
        free(paintdata_slug242);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762419180889.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest39, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect222 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect222, 28);
        SkReadBuffer paintBuffer_rect222(paintdata_rect222, 28);
        SkPaint paintRect222 = SkPaintPriv::Unflatten(paintBuffer_rect222);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect223 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect223, 28);
        SkReadBuffer paintBuffer_rect223(paintdata_rect223, 28);
        SkPaint paintRect223 = SkPaintPriv::Unflatten(paintBuffer_rect223);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect224 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect224, 28);
        SkReadBuffer paintBuffer_rect224(paintdata_rect224, 28);
        SkPaint paintRect224 = SkPaintPriv::Unflatten(paintBuffer_rect224);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect51 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect51, 28);
        SkReadBuffer paintBuffer_rrect51(paintdata_rrect51, 28);
        SkPaint paintRRect51 = SkPaintPriv::Unflatten(paintBuffer_rrect51);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage15;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage15.allocPixels(ii);
        SkCanvas tmp(fakeImage15);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect52 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect52, 28);
        SkReadBuffer paintBuffer_rrect52(paintdata_rrect52, 28);
        SkPaint paintRRect52 = SkPaintPriv::Unflatten(paintBuffer_rrect52);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata12 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata12, 92);
        SkPath path12;
        path12.readFromMemory(pathdata12, 92);
        void *paintdata_path12 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path12, 28);
        SkReadBuffer paintBuffer_path12(paintdata_path12, 28);
        SkPaint paintPath12 = SkPaintPriv::Unflatten(paintBuffer_path12);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage16;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage16.allocPixels(ii);
        SkCanvas tmp(fakeImage16);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect222);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect223);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect224);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect51);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage15)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage15);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect52);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path12, paintPath12);
        free(pathdata12);
        free(paintdata_path12);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage16)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 84.000000, 42.000000, 126.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage16);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762419186985.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest40, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect225 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect225, 28);
        SkReadBuffer paintBuffer_rect225(paintdata_rect225, 28);
        SkPaint paintRect225 = SkPaintPriv::Unflatten(paintBuffer_rect225);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect226 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect226, 28);
        SkReadBuffer paintBuffer_rect226(paintdata_rect226, 28);
        SkPaint paintRect226 = SkPaintPriv::Unflatten(paintBuffer_rect226);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect227 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect227, 28);
        SkReadBuffer paintBuffer_rect227(paintdata_rect227, 28);
        SkPaint paintRect227 = SkPaintPriv::Unflatten(paintBuffer_rect227);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect53 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect53, 28);
        SkReadBuffer paintBuffer_rrect53(paintdata_rrect53, 28);
        SkPaint paintRRect53 = SkPaintPriv::Unflatten(paintBuffer_rrect53);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage17;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage17.allocPixels(ii);
        SkCanvas tmp(fakeImage17);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect54 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect54, 28);
        SkReadBuffer paintBuffer_rrect54(paintdata_rrect54, 28);
        SkPaint paintRRect54 = SkPaintPriv::Unflatten(paintBuffer_rrect54);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata13 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata13, 92);
        SkPath path13;
        path13.readFromMemory(pathdata13, 92);
        void *paintdata_path13 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path13, 28);
        SkReadBuffer paintBuffer_path13(paintdata_path13, 28);
        SkPaint paintPath13 = SkPaintPriv::Unflatten(paintBuffer_path13);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage18;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage18.allocPixels(ii);
        SkCanvas tmp(fakeImage18);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect225);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect226);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect227);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect53);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage17)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage17);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect54);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path13, paintPath13);
        free(pathdata13);
        free(paintdata_path13);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage18)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 126.000000, 42.000000, 168.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage18);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762419284047.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest41, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect228 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect228, 28);
        SkReadBuffer paintBuffer_rect228(paintdata_rect228, 28);
        SkPaint paintRect228 = SkPaintPriv::Unflatten(paintBuffer_rect228);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect229 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect229, 28);
        SkReadBuffer paintBuffer_rect229(paintdata_rect229, 28);
        SkPaint paintRect229 = SkPaintPriv::Unflatten(paintBuffer_rect229);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect230 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect230, 28);
        SkReadBuffer paintBuffer_rect230(paintdata_rect230, 28);
        SkPaint paintRect230 = SkPaintPriv::Unflatten(paintBuffer_rect230);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect55 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect55, 28);
        SkReadBuffer paintBuffer_rrect55(paintdata_rrect55, 28);
        SkPaint paintRRect55 = SkPaintPriv::Unflatten(paintBuffer_rrect55);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage19;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage19.allocPixels(ii);
        SkCanvas tmp(fakeImage19);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect56 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect56, 28);
        SkReadBuffer paintBuffer_rrect56(paintdata_rrect56, 28);
        SkPaint paintRRect56 = SkPaintPriv::Unflatten(paintBuffer_rrect56);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata14 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata14, 92);
        SkPath path14;
        path14.readFromMemory(pathdata14, 92);
        void *paintdata_path14 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path14, 28);
        SkReadBuffer paintBuffer_path14(paintdata_path14, 28);
        SkPaint paintPath14 = SkPaintPriv::Unflatten(paintBuffer_path14);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage20;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage20.allocPixels(ii);
        SkCanvas tmp(fakeImage20);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect228);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect229);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect230);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect55);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage19)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage19);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect56);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path14, paintPath14);
        free(pathdata14);
        free(paintdata_path14);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage20)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 168.000000, 42.000000, 210.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage20);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762419405316.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest42, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect231 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect231, 28);
        SkReadBuffer paintBuffer_rect231(paintdata_rect231, 28);
        SkPaint paintRect231 = SkPaintPriv::Unflatten(paintBuffer_rect231);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect232 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect232, 28);
        SkReadBuffer paintBuffer_rect232(paintdata_rect232, 28);
        SkPaint paintRect232 = SkPaintPriv::Unflatten(paintBuffer_rect232);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect233 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect233, 28);
        SkReadBuffer paintBuffer_rect233(paintdata_rect233, 28);
        SkPaint paintRect233 = SkPaintPriv::Unflatten(paintBuffer_rect233);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect234 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect234, 28);
        SkReadBuffer paintBuffer_rect234(paintdata_rect234, 28);
        SkPaint paintRect234 = SkPaintPriv::Unflatten(paintBuffer_rect234);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage21;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(640, 360);
        fakeImage21.allocPixels(ii);
        SkCanvas tmp(fakeImage21);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 640, 360), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -606.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 1072.000000, 1274.000000, 1214.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect231);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect232);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect233);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect234);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage21)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 640.000000, 360.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage21);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 3E8F3D4370FF5C06D70F960E9D49EDED_1759762419506315.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest43, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect235 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect235, 28);
        SkReadBuffer paintBuffer_rect235(paintdata_rect235, 28);
        SkPaint paintRect235 = SkPaintPriv::Unflatten(paintBuffer_rect235);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect236 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect236, 28);
        SkReadBuffer paintBuffer_rect236(paintdata_rect236, 28);
        SkPaint paintRect236 = SkPaintPriv::Unflatten(paintBuffer_rect236);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect237 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect237, 28);
        SkReadBuffer paintBuffer_rect237(paintdata_rect237, 28);
        SkPaint paintRect237 = SkPaintPriv::Unflatten(paintBuffer_rect237);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect238 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect238, 28);
        SkReadBuffer paintBuffer_rect238(paintdata_rect238, 28);
        SkPaint paintRect238 = SkPaintPriv::Unflatten(paintBuffer_rect238);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage22;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(640, 360);
        fakeImage22.allocPixels(ii);
        SkCanvas tmp(fakeImage22);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 640, 360), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect57 = malloc(28);
        hexToRawData("0000000000008040000000000000000000000000cdcccc3e01030000", paintdata_rrect57, 28);
        SkReadBuffer paintBuffer_rrect57(paintdata_rrect57, 28);
        SkPaint paintRRect57 = SkPaintPriv::Unflatten(paintBuffer_rrect57);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data243 = malloc(228);
        hexToRawData("0000000080e686c2a0c9d34300341b4100d01e4400009e44e80000000000803f0000000000d01e44000000000000803f0000674300000000000000000000803f010000000100000000000000010000000000803f0000000000d01e44000000000000803f0000674300000000000000000000803f00c020440000234300003044000071430100000000c02044000023431a3f826b4c0000000100000063657273380000000d00000000009a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000ffffffff590000000100b4300100000009000000", data243, 228);
        auto slug243 = sktext::gpu::Slug::Deserialize(data243, 228);
        free(data243);
        void *paintdata_slug243 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug243, 28);
        SkReadBuffer paintbuffer_slug243 = SkReadBuffer(paintdata_slug243, 28);
        SkPaint paint_slug243 = SkPaintPriv::Unflatten(paintbuffer_slug243);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect239 = malloc(320);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200f40000000000803f0000000000006042000000000000803f00a0b54400000000000000000000803f10000000536b4c696e6561724772616469656e7400000000b4000000010000a0040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdcc4c3e000000000000000000000000cdcc4c3e44000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f04000000000000008fc2f53c48e17a3f0000803f0000000000000000000000000000fc4200000000000000000000000000000000", paintdata_rect239, 320);
        SkReadBuffer paintBuffer_rect239(paintdata_rect239, 320);
        SkPaint paintRect239 = SkPaintPriv::Unflatten(paintBuffer_rect239);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data244 = malloc(540);
        hexToRawData("00000040000010c258e1564300008040000093420060c144100200000000803f0000000000009342000000000000803f0080004400000000000000000000803f020000000100000000000000010000000000803f0000000000009342000000000000803f0080004400000000000000000000803f000084420000ed430000004300c0024402000000000084420000ed430000b4420080ed43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000002000000ee090000020a00000100000000000000010000000000803f0000000000009342000000000000803f0080004400000000000000000000803f0000e4420080ea430000954300c00344040000000000e4420000ec4300001d430080ea43000045430080ea4300006f430080ea4300b0c1ac800000000200000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000de74000046e9000076cf0000bad10000", data244, 540);
        auto slug244 = sktext::gpu::Slug::Deserialize(data244, 540);
        free(data244);
        void *paintdata_slug244 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug244, 28);
        SkReadBuffer paintbuffer_slug244 = SkReadBuffer(paintdata_slug244, 28);
        SkPaint paint_slug244 = SkPaintPriv::Unflatten(paintbuffer_slug244);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data245 = malloc(316);
        hexToRawData("000000400000f8c11e2ea1420000000000bf92440060c144180100000000803f0000000000bf9244000000000000803f0080004400000000000000000000803f010000000100000000000000010000000000803f0000000000bf9244000000000000803f0080004400000000000000000000803f00e091440000ed4300009e4400c002440400000000e091440000ed4300e094440080ef43002096440000ed43004099440080ed43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000e4090000700c0000ee090000fa090000", data245, 316);
        auto slug245 = sktext::gpu::Slug::Deserialize(data245, 316);
        free(data245);
        void *paintdata_slug245 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug245, 28);
        SkReadBuffer paintbuffer_slug245 = SkReadBuffer(paintdata_slug245, 28);
        SkPaint paint_slug245 = SkPaintPriv::Unflatten(paintbuffer_slug245);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1212.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 1212.000000, 1274.000000, 1758.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect235);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect236);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect237);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect238);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage22)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 640.000000, 360.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 894.000000, 1274.000000, 1579.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage22);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(571.000000, 1142.000000, 760.000000, 1331.000000);
        SkVector radii[4] = { { 94.500000,94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect57);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug243->draw(canvas, paint_slug243);
        slug243->draw(canvas);
        free(paintdata_slug243);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 1453.000000, 1274.000000, 1579.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect239);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug244->draw(canvas, paint_slug244);
        slug244->draw(canvas);
        free(paintdata_slug244);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug245->draw(canvas, paint_slug245);
        slug245->draw(canvas);
        free(paintdata_slug245);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 3700CA16BE9BC5CF494D5852B375A67D_1759762419507681.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest44, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect240 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect240, 28);
        SkReadBuffer paintBuffer_rect240(paintdata_rect240, 28);
        SkPaint paintRect240 = SkPaintPriv::Unflatten(paintBuffer_rect240);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect241 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect241, 28);
        SkReadBuffer paintBuffer_rect241(paintdata_rect241, 28);
        SkPaint paintRect241 = SkPaintPriv::Unflatten(paintBuffer_rect241);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect242 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect242, 28);
        SkReadBuffer paintBuffer_rect242(paintdata_rect242, 28);
        SkPaint paintRect242 = SkPaintPriv::Unflatten(paintBuffer_rect242);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect58 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect58, 28);
        SkReadBuffer paintBuffer_rrect58(paintdata_rrect58, 28);
        SkPaint paintRRect58 = SkPaintPriv::Unflatten(paintBuffer_rrect58);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage23;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage23.allocPixels(ii);
        SkCanvas tmp(fakeImage23);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect59 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect59, 28);
        SkReadBuffer paintBuffer_rrect59(paintdata_rrect59, 28);
        SkPaint paintRRect59 = SkPaintPriv::Unflatten(paintBuffer_rrect59);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata15 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata15, 92);
        SkPath path15;
        path15.readFromMemory(pathdata15, 92);
        void *paintdata_path15 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path15, 28);
        SkReadBuffer paintBuffer_path15(paintdata_path15, 28);
        SkPaint paintPath15 = SkPaintPriv::Unflatten(paintBuffer_path15);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage24;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage24.allocPixels(ii);
        SkCanvas tmp(fakeImage24);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect240);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect241);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect242);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect58);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage23)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage23);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect59);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path15, paintPath15);
        free(pathdata15);
        free(paintdata_path15);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage24)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 210.000000, 42.000000, 252.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage24);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762419522115.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest45, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect243 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect243, 28);
        SkReadBuffer paintBuffer_rect243(paintdata_rect243, 28);
        SkPaint paintRect243 = SkPaintPriv::Unflatten(paintBuffer_rect243);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect244 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect244, 28);
        SkReadBuffer paintBuffer_rect244(paintdata_rect244, 28);
        SkPaint paintRect244 = SkPaintPriv::Unflatten(paintBuffer_rect244);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect245 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect245, 28);
        SkReadBuffer paintBuffer_rect245(paintdata_rect245, 28);
        SkPaint paintRect245 = SkPaintPriv::Unflatten(paintBuffer_rect245);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect60 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect60, 28);
        SkReadBuffer paintBuffer_rrect60(paintdata_rrect60, 28);
        SkPaint paintRRect60 = SkPaintPriv::Unflatten(paintBuffer_rrect60);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage25;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage25.allocPixels(ii);
        SkCanvas tmp(fakeImage25);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect61 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect61, 28);
        SkReadBuffer paintBuffer_rrect61(paintdata_rrect61, 28);
        SkPaint paintRRect61 = SkPaintPriv::Unflatten(paintBuffer_rrect61);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata16 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata16, 92);
        SkPath path16;
        path16.readFromMemory(pathdata16, 92);
        void *paintdata_path16 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path16, 28);
        SkReadBuffer paintBuffer_path16(paintdata_path16, 28);
        SkPaint paintPath16 = SkPaintPriv::Unflatten(paintBuffer_path16);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage26;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage26.allocPixels(ii);
        SkCanvas tmp(fakeImage26);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect243);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect244);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect245);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect60);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage25)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage25);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect61);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path16, paintPath16);
        free(pathdata16);
        free(paintdata_path16);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage26)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 252.000000, 42.000000, 294.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage26);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762419654204.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest46, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect246 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect246, 28);
        SkReadBuffer paintBuffer_rect246(paintdata_rect246, 28);
        SkPaint paintRect246 = SkPaintPriv::Unflatten(paintBuffer_rect246);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect247 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect247, 28);
        SkReadBuffer paintBuffer_rect247(paintdata_rect247, 28);
        SkPaint paintRect247 = SkPaintPriv::Unflatten(paintBuffer_rect247);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect248 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect248, 28);
        SkReadBuffer paintBuffer_rect248(paintdata_rect248, 28);
        SkPaint paintRect248 = SkPaintPriv::Unflatten(paintBuffer_rect248);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect62 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect62, 28);
        SkReadBuffer paintBuffer_rrect62(paintdata_rrect62, 28);
        SkPaint paintRRect62 = SkPaintPriv::Unflatten(paintBuffer_rrect62);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage27;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage27.allocPixels(ii);
        SkCanvas tmp(fakeImage27);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect63 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect63, 28);
        SkReadBuffer paintBuffer_rrect63(paintdata_rrect63, 28);
        SkPaint paintRRect63 = SkPaintPriv::Unflatten(paintBuffer_rrect63);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata17 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata17, 92);
        SkPath path17;
        path17.readFromMemory(pathdata17, 92);
        void *paintdata_path17 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path17, 28);
        SkReadBuffer paintBuffer_path17(paintdata_path17, 28);
        SkPaint paintPath17 = SkPaintPriv::Unflatten(paintBuffer_path17);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage28;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage28.allocPixels(ii);
        SkCanvas tmp(fakeImage28);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect246);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect247);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect248);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect62);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage27)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage27);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect63);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path17, paintPath17);
        free(pathdata17);
        free(paintdata_path17);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage28)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 294.000000, 42.000000, 336.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage28);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762419778385.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest47, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect249 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect249, 28);
        SkReadBuffer paintBuffer_rect249(paintdata_rect249, 28);
        SkPaint paintRect249 = SkPaintPriv::Unflatten(paintBuffer_rect249);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect250 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect250, 28);
        SkReadBuffer paintBuffer_rect250(paintdata_rect250, 28);
        SkPaint paintRect250 = SkPaintPriv::Unflatten(paintBuffer_rect250);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect251 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect251, 28);
        SkReadBuffer paintBuffer_rect251(paintdata_rect251, 28);
        SkPaint paintRect251 = SkPaintPriv::Unflatten(paintBuffer_rect251);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect64 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect64, 28);
        SkReadBuffer paintBuffer_rrect64(paintdata_rrect64, 28);
        SkPaint paintRRect64 = SkPaintPriv::Unflatten(paintBuffer_rrect64);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage29;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage29.allocPixels(ii);
        SkCanvas tmp(fakeImage29);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect65 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect65, 28);
        SkReadBuffer paintBuffer_rrect65(paintdata_rrect65, 28);
        SkPaint paintRRect65 = SkPaintPriv::Unflatten(paintBuffer_rrect65);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata18 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata18, 92);
        SkPath path18;
        path18.readFromMemory(pathdata18, 92);
        void *paintdata_path18 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path18, 28);
        SkReadBuffer paintBuffer_path18(paintdata_path18, 28);
        SkPaint paintPath18 = SkPaintPriv::Unflatten(paintBuffer_path18);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage30;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage30.allocPixels(ii);
        SkCanvas tmp(fakeImage30);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect249);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect250);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect251);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect64);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage29)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage29);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect65);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path18, paintPath18);
        free(pathdata18);
        free(paintdata_path18);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage30)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 336.000000, 42.000000, 378.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage30);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762419912005.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest48, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect252 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect252, 28);
        SkReadBuffer paintBuffer_rect252(paintdata_rect252, 28);
        SkPaint paintRect252 = SkPaintPriv::Unflatten(paintBuffer_rect252);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect253 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect253, 28);
        SkReadBuffer paintBuffer_rect253(paintdata_rect253, 28);
        SkPaint paintRect253 = SkPaintPriv::Unflatten(paintBuffer_rect253);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect254 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect254, 28);
        SkReadBuffer paintBuffer_rect254(paintdata_rect254, 28);
        SkPaint paintRect254 = SkPaintPriv::Unflatten(paintBuffer_rect254);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect66 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect66, 28);
        SkReadBuffer paintBuffer_rrect66(paintdata_rrect66, 28);
        SkPaint paintRRect66 = SkPaintPriv::Unflatten(paintBuffer_rrect66);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage31;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage31.allocPixels(ii);
        SkCanvas tmp(fakeImage31);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect67 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect67, 28);
        SkReadBuffer paintBuffer_rrect67(paintdata_rrect67, 28);
        SkPaint paintRRect67 = SkPaintPriv::Unflatten(paintBuffer_rrect67);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata19 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata19, 92);
        SkPath path19;
        path19.readFromMemory(pathdata19, 92);
        void *paintdata_path19 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path19, 28);
        SkReadBuffer paintBuffer_path19(paintdata_path19, 28);
        SkPaint paintPath19 = SkPaintPriv::Unflatten(paintBuffer_path19);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage32;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage32.allocPixels(ii);
        SkCanvas tmp(fakeImage32);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect252);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect253);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect254);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect66);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage31)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage31);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect67);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path19, paintPath19);
        free(pathdata19);
        free(paintdata_path19);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage32)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 378.000000, 42.000000, 420.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage32);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762420029138.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest49, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect255 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect255, 28);
        SkReadBuffer paintBuffer_rect255(paintdata_rect255, 28);
        SkPaint paintRect255 = SkPaintPriv::Unflatten(paintBuffer_rect255);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect256 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect256, 28);
        SkReadBuffer paintBuffer_rect256(paintdata_rect256, 28);
        SkPaint paintRect256 = SkPaintPriv::Unflatten(paintBuffer_rect256);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect257 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect257, 28);
        SkReadBuffer paintBuffer_rect257(paintdata_rect257, 28);
        SkPaint paintRect257 = SkPaintPriv::Unflatten(paintBuffer_rect257);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect68 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect68, 28);
        SkReadBuffer paintBuffer_rrect68(paintdata_rrect68, 28);
        SkPaint paintRRect68 = SkPaintPriv::Unflatten(paintBuffer_rrect68);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage33;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage33.allocPixels(ii);
        SkCanvas tmp(fakeImage33);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect69 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect69, 28);
        SkReadBuffer paintBuffer_rrect69(paintdata_rrect69, 28);
        SkPaint paintRRect69 = SkPaintPriv::Unflatten(paintBuffer_rrect69);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata20 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata20, 92);
        SkPath path20;
        path20.readFromMemory(pathdata20, 92);
        void *paintdata_path20 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path20, 28);
        SkReadBuffer paintBuffer_path20(paintdata_path20, 28);
        SkPaint paintPath20 = SkPaintPriv::Unflatten(paintBuffer_path20);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage34;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage34.allocPixels(ii);
        SkCanvas tmp(fakeImage34);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect255);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect256);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect257);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect68);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage33)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage33);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect69);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path20, paintPath20);
        free(pathdata20);
        free(paintdata_path20);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage34)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 420.000000, 42.000000, 462.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage34);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762420163140.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest50, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect258 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect258, 28);
        SkReadBuffer paintBuffer_rect258(paintdata_rect258, 28);
        SkPaint paintRect258 = SkPaintPriv::Unflatten(paintBuffer_rect258);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect259 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect259, 28);
        SkReadBuffer paintBuffer_rect259(paintdata_rect259, 28);
        SkPaint paintRect259 = SkPaintPriv::Unflatten(paintBuffer_rect259);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect260 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect260, 28);
        SkReadBuffer paintBuffer_rect260(paintdata_rect260, 28);
        SkPaint paintRect260 = SkPaintPriv::Unflatten(paintBuffer_rect260);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect70 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect70, 28);
        SkReadBuffer paintBuffer_rrect70(paintdata_rrect70, 28);
        SkPaint paintRRect70 = SkPaintPriv::Unflatten(paintBuffer_rrect70);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage35;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage35.allocPixels(ii);
        SkCanvas tmp(fakeImage35);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect71 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect71, 28);
        SkReadBuffer paintBuffer_rrect71(paintdata_rrect71, 28);
        SkPaint paintRRect71 = SkPaintPriv::Unflatten(paintBuffer_rrect71);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata21 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata21, 92);
        SkPath path21;
        path21.readFromMemory(pathdata21, 92);
        void *paintdata_path21 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path21, 28);
        SkReadBuffer paintBuffer_path21(paintdata_path21, 28);
        SkPaint paintPath21 = SkPaintPriv::Unflatten(paintBuffer_path21);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage36;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage36.allocPixels(ii);
        SkCanvas tmp(fakeImage36);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect258);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect259);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect260);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect70);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage35)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage35);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect71);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path21, paintPath21);
        free(pathdata21);
        free(paintdata_path21);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage36)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 462.000000, 42.000000, 504.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage36);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762420273628.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest51, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect261 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect261, 28);
        SkReadBuffer paintBuffer_rect261(paintdata_rect261, 28);
        SkPaint paintRect261 = SkPaintPriv::Unflatten(paintBuffer_rect261);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect262 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect262, 28);
        SkReadBuffer paintBuffer_rect262(paintdata_rect262, 28);
        SkPaint paintRect262 = SkPaintPriv::Unflatten(paintBuffer_rect262);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect263 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect263, 28);
        SkReadBuffer paintBuffer_rect263(paintdata_rect263, 28);
        SkPaint paintRect263 = SkPaintPriv::Unflatten(paintBuffer_rect263);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect72 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect72, 28);
        SkReadBuffer paintBuffer_rrect72(paintdata_rrect72, 28);
        SkPaint paintRRect72 = SkPaintPriv::Unflatten(paintBuffer_rrect72);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage37;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage37.allocPixels(ii);
        SkCanvas tmp(fakeImage37);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect73 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect73, 28);
        SkReadBuffer paintBuffer_rrect73(paintdata_rrect73, 28);
        SkPaint paintRRect73 = SkPaintPriv::Unflatten(paintBuffer_rrect73);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata22 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata22, 92);
        SkPath path22;
        path22.readFromMemory(pathdata22, 92);
        void *paintdata_path22 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path22, 28);
        SkReadBuffer paintBuffer_path22(paintdata_path22, 28);
        SkPaint paintPath22 = SkPaintPriv::Unflatten(paintBuffer_path22);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage38;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage38.allocPixels(ii);
        SkCanvas tmp(fakeImage38);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect261);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect262);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect263);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect72);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage37)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage37);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect73);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path22, paintPath22);
        free(pathdata22);
        free(paintdata_path22);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage38)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 504.000000, 42.000000, 546.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage38);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762420404403.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest52, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect264 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect264, 28);
        SkReadBuffer paintBuffer_rect264(paintdata_rect264, 28);
        SkPaint paintRect264 = SkPaintPriv::Unflatten(paintBuffer_rect264);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect265 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect265, 28);
        SkReadBuffer paintBuffer_rect265(paintdata_rect265, 28);
        SkPaint paintRect265 = SkPaintPriv::Unflatten(paintBuffer_rect265);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect266 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect266, 28);
        SkReadBuffer paintBuffer_rect266(paintdata_rect266, 28);
        SkPaint paintRect266 = SkPaintPriv::Unflatten(paintBuffer_rect266);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect74 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect74, 28);
        SkReadBuffer paintBuffer_rrect74(paintdata_rrect74, 28);
        SkPaint paintRRect74 = SkPaintPriv::Unflatten(paintBuffer_rrect74);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage39;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage39.allocPixels(ii);
        SkCanvas tmp(fakeImage39);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect75 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect75, 28);
        SkReadBuffer paintBuffer_rrect75(paintdata_rrect75, 28);
        SkPaint paintRRect75 = SkPaintPriv::Unflatten(paintBuffer_rrect75);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata23 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata23, 92);
        SkPath path23;
        path23.readFromMemory(pathdata23, 92);
        void *paintdata_path23 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path23, 28);
        SkReadBuffer paintBuffer_path23(paintdata_path23, 28);
        SkPaint paintPath23 = SkPaintPriv::Unflatten(paintBuffer_path23);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage40;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage40.allocPixels(ii);
        SkCanvas tmp(fakeImage40);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect264);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect265);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect266);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect74);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage39)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage39);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect75);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path23, paintPath23);
        free(pathdata23);
        free(paintdata_path23);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage40)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 546.000000, 42.000000, 588.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage40);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762420519905.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest53, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect267 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect267, 28);
        SkReadBuffer paintBuffer_rect267(paintdata_rect267, 28);
        SkPaint paintRect267 = SkPaintPriv::Unflatten(paintBuffer_rect267);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect268 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect268, 28);
        SkReadBuffer paintBuffer_rect268(paintdata_rect268, 28);
        SkPaint paintRect268 = SkPaintPriv::Unflatten(paintBuffer_rect268);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect269 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect269, 28);
        SkReadBuffer paintBuffer_rect269(paintdata_rect269, 28);
        SkPaint paintRect269 = SkPaintPriv::Unflatten(paintBuffer_rect269);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect76 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect76, 28);
        SkReadBuffer paintBuffer_rrect76(paintdata_rrect76, 28);
        SkPaint paintRRect76 = SkPaintPriv::Unflatten(paintBuffer_rrect76);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage41;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage41.allocPixels(ii);
        SkCanvas tmp(fakeImage41);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect77 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect77, 28);
        SkReadBuffer paintBuffer_rrect77(paintdata_rrect77, 28);
        SkPaint paintRRect77 = SkPaintPriv::Unflatten(paintBuffer_rrect77);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata24 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata24, 92);
        SkPath path24;
        path24.readFromMemory(pathdata24, 92);
        void *paintdata_path24 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path24, 28);
        SkReadBuffer paintBuffer_path24(paintdata_path24, 28);
        SkPaint paintPath24 = SkPaintPriv::Unflatten(paintBuffer_path24);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage42;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage42.allocPixels(ii);
        SkCanvas tmp(fakeImage42);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect267);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect268);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect269);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect76);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage41)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage41);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect77);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path24, paintPath24);
        free(pathdata24);
        free(paintdata_path24);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage42)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 588.000000, 42.000000, 630.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage42);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762420653772.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest54, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect270 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect270, 28);
        SkReadBuffer paintBuffer_rect270(paintdata_rect270, 28);
        SkPaint paintRect270 = SkPaintPriv::Unflatten(paintBuffer_rect270);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect271 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect271, 28);
        SkReadBuffer paintBuffer_rect271(paintdata_rect271, 28);
        SkPaint paintRect271 = SkPaintPriv::Unflatten(paintBuffer_rect271);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect272 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect272, 28);
        SkReadBuffer paintBuffer_rect272(paintdata_rect272, 28);
        SkPaint paintRect272 = SkPaintPriv::Unflatten(paintBuffer_rect272);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect273 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect273, 28);
        SkReadBuffer paintBuffer_rect273(paintdata_rect273, 28);
        SkPaint paintRect273 = SkPaintPriv::Unflatten(paintBuffer_rect273);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect274 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect274, 28);
        SkReadBuffer paintBuffer_rect274(paintdata_rect274, 28);
        SkPaint paintRect274 = SkPaintPriv::Unflatten(paintBuffer_rect274);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data246 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400000284200804d45e80000000000803f0000000000002842000000000000803f0080da4300000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0080da4300000000000000000000803f000050420080c3430000e0420080d94301000000000050420080c343824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data246, 228);
        auto slug246 = sktext::gpu::Slug::Deserialize(data246, 228);
        free(data246);
        void *paintdata_slug246 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug246, 28);
        SkReadBuffer paintbuffer_slug246 = SkReadBuffer(paintdata_slug246, 28);
        SkPaint paint_slug246 = SkPaintPriv::Unflatten(paintbuffer_slug246);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data247 = malloc(252);
        hexToRawData("00008040000004c278bd97420000803f00000f4300f04c45080100000000803f0000000000000f43000000000000803f0000d64300000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000d64300000000000000000000803f000013430080c54300005b430080d64303000000000013430080c54300002b430080c543000045430080c543b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000fc090000fb090000", data247, 252);
        auto slug247 = sktext::gpu::Slug::Deserialize(data247, 252);
        free(data247);
        void *paintdata_slug247 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug247, 28);
        SkReadBuffer paintbuffer_slug247 = SkReadBuffer(paintdata_slug247, 28);
        SkPaint paint_slug247 = SkPaintPriv::Unflatten(paintbuffer_slug247);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data248 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a89d4300804d45e80000000000803f0000000000a89d43000000000000803f0080da4300000000000000000000803f010000000100000000000000010000000000803f0000000000a89d43000000000000803f0080da4300000000000000000000803f00809f430080c0430080bc430000dd430100000000809f430080c043824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data248, 228);
        auto slug248 = sktext::gpu::Slug::Deserialize(data248, 228);
        free(data248);
        void *paintdata_slug248 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug248, 28);
        SkReadBuffer paintbuffer_slug248 = SkReadBuffer(paintdata_slug248, 28);
        SkPaint paint_slug248 = SkPaintPriv::Unflatten(paintbuffer_slug248);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data249 = malloc(252);
        hexToRawData("00008040000008c278bd99420000803f000ec54300f04c45080100000000803f00000000000ec543000000000000803f0000d64300000000000000000000803f010000000100000000000000010000000000803f00000000000ec543000000000000803f0000d64300000000000000000000803f0000c7430000c5430080eb430080d643030000000000c7430080c5430000d3430000c5430000e0430080c543b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000f0090000fc090000", data249, 252);
        auto slug249 = sktext::gpu::Slug::Deserialize(data249, 252);
        free(data249);
        void *paintdata_slug249 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug249, 28);
        SkReadBuffer paintbuffer_slug249 = SkReadBuffer(paintdata_slug249, 28);
        SkPaint paint_slug249 = SkPaintPriv::Unflatten(paintbuffer_slug249);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data250 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40009b0d4400804d45e80000000000803f00000000009b0d44000000000000803f0080da4300000000000000000000803f010000000100000000000000010000000000803f00000000009b0d44000000000000803f0080da4300000000000000000000803f00800e440080c04300801c440000dd430100000000800e440080c043824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003a000000", data250, 228);
        auto slug250 = sktext::gpu::Slug::Deserialize(data250, 228);
        free(data250);
        void *paintdata_slug250 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug250, 28);
        SkReadBuffer paintbuffer_slug250 = SkReadBuffer(paintdata_slug250, 28);
        SkPaint paint_slug250 = SkPaintPriv::Unflatten(paintbuffer_slug250);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data251 = malloc(252);
        hexToRawData("0000803f000008c278bd8b420000000000df204400f04c45080100000000803f0000000000df2044000000000000803f0000d64300000000000000000000803f010000000100000000000000010000000000803f0000000000df2044000000000000803f0000d64300000000000000000000803f004021440000c543004032440000d64303000000004021440000c54300c027440000c54300c02e440080c543b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430030000000a0a00000a0a0000e9090000", data251, 252);
        auto slug251 = sktext::gpu::Slug::Deserialize(data251, 252);
        free(data251);
        void *paintdata_slug251 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug251, 28);
        SkReadBuffer paintbuffer_slug251 = SkReadBuffer(paintdata_slug251, 28);
        SkPaint paint_slug251 = SkPaintPriv::Unflatten(paintbuffer_slug251);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data252 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f954400e04d45e80000000000803f00000000809f9544000000000000803f0080dd4300000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0080dd4300000000000000000000803f00a096440000ce4300c09b440080d1430100000000a096440000ce43675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data252, 228);
        auto slug252 = sktext::gpu::Slug::Deserialize(data252, 228);
        free(data252);
        void *paintdata_slug252 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug252, 28);
        SkReadBuffer paintbuffer_slug252 = SkReadBuffer(paintdata_slug252, 28);
        SkPaint paint_slug252 = SkPaintPriv::Unflatten(paintbuffer_slug252);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data253 = malloc(312);
        hexToRawData("0000004000002cc20780c3430000a0400000444300905845580100000000803f0000000000004443000000000000803f0080194400000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0080194400000000000000000000803f0000464300c00e4400c0124400c01a44080000000000464300000f440000764300800f440080944300400f440000ac4300000f440080c54300000f440080dd4300c00e440080f54300000f440040074400000f4465cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430080000001c8a000010f20000508c0000dc91010020ab0000a4d3000078bb0000288a0000", data253, 312);
        auto slug253 = sktext::gpu::Slug::Deserialize(data253, 312);
        free(data253);
        void *paintdata_slug253 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug253, 28);
        SkReadBuffer paintbuffer_slug253 = SkReadBuffer(paintdata_slug253, 28);
        SkPaint paint_slug253 = SkPaintPriv::Unflatten(paintbuffer_slug253);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect275 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect275, 28);
        SkReadBuffer paintBuffer_rect275(paintdata_rect275, 28);
        SkPaint paintRect275 = SkPaintPriv::Unflatten(paintBuffer_rect275);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage43;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(291, 270);
        fakeImage43.allocPixels(ii);
        SkCanvas tmp(fakeImage43);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 291, 270), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect78 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect78, 28);
        SkReadBuffer paintBuffer_rrect78(paintdata_rrect78, 28);
        SkPaint paintRRect78 = SkPaintPriv::Unflatten(paintBuffer_rrect78);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage44;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage44.allocPixels(ii);
        SkCanvas tmp(fakeImage44);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect79 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect79, 28);
        SkReadBuffer paintBuffer_rrect79(paintdata_rrect79, 28);
        SkPaint paintRRect79 = SkPaintPriv::Unflatten(paintBuffer_rrect79);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -3030.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3030.000000, 1344.000000, 3638.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect270);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect271);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect272);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect273);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 5095.000000, 1316.000000, 5098.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect274);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug246->draw(canvas, paint_slug246);
        slug246->draw(canvas);
        free(paintdata_slug246);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug247->draw(canvas, paint_slug247);
        slug247->draw(canvas);
        free(paintdata_slug247);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug248->draw(canvas, paint_slug248);
        slug248->draw(canvas);
        free(paintdata_slug248);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug249->draw(canvas, paint_slug249);
        slug249->draw(canvas);
        free(paintdata_slug249);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug250->draw(canvas, paint_slug250);
        slug250->draw(canvas);
        free(paintdata_slug250);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug251->draw(canvas, paint_slug251);
        slug251->draw(canvas);
        free(paintdata_slug251);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug252->draw(canvas, paint_slug252);
        slug252->draw(canvas);
        free(paintdata_slug252);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 3415.000000, 1274.000000, 3483.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug253->draw(canvas, paint_slug253);
        slug253->draw(canvas);
        free(paintdata_slug253);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 2784.000000, 1274.000000, 3198.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 2784.000000, 453.000000, 3181.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect275);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage43)
    //    break;
    SkRect src = SkRect::MakeLTRB(10.222483, 0.000000, 280.777496, 270.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 2784.000000, 453.000000, 3181.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage43);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 3406.000000, 168.000000, 3518.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect78);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 3406.000000, 168.000000, 3518.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage44)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 3406.000000, 168.000000, 3518.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage44);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 3407.500000, 166.500000, 3516.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect79);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762420671877.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest55, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect276 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect276, 28);
        SkReadBuffer paintBuffer_rect276(paintdata_rect276, 28);
        SkPaint paintRect276 = SkPaintPriv::Unflatten(paintBuffer_rect276);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect277 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect277, 28);
        SkReadBuffer paintBuffer_rect277(paintdata_rect277, 28);
        SkPaint paintRect277 = SkPaintPriv::Unflatten(paintBuffer_rect277);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect278 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect278, 28);
        SkReadBuffer paintBuffer_rect278(paintdata_rect278, 28);
        SkPaint paintRect278 = SkPaintPriv::Unflatten(paintBuffer_rect278);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data254 = malloc(288);
        hexToRawData("0000803f000028c2050092430000a040000044430040e944380100000000803f0000000000004443000000000000803f0000634300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000634300000000000000000000803f00004543000039430000f44300006843060000000000454300003943000077430000394300009643000039430080ac43000039430000c64300003b430080dd4300003c4365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000c43c010020a8010094110100d8910000e098000000aa0000", data254, 288);
        auto slug254 = sktext::gpu::Slug::Deserialize(data254, 288);
        free(data254);
        void *paintdata_slug254 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug254, 28);
        SkReadBuffer paintbuffer_slug254 = SkReadBuffer(paintdata_slug254, 28);
        SkPaint paint_slug254 = SkPaintPriv::Unflatten(paintbuffer_slug254);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data255 = malloc(324);
        hexToRawData("0000803f0000e8c1baab3f43000000000000444300e0f044680100000000803f0000000000004443000000000000803f0000904300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000904300000000000000000000803f00004543008081430080c1430000904309000000000045430080814300005c430000894300006e43008081430000824300808143000093430080814300009e43008081430080a843000084430000ad43008081430000b84300808143f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000080a0000800c0000ef090000070a0000e8090000e8090000700c0000e7090000070a0000", data255, 324);
        auto slug255 = sktext::gpu::Slug::Deserialize(data255, 324);
        free(data255);
        void *paintdata_slug255 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug255, 28);
        SkReadBuffer paintbuffer_slug255 = SkReadBuffer(paintdata_slug255, 28);
        SkPaint paint_slug255 = SkPaintPriv::Unflatten(paintbuffer_slug255);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data256 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c24300e0f044200200000000803f000000000050c243000000000000803f0000904300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0000c84300007e430080eb4300009243020000000000c84300007f430080dd4300007e43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0080f34300007f430080294400009243050000000080f34300007f430080034400007f4300c00d440080804300001744008080430040204400007f43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data256, 448);
        auto slug256 = sktext::gpu::Slug::Deserialize(data256, 448);
        free(data256);
        void *paintdata_slug256 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug256, 28);
        SkReadBuffer paintbuffer_slug256 = SkReadBuffer(paintdata_slug256, 28);
        SkPaint paint_slug256 = SkPaintPriv::Unflatten(paintbuffer_slug256);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect80 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect80, 28);
        SkReadBuffer paintBuffer_rrect80(paintdata_rrect80, 28);
        SkPaint paintRRect80 = SkPaintPriv::Unflatten(paintBuffer_rrect80);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage45;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage45.allocPixels(ii);
        SkCanvas tmp(fakeImage45);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage46;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage46.allocPixels(ii);
        SkCanvas tmp(fakeImage46);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect81 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect81, 28);
        SkReadBuffer paintBuffer_rrect81(paintdata_rrect81, 28);
        SkPaint paintRRect81 = SkPaintPriv::Unflatten(paintBuffer_rrect81);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata25 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata25, 92);
        SkPath path25;
        path25.readFromMemory(pathdata25, 92);
        void *paintdata_path25 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path25, 28);
        SkReadBuffer paintBuffer_path25(paintdata_path25, 28);
        SkPaint paintPath25 = SkPaintPriv::Unflatten(paintBuffer_path25);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage47;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage47.allocPixels(ii);
        SkCanvas tmp(fakeImage47);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 1987.000000, 577.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect276);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect277);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect278);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug254->draw(canvas, paint_slug254);
        slug254->draw(canvas);
        free(paintdata_slug254);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1885.000000, 1274.000000, 1943.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug255->draw(canvas, paint_slug255);
        slug255->draw(canvas);
        free(paintdata_slug255);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug256->draw(canvas, paint_slug256);
        slug256->draw(canvas);
        free(paintdata_slug256);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect80);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage45)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage45);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage46)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(514.000000, 1824.000000, 577.000000, 1873.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage46);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect81);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path25, paintPath25);
        free(pathdata25);
        free(paintdata_path25);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage47)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 630.000000, 42.000000, 672.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage47);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762420770488.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest56, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect279 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect279, 28);
        SkReadBuffer paintBuffer_rect279(paintdata_rect279, 28);
        SkPaint paintRect279 = SkPaintPriv::Unflatten(paintBuffer_rect279);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect280 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect280, 28);
        SkReadBuffer paintBuffer_rect280(paintdata_rect280, 28);
        SkPaint paintRect280 = SkPaintPriv::Unflatten(paintBuffer_rect280);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect281 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect281, 28);
        SkReadBuffer paintBuffer_rect281(paintdata_rect281, 28);
        SkPaint paintRect281 = SkPaintPriv::Unflatten(paintBuffer_rect281);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect82 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect82, 28);
        SkReadBuffer paintBuffer_rrect82(paintdata_rrect82, 28);
        SkPaint paintRRect82 = SkPaintPriv::Unflatten(paintBuffer_rrect82);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage48;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage48.allocPixels(ii);
        SkCanvas tmp(fakeImage48);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect83 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect83, 28);
        SkReadBuffer paintBuffer_rrect83(paintdata_rrect83, 28);
        SkPaint paintRRect83 = SkPaintPriv::Unflatten(paintBuffer_rrect83);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata26 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata26, 92);
        SkPath path26;
        path26.readFromMemory(pathdata26, 92);
        void *paintdata_path26 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path26, 28);
        SkReadBuffer paintBuffer_path26(paintdata_path26, 28);
        SkPaint paintPath26 = SkPaintPriv::Unflatten(paintBuffer_path26);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage49;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage49.allocPixels(ii);
        SkCanvas tmp(fakeImage49);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect279);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect280);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect281);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect82);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage48)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage48);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect83);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path26, paintPath26);
        free(pathdata26);
        free(paintdata_path26);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage49)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage49);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762420903820.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest57, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect282 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect282, 28);
        SkReadBuffer paintBuffer_rect282(paintdata_rect282, 28);
        SkPaint paintRect282 = SkPaintPriv::Unflatten(paintBuffer_rect282);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect283 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect283, 28);
        SkReadBuffer paintBuffer_rect283(paintdata_rect283, 28);
        SkPaint paintRect283 = SkPaintPriv::Unflatten(paintBuffer_rect283);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect284 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect284, 28);
        SkReadBuffer paintBuffer_rect284(paintdata_rect284, 28);
        SkPaint paintRect284 = SkPaintPriv::Unflatten(paintBuffer_rect284);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect84 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect84, 28);
        SkReadBuffer paintBuffer_rrect84(paintdata_rrect84, 28);
        SkPaint paintRRect84 = SkPaintPriv::Unflatten(paintBuffer_rrect84);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage50;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage50.allocPixels(ii);
        SkCanvas tmp(fakeImage50);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect85 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect85, 28);
        SkReadBuffer paintBuffer_rrect85(paintdata_rrect85, 28);
        SkPaint paintRRect85 = SkPaintPriv::Unflatten(paintBuffer_rrect85);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata27 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata27, 92);
        SkPath path27;
        path27.readFromMemory(pathdata27, 92);
        void *paintdata_path27 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path27, 28);
        SkReadBuffer paintBuffer_path27(paintdata_path27, 28);
        SkPaint paintPath27 = SkPaintPriv::Unflatten(paintBuffer_path27);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage51;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage51.allocPixels(ii);
        SkCanvas tmp(fakeImage51);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect282);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect283);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect284);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect84);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage50)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage50);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect85);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path27, paintPath27);
        free(pathdata27);
        free(paintdata_path27);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage51)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 42.000000, 42.000000, 84.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage51);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762421020717.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest58, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect285 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect285, 28);
        SkReadBuffer paintBuffer_rect285(paintdata_rect285, 28);
        SkPaint paintRect285 = SkPaintPriv::Unflatten(paintBuffer_rect285);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect286 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect286, 28);
        SkReadBuffer paintBuffer_rect286(paintdata_rect286, 28);
        SkPaint paintRect286 = SkPaintPriv::Unflatten(paintBuffer_rect286);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect287 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect287, 28);
        SkReadBuffer paintBuffer_rect287(paintdata_rect287, 28);
        SkPaint paintRect287 = SkPaintPriv::Unflatten(paintBuffer_rect287);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect86 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect86, 28);
        SkReadBuffer paintBuffer_rrect86(paintdata_rrect86, 28);
        SkPaint paintRRect86 = SkPaintPriv::Unflatten(paintBuffer_rrect86);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage52;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage52.allocPixels(ii);
        SkCanvas tmp(fakeImage52);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect87 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect87, 28);
        SkReadBuffer paintBuffer_rrect87(paintdata_rrect87, 28);
        SkPaint paintRRect87 = SkPaintPriv::Unflatten(paintBuffer_rrect87);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata28 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata28, 92);
        SkPath path28;
        path28.readFromMemory(pathdata28, 92);
        void *paintdata_path28 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path28, 28);
        SkReadBuffer paintBuffer_path28(paintdata_path28, 28);
        SkPaint paintPath28 = SkPaintPriv::Unflatten(paintBuffer_path28);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage53;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage53.allocPixels(ii);
        SkCanvas tmp(fakeImage53);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect285);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect286);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect287);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect86);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage52)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage52);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect87);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path28, paintPath28);
        free(pathdata28);
        free(paintdata_path28);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage53)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 84.000000, 42.000000, 126.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage53);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762421153745.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest59, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect288 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect288, 28);
        SkReadBuffer paintBuffer_rect288(paintdata_rect288, 28);
        SkPaint paintRect288 = SkPaintPriv::Unflatten(paintBuffer_rect288);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect289 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect289, 28);
        SkReadBuffer paintBuffer_rect289(paintdata_rect289, 28);
        SkPaint paintRect289 = SkPaintPriv::Unflatten(paintBuffer_rect289);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect290 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect290, 28);
        SkReadBuffer paintBuffer_rect290(paintdata_rect290, 28);
        SkPaint paintRect290 = SkPaintPriv::Unflatten(paintBuffer_rect290);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect88 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect88, 28);
        SkReadBuffer paintBuffer_rrect88(paintdata_rrect88, 28);
        SkPaint paintRRect88 = SkPaintPriv::Unflatten(paintBuffer_rrect88);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage54;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage54.allocPixels(ii);
        SkCanvas tmp(fakeImage54);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect89 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect89, 28);
        SkReadBuffer paintBuffer_rrect89(paintdata_rrect89, 28);
        SkPaint paintRRect89 = SkPaintPriv::Unflatten(paintBuffer_rrect89);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata29 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata29, 92);
        SkPath path29;
        path29.readFromMemory(pathdata29, 92);
        void *paintdata_path29 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path29, 28);
        SkReadBuffer paintBuffer_path29(paintdata_path29, 28);
        SkPaint paintPath29 = SkPaintPriv::Unflatten(paintBuffer_path29);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage55;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage55.allocPixels(ii);
        SkCanvas tmp(fakeImage55);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect288);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect289);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect290);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect88);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage54)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage54);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect89);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path29, paintPath29);
        free(pathdata29);
        free(paintdata_path29);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage55)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 126.000000, 42.000000, 168.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage55);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762421270154.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest60, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect291 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect291, 28);
        SkReadBuffer paintBuffer_rect291(paintdata_rect291, 28);
        SkPaint paintRect291 = SkPaintPriv::Unflatten(paintBuffer_rect291);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect292 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect292, 28);
        SkReadBuffer paintBuffer_rect292(paintdata_rect292, 28);
        SkPaint paintRect292 = SkPaintPriv::Unflatten(paintBuffer_rect292);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect293 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect293, 28);
        SkReadBuffer paintBuffer_rect293(paintdata_rect293, 28);
        SkPaint paintRect293 = SkPaintPriv::Unflatten(paintBuffer_rect293);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect90 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect90, 28);
        SkReadBuffer paintBuffer_rrect90(paintdata_rrect90, 28);
        SkPaint paintRRect90 = SkPaintPriv::Unflatten(paintBuffer_rrect90);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage56;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage56.allocPixels(ii);
        SkCanvas tmp(fakeImage56);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect91 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect91, 28);
        SkReadBuffer paintBuffer_rrect91(paintdata_rrect91, 28);
        SkPaint paintRRect91 = SkPaintPriv::Unflatten(paintBuffer_rrect91);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata30 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata30, 92);
        SkPath path30;
        path30.readFromMemory(pathdata30, 92);
        void *paintdata_path30 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path30, 28);
        SkReadBuffer paintBuffer_path30(paintdata_path30, 28);
        SkPaint paintPath30 = SkPaintPriv::Unflatten(paintBuffer_path30);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage57;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage57.allocPixels(ii);
        SkCanvas tmp(fakeImage57);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect291);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect292);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect293);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect90);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage56)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage56);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect91);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path30, paintPath30);
        free(pathdata30);
        free(paintdata_path30);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage57)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 168.000000, 42.000000, 210.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage57);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762421406613.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest61, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect294 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect294, 28);
        SkReadBuffer paintBuffer_rect294(paintdata_rect294, 28);
        SkPaint paintRect294 = SkPaintPriv::Unflatten(paintBuffer_rect294);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect295 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect295, 28);
        SkReadBuffer paintBuffer_rect295(paintdata_rect295, 28);
        SkPaint paintRect295 = SkPaintPriv::Unflatten(paintBuffer_rect295);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect296 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect296, 28);
        SkReadBuffer paintBuffer_rect296(paintdata_rect296, 28);
        SkPaint paintRect296 = SkPaintPriv::Unflatten(paintBuffer_rect296);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect92 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect92, 28);
        SkReadBuffer paintBuffer_rrect92(paintdata_rrect92, 28);
        SkPaint paintRRect92 = SkPaintPriv::Unflatten(paintBuffer_rrect92);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage58;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage58.allocPixels(ii);
        SkCanvas tmp(fakeImage58);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect93 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect93, 28);
        SkReadBuffer paintBuffer_rrect93(paintdata_rrect93, 28);
        SkPaint paintRRect93 = SkPaintPriv::Unflatten(paintBuffer_rrect93);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata31 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata31, 92);
        SkPath path31;
        path31.readFromMemory(pathdata31, 92);
        void *paintdata_path31 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path31, 28);
        SkReadBuffer paintBuffer_path31(paintdata_path31, 28);
        SkPaint paintPath31 = SkPaintPriv::Unflatten(paintBuffer_path31);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage59;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage59.allocPixels(ii);
        SkCanvas tmp(fakeImage59);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect294);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect295);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect296);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect92);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage58)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage58);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect93);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path31, paintPath31);
        free(pathdata31);
        free(paintdata_path31);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage59)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 210.000000, 42.000000, 252.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage59);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762421527671.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest62, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect297 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect297, 28);
        SkReadBuffer paintBuffer_rect297(paintdata_rect297, 28);
        SkPaint paintRect297 = SkPaintPriv::Unflatten(paintBuffer_rect297);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect298 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect298, 28);
        SkReadBuffer paintBuffer_rect298(paintdata_rect298, 28);
        SkPaint paintRect298 = SkPaintPriv::Unflatten(paintBuffer_rect298);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect299 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect299, 28);
        SkReadBuffer paintBuffer_rect299(paintdata_rect299, 28);
        SkPaint paintRect299 = SkPaintPriv::Unflatten(paintBuffer_rect299);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect94 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect94, 28);
        SkReadBuffer paintBuffer_rrect94(paintdata_rrect94, 28);
        SkPaint paintRRect94 = SkPaintPriv::Unflatten(paintBuffer_rrect94);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage60;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage60.allocPixels(ii);
        SkCanvas tmp(fakeImage60);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect95 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect95, 28);
        SkReadBuffer paintBuffer_rrect95(paintdata_rrect95, 28);
        SkPaint paintRRect95 = SkPaintPriv::Unflatten(paintBuffer_rrect95);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata32 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata32, 92);
        SkPath path32;
        path32.readFromMemory(pathdata32, 92);
        void *paintdata_path32 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path32, 28);
        SkReadBuffer paintBuffer_path32(paintdata_path32, 28);
        SkPaint paintPath32 = SkPaintPriv::Unflatten(paintBuffer_path32);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage61;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage61.allocPixels(ii);
        SkCanvas tmp(fakeImage61);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect297);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect298);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect299);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect94);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage60)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage60);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect95);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path32, paintPath32);
        free(pathdata32);
        free(paintdata_path32);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage61)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 252.000000, 42.000000, 294.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage61);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762421663391.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest63, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect300 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect300, 28);
        SkReadBuffer paintBuffer_rect300(paintdata_rect300, 28);
        SkPaint paintRect300 = SkPaintPriv::Unflatten(paintBuffer_rect300);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect301 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect301, 28);
        SkReadBuffer paintBuffer_rect301(paintdata_rect301, 28);
        SkPaint paintRect301 = SkPaintPriv::Unflatten(paintBuffer_rect301);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect302 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect302, 28);
        SkReadBuffer paintBuffer_rect302(paintdata_rect302, 28);
        SkPaint paintRect302 = SkPaintPriv::Unflatten(paintBuffer_rect302);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect96 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect96, 28);
        SkReadBuffer paintBuffer_rrect96(paintdata_rrect96, 28);
        SkPaint paintRRect96 = SkPaintPriv::Unflatten(paintBuffer_rrect96);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage62;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage62.allocPixels(ii);
        SkCanvas tmp(fakeImage62);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect97 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect97, 28);
        SkReadBuffer paintBuffer_rrect97(paintdata_rrect97, 28);
        SkPaint paintRRect97 = SkPaintPriv::Unflatten(paintBuffer_rrect97);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata33 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata33, 92);
        SkPath path33;
        path33.readFromMemory(pathdata33, 92);
        void *paintdata_path33 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path33, 28);
        SkReadBuffer paintBuffer_path33(paintdata_path33, 28);
        SkPaint paintPath33 = SkPaintPriv::Unflatten(paintBuffer_path33);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage63;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage63.allocPixels(ii);
        SkCanvas tmp(fakeImage63);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect300);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect301);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect302);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect96);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage62)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage62);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect97);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path33, paintPath33);
        free(pathdata33);
        free(paintdata_path33);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage63)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 294.000000, 42.000000, 336.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage63);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762421768767.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest64, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect303 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect303, 28);
        SkReadBuffer paintBuffer_rect303(paintdata_rect303, 28);
        SkPaint paintRect303 = SkPaintPriv::Unflatten(paintBuffer_rect303);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect304 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect304, 28);
        SkReadBuffer paintBuffer_rect304(paintdata_rect304, 28);
        SkPaint paintRect304 = SkPaintPriv::Unflatten(paintBuffer_rect304);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect305 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect305, 28);
        SkReadBuffer paintBuffer_rect305(paintdata_rect305, 28);
        SkPaint paintRect305 = SkPaintPriv::Unflatten(paintBuffer_rect305);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data257 = malloc(312);
        hexToRawData("0000004000002cc20780c3430000a0400000444300905845580100000000803f0000000000004443000000000000803f0000004100000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000004100000000000000000000803f0000464300000cc200c01244000050410800000000004643000008c200007643000000c200809443000004c20000ac43000008c20080c543000008c20080dd4300000cc20080f543000008c200400744000008c265cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430080000001c8a000010f20000508c0000dc91010020ab0000a4d3000078bb0000288a0000", data257, 312);
        auto slug257 = sktext::gpu::Slug::Deserialize(data257, 312);
        free(data257);
        void *paintdata_slug257 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug257, 28);
        SkReadBuffer paintbuffer_slug257 = SkReadBuffer(paintdata_slug257, 28);
        SkPaint paint_slug257 = SkPaintPriv::Unflatten(paintbuffer_slug257);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data258 = malloc(324);
        hexToRawData("000040400000e8c1baab3943000000000000444300505c45680100000000803f0000000000004443000000000000803f0000884200000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000884200000000000000000000803f0000474300001c420000bf4300008842090000000000474300001c4200005b4300001c4200007243000058420000824300001c420000934300001c4200009d4300001c420080a843000030420000ad4300001c420000b94300001c42f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000e8090000e4090000800c0000f3090000e8090000040a0000700c0000f3090000eb090000", data258, 324);
        auto slug258 = sktext::gpu::Slug::Deserialize(data258, 324);
        free(data258);
        void *paintdata_slug258 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug258, 28);
        SkReadBuffer paintbuffer_slug258 = SkReadBuffer(paintdata_slug258, 28);
        SkPaint paint_slug258 = SkPaintPriv::Unflatten(paintbuffer_slug258);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data259 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c24300505c45200200000000803f000000000050c243000000000000803f0000884200000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000884200000000000000000000803f0000c843000008420080eb4300009042020000000000c84300000c420080dd4300000842817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000884200000000000000000000803f0080f34300000c420080294400009042050000000080f34300000c420080034400000c4200c00d440000144200001744000014420040204400000c42817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data259, 448);
        auto slug259 = sktext::gpu::Slug::Deserialize(data259, 448);
        free(data259);
        void *paintdata_slug259 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug259, 28);
        SkReadBuffer paintbuffer_slug259 = SkReadBuffer(paintdata_slug259, 28);
        SkPaint paint_slug259 = SkPaintPriv::Unflatten(paintbuffer_slug259);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data260 = malloc(252);
        hexToRawData("00525641000004c254caf8420000804000bb294400505c45080100000000803f0000000000bb2944000000000000803f0000884200000000000000000000803f010000000100000000000000010000000000803f0000000000bb2944000000000000803f0000884200000000000000000000803f00402d4400000c4200004944000090420300000000402d44000014420040364400000c4200c03f4400000c42817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300300000089b400001b390100057b0100", data260, 252);
        auto slug260 = sktext::gpu::Slug::Deserialize(data260, 252);
        free(data260);
        void *paintdata_slug260 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug260, 28);
        SkReadBuffer paintbuffer_slug260 = SkReadBuffer(paintdata_slug260, 28);
        SkPaint paint_slug260 = SkPaintPriv::Unflatten(paintbuffer_slug260);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data261 = malloc(776);
        hexToRawData("00000040000040c2703d91440000c0400000604200406445e80300000000803f0000000000006042000000000000803f0000434300000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0000434300000000000000000000803f000068420000194300003543000044430400000000006842000019430000b442000019430000f4420000194300001b4300001a43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e4090000ef090000fb0900000100000000000000010000000000803f0000000000006042000000000000803f0000434300000000000000000000803f000049430000134300804b44000048430b0000000000494300001343000080430000154300009e43000016430080b943000017430080d443000013430080f04300001743000006440000134300001444000014430040224400001343000030440000134300003e4400001443ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300b0000001f8a000013f20000b7980000d79501008b77000003aa0000dfd200001b890000ab4601007fd900004faa00000100000000000000010000000000803f0000000000006042000000000000803f0000434300000000000000000000803f0040504400001343004098440000494307000000004050440000184300005e440000164300c06b440000144300007a440000144300e083440000144300e08b44000017430000924400001343ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43007000000e4740000608e00006cd90000608200005c8600007818010074710100", data261, 776);
        auto slug261 = sktext::gpu::Slug::Deserialize(data261, 776);
        free(data261);
        void *paintdata_slug261 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug261, 28);
        SkReadBuffer paintbuffer_slug261 = SkReadBuffer(paintdata_slug261, 28);
        SkPaint paint_slug261 = SkPaintPriv::Unflatten(paintbuffer_slug261);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data262 = malloc(628);
        hexToRawData("00004040000040c271bd93440000c0400000604200806945100300000000803f0000000000006042000000000000803f00808b4300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00808b4300000000000000000000803f00006c420000674300e08d4400808e431400000000006c4200006a430000e2420000674300002a4300006743000062430000674300008e43000068430000ac4300006c430000c543000068430000e143000068430000fd4300006e4300400c440000674300401a4400006a430000294400006a430080364400006b4300404444000068430080524400006743008060440000674300c06e4400006a4300407c4400006743004085440000674300008d4400006c43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4301400000060220100b890010054cb000054da000058920000b0c301006cc60000fccb0000f076000090380100c41c01008c8a00007c8c00008c740100707a01007471010060220100b890010054cb0000b0c301000100000000000000010000000000803f0000000000006042000000000000803f00808b4300000000000000000000803f00a0934400006d4300c09a4400008c430200000000a0934400006e430040974400006d43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000e8090000e4090000", data262, 628);
        auto slug262 = sktext::gpu::Slug::Deserialize(data262, 628);
        free(data262);
        void *paintdata_slug262 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug262, 28);
        SkReadBuffer paintbuffer_slug262 = SkReadBuffer(paintdata_slug262, 28);
        SkPaint paint_slug262 = SkPaintPriv::Unflatten(paintbuffer_slug262);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data263 = malloc(1084);
        hexToRawData("00004040000040c2c2b59444000010410000604200c06e45a80500000000803f0000000000006042000000000000803f0080b54300000000000000000000803f050000000100000000000000010000000000803f0000000000006042000000000000803f0080b54300000000000000000000803f00006c4200009f430000cc420080b8430100000000006c4200009f43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000e0d800000100000000000000010000000000803f0000000000006042000000000000803f0080b54300000000000000000000803f0000ea420000a143000026430080b543020000000000ea420000a143000015430000a143eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000e8090000e80900000100000000000000010000000000803f0000000000006042000000000000803f0080b54300000000000000000000803f0000394300809f4300008f430000b843020000000000394300809f4300006a4300809f43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300200000057d400008f4401000100000000000000010000000000803f0000000000006042000000000000803f0080b54300000000000000000000803f000091430080a0430000af430000b64302000000000091430080a0430000a1430000a143eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000ef090000ff0900000100000000000000010000000000803f0000000000006042000000000000803f0080b54300000000000000000000803f0080b44300809d4300c09b440000ba43100000000080b44300809f430000d0430080b2430000e94300809d430080024400809d43008010440000a04300401e4400809d4300802c4400009f4300403a4400009e4300004a440080b2430040574400009f430080654400009e430040724400809d430040804400809d430020874400809d4300408e4400809d430020954400809d43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4301000000057d40000abc301003b7c010077380100e77400006b750000638e00006fd90000abc30100b7980000d78200001ba10000ab4601007fd900009bab000003ba0100", data263, 1084);
        auto slug263 = sktext::gpu::Slug::Deserialize(data263, 1084);
        free(data263);
        void *paintdata_slug263 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug263, 28);
        SkReadBuffer paintbuffer_slug263 = SkReadBuffer(paintdata_slug263, 28);
        SkPaint paint_slug263 = SkPaintPriv::Unflatten(paintbuffer_slug263);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data264 = malloc(456);
        hexToRawData("00000040000044c200e08644000010410000604200007445180200000000803f0000000000006042000000000000803f0080df4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080df4300000000000000000000803f000068420000c74300e08d440000e44314000000000068420000c9430000e4420080c74300002a430080c843000063430000c84300008d430080c7430000a9430080c8430000c5430000c8430000e1430080c7430000fe430000c74300400d440080c74300001c440080dc4300c028440000c843008036440080c74300c044440000c843008052440080c743008060440080c74300406e440000c84300807c440080c743006085440080c74300008d440000ca43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43014000000283e01001c8a000010f20000508c0000dc910100007c01008cef000080d30000a826010090940100a8c30100a875000060bf000058b5000054da000014a2010078a101002c18010090ab0000b0c30100", data264, 456);
        auto slug264 = sktext::gpu::Slug::Deserialize(data264, 456);
        free(data264);
        void *paintdata_slug264 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug264, 28);
        SkReadBuffer paintbuffer_slug264 = SkReadBuffer(paintdata_slug264, 28);
        SkPaint paint_slug264 = SkPaintPriv::Unflatten(paintbuffer_slug264);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data265 = malloc(388);
        hexToRawData("00000000000040c2703db242000080400000934400007445d00100000000803f0000000000009344000000000000803f0080df4300000000000000000000803f020000000100000000000000010000000000803f0000000000009344000000000000803f0080df4300000000000000000000803f000093440000cb43008097440080df4301000000000093440000cb430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000009344000000000000803f0080df4300000000000000000000803f00c097440080c74300209e440080e1430100000000c097440080c743c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430010000001c8a0000", data265, 388);
        auto slug265 = sktext::gpu::Slug::Deserialize(data265, 388);
        free(data265);
        void *paintdata_slug265 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug265, 28);
        SkReadBuffer paintbuffer_slug265 = SkReadBuffer(paintdata_slug265, 28);
        SkPaint paint_slug265 = SkPaintPriv::Unflatten(paintbuffer_slug265);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data266 = malloc(412);
        hexToRawData("00000040000040c200004c430000a0400000604200407945f00100000000803f0000000000006042000000000000803f00c0044400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00c0044400000000000000000000803f000068420080f14300005e430000064403000000000068420080f2430000e6420000f24300002a430080f143c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300300000010f20000508c0000dc9101000100000000000000010000000000803f0000000000006042000000000000803f00c0044400000000000000000000803f000060430000f5430000824300c0044401000000000060430000f5430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data266, 412);
        auto slug266 = sktext::gpu::Slug::Deserialize(data266, 412);
        free(data266);
        void *paintdata_slug266 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug266, 28);
        SkReadBuffer paintbuffer_slug266 = SkReadBuffer(paintdata_slug266, 28);
        SkPaint paint_slug266 = SkPaintPriv::Unflatten(paintbuffer_slug266);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data267 = malloc(560);
        hexToRawData("00000000000040c2b81e38430000a0400010824300407945c80200000000803f0000000000108243000000000000803f00c0044400000000000000000000803f030000000100000000000000010000000000803f0000000000108243000000000000803f00c0044400000000000000000000803f008082430000f5430000944300c0044401000000008082430000f5430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000390c00000100000000000000010000000000803f0000000000108243000000000000803f00c0044400000000000000000000803f008095430080f1430080ca430000064402000000008095430080f1430080b1430080f343c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430020000008977000001aa00000100000000000000010000000000803f0000000000108243000000000000803f00c0044400000000000000000000803f0080cc430000f5430000de4300c00444010000000080cc430000f5430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000390c0000", data267, 560);
        auto slug267 = sktext::gpu::Slug::Deserialize(data267, 560);
        free(data267);
        void *paintdata_slug267 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug267, 28);
        SkReadBuffer paintbuffer_slug267 = SkReadBuffer(paintdata_slug267, 28);
        SkPaint paint_slug267 = SkPaintPriv::Unflatten(paintbuffer_slug267);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data268 = malloc(620);
        hexToRawData("00000000000040c25c0fe8430000a0400030de4300407945180300000000803f000000000030de43000000000000803f00c0044400000000000000000000803f030000000100000000000000010000000000803f000000000030de43000000000000803f00c0044400000000000000000000803f0080de430000f5430000f04300c00444010000000080de430000f5430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430010000003a0c00000100000000000000010000000000803f000000000030de43000000000000803f00c0044400000000000000000000803f0000f2430080f1430080594400000644070000000000f2430080f143008006440080f143004015440000f343004023440080f34300c030440080f14300803e440080f14300c04c440080f143c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43007000000ea7400009ef20000b6980000d6950100aa4601007ed90000ca4601000100000000000000010000000000803f000000000030de43000000000000803f00c0044400000000000000000000803f00405a440000f5430000634400c004440100000000405a440000f5430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430010000003a0c0000", data268, 620);
        auto slug268 = sktext::gpu::Slug::Deserialize(data268, 620);
        free(data268);
        void *paintdata_slug268 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug268, 28);
        SkReadBuffer paintbuffer_slug268 = SkReadBuffer(paintdata_slug268, 28);
        SkPaint paint_slug268 = SkPaintPriv::Unflatten(paintbuffer_slug268);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data269 = malloc(436);
        hexToRawData("00000000000040c25c8f9c430000a0400028634400407945100200000000803f0000000000286344000000000000803f00c0044400000000000000000000803f020000000100000000000000010000000000803f0000000000286344000000000000803f00c0044400000000000000000000803f004063440000f54300406c4400c0044401000000004063440000f5430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430010000003b0c00000100000000000000010000000000803f0000000000286344000000000000803f00c0044400000000000000000000803f00c06c440080f14300c09844000006440500000000c06c440080f14300807a440080f24300c084440000f34300a08b440080f343006092440080f143c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430050000001f8a000013f20000b7980000d79501008b770000", data269, 436);
        auto slug269 = sktext::gpu::Slug::Deserialize(data269, 436);
        free(data269);
        void *paintdata_slug269 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug269, 28);
        SkReadBuffer paintbuffer_slug269 = SkReadBuffer(paintdata_slug269, 28);
        SkPaint paint_slug269 = SkPaintPriv::Unflatten(paintbuffer_slug269);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data270 = malloc(448);
        hexToRawData("00004040000040c20000ba430000a0400000604200807e45200200000000803f0000000000006042000000000000803f00c0194400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00c0194400000000000000000000803f00006c4200c00d440080c34300001b440600000000006c4200c00e440000e44200c00d4400002a4300000e440000634300c00d4400808c4300c00d440000a94300000e44c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300600000000aa0000dcd2000018890000a84601007cd900004caa00000100000000000000010000000000803f0000000000006042000000000000803f00c0194400000000000000000000803f0000c44300800f440000d64300c01944010000000000c44300800f440753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data270, 448);
        auto slug270 = sktext::gpu::Slug::Deserialize(data270, 448);
        free(data270);
        void *paintdata_slug270 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug270, 28);
        SkReadBuffer paintbuffer_slug270 = SkReadBuffer(paintdata_slug270, 28);
        SkPaint paint_slug270 = SkPaintPriv::Unflatten(paintbuffer_slug270);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect98 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect98, 28);
        SkReadBuffer paintBuffer_rrect98(paintdata_rrect98, 28);
        SkPaint paintRRect98 = SkPaintPriv::Unflatten(paintBuffer_rrect98);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage64;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage64.allocPixels(ii);
        SkCanvas tmp(fakeImage64);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect99 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect99, 28);
        SkReadBuffer paintBuffer_rrect99(paintdata_rrect99, 28);
        SkPaint paintRRect99 = SkPaintPriv::Unflatten(paintBuffer_rrect99);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata34 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata34, 92);
        SkPath path34;
        path34.readFromMemory(pathdata34, 92);
        void *paintdata_path34 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_path34, 28);
        SkReadBuffer paintBuffer_path34(paintdata_path34, 28);
        SkPaint paintPath34 = SkPaintPriv::Unflatten(paintBuffer_path34);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -3636.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3636.000000, 1344.000000, 4244.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect303);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect304);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 5095.000000, 1316.000000, 5098.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect305);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 3415.000000, 1274.000000, 3483.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug257->draw(canvas, paint_slug257);
        slug257->draw(canvas);
        free(paintdata_slug257);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 3483.000000, 1274.000000, 3541.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug258->draw(canvas, paint_slug258);
        slug258->draw(canvas);
        free(paintdata_slug258);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug259->draw(canvas, paint_slug259);
        slug259->draw(canvas);
        free(paintdata_slug259);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug260->draw(canvas, paint_slug260);
        slug260->draw(canvas);
        free(paintdata_slug260);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug261->draw(canvas, paint_slug261);
        slug261->draw(canvas);
        free(paintdata_slug261);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug262->draw(canvas, paint_slug262);
        slug262->draw(canvas);
        free(paintdata_slug262);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug263->draw(canvas, paint_slug263);
        slug263->draw(canvas);
        free(paintdata_slug263);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug264->draw(canvas, paint_slug264);
        slug264->draw(canvas);
        free(paintdata_slug264);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug265->draw(canvas, paint_slug265);
        slug265->draw(canvas);
        free(paintdata_slug265);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug266->draw(canvas, paint_slug266);
        slug266->draw(canvas);
        free(paintdata_slug266);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug267->draw(canvas, paint_slug267);
        slug267->draw(canvas);
        free(paintdata_slug267);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug268->draw(canvas, paint_slug268);
        slug268->draw(canvas);
        free(paintdata_slug268);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug269->draw(canvas, paint_slug269);
        slug269->draw(canvas);
        free(paintdata_slug269);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug270->draw(canvas, paint_slug270);
        slug270->draw(canvas);
        free(paintdata_slug270);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 3406.000000, 168.000000, 3518.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect98);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 3406.000000, 168.000000, 3518.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage64)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 3406.000000, 168.000000, 3518.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage64);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 3407.500000, 166.500000, 3516.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect99);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 3473.000000, 172.000000, 3522.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,3277.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,56.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path34, paintPath34);
        free(pathdata34);
        free(paintdata_path34);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762421841884.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest65, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect306 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect306, 28);
        SkReadBuffer paintBuffer_rect306(paintdata_rect306, 28);
        SkPaint paintRect306 = SkPaintPriv::Unflatten(paintBuffer_rect306);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect307 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect307, 28);
        SkReadBuffer paintBuffer_rect307(paintdata_rect307, 28);
        SkPaint paintRect307 = SkPaintPriv::Unflatten(paintBuffer_rect307);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect308 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect308, 28);
        SkReadBuffer paintBuffer_rect308(paintdata_rect308, 28);
        SkPaint paintRect308 = SkPaintPriv::Unflatten(paintBuffer_rect308);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect309 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect309, 28);
        SkReadBuffer paintBuffer_rect309(paintdata_rect309, 28);
        SkPaint paintRect309 = SkPaintPriv::Unflatten(paintBuffer_rect309);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect310 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect310, 28);
        SkReadBuffer paintBuffer_rect310(paintdata_rect310, 28);
        SkPaint paintRect310 = SkPaintPriv::Unflatten(paintBuffer_rect310);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data271 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000484200000000000000000000803f00005042000080400000e04200004042010000000000504200008040824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data271, 228);
        auto slug271 = sktext::gpu::Slug::Deserialize(data271, 228);
        free(data271);
        void *paintdata_slug271 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug271, 28);
        SkReadBuffer paintbuffer_slug271 = SkReadBuffer(paintdata_slug271, 28);
        SkPaint paint_slug271 = SkPaintPriv::Unflatten(paintbuffer_slug271);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data272 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000284200000000000000000000803f00001143000000410000754300002c4204000000000011430000004100002d4300001041000047430000104100005e4300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data272, 264);
        auto slug272 = sktext::gpu::Slug::Deserialize(data272, 264);
        free(data272);
        void *paintdata_slug272 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug272, 28);
        SkReadBuffer paintbuffer_slug272 = SkReadBuffer(paintdata_slug272, 28);
        SkPaint paint_slug272 = SkPaintPriv::Unflatten(paintbuffer_slug272);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data273 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f0080ac43000000c00080c94300005c42010000000080ac43000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data273, 228);
        auto slug273 = sktext::gpu::Slug::Deserialize(data273, 228);
        free(data273);
        void *paintdata_slug273 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug273, 28);
        SkReadBuffer paintbuffer_slug273 = SkReadBuffer(paintdata_slug273, 28);
        SkPaint paint_slug273 = SkPaintPriv::Unflatten(paintbuffer_slug273);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data274 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000284200000000000000000000803f0000d443000000410080024400002c42040000000000d443000010410000e043000000410000ed43000010410080f94300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data274, 264);
        auto slug274 = sktext::gpu::Slug::Deserialize(data274, 264);
        free(data274);
        void *paintdata_slug274 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug274, 28);
        SkReadBuffer paintbuffer_slug274 = SkReadBuffer(paintdata_slug274, 28);
        SkPaint paint_slug274 = SkPaintPriv::Unflatten(paintbuffer_slug274);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data275 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f00801b44000000c00080294400005c420100000000801b44000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data275, 228);
        auto slug275 = sktext::gpu::Slug::Deserialize(data275, 228);
        free(data275);
        void *paintdata_slug275 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug275, 28);
        SkReadBuffer paintbuffer_slug275 = SkReadBuffer(paintdata_slug275, 28);
        SkPaint paint_slug275 = SkPaintPriv::Unflatten(paintbuffer_slug275);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data276 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00002e440000004100003d4400002c420300000000002e440000104100c03444000014420040374400000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00c03d440000c04000404844000034420100000000c03d440000c0406f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data276, 412);
        auto slug276 = sktext::gpu::Slug::Deserialize(data276, 412);
        free(data276);
        void *paintdata_slug276 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug276, 28);
        SkReadBuffer paintbuffer_slug276 = SkReadBuffer(paintdata_slug276, 28);
        SkPaint paint_slug276 = SkPaintPriv::Unflatten(paintbuffer_slug276);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data277 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f00a096440000d04100c09b44000004420100000000a096440000d041675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data277, 228);
        auto slug277 = sktext::gpu::Slug::Deserialize(data277, 228);
        free(data277);
        void *paintdata_slug277 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug277, 28);
        SkReadBuffer paintbuffer_slug277 = SkReadBuffer(paintdata_slug277, 28);
        SkPaint paint_slug277 = SkPaintPriv::Unflatten(paintbuffer_slug277);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data278 = malloc(288);
        hexToRawData("0000803f000028c2050092430000a040000044430040e944380100000000803f0000000000004443000000000000803f0000634300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000634300000000000000000000803f00004543000039430000f44300006843060000000000454300003943000077430000394300009643000039430080ac43000039430000c64300003b430080dd4300003c4365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000c43c010020a8010094110100d8910000e098000000aa0000", data278, 288);
        auto slug278 = sktext::gpu::Slug::Deserialize(data278, 288);
        free(data278);
        void *paintdata_slug278 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug278, 28);
        SkReadBuffer paintbuffer_slug278 = SkReadBuffer(paintdata_slug278, 28);
        SkPaint paint_slug278 = SkPaintPriv::Unflatten(paintbuffer_slug278);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data279 = malloc(324);
        hexToRawData("0000803f0000e8c1baab3f43000000000000444300e0f044680100000000803f0000000000004443000000000000803f0000904300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000904300000000000000000000803f00004543008081430080c1430000904309000000000045430080814300005c430000894300006e43008081430000824300808143000093430080814300009e43008081430080a843000084430000ad43008081430000b84300808143f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000080a0000800c0000ef090000070a0000e8090000e8090000700c0000e7090000070a0000", data279, 324);
        auto slug279 = sktext::gpu::Slug::Deserialize(data279, 324);
        free(data279);
        void *paintdata_slug279 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug279, 28);
        SkReadBuffer paintbuffer_slug279 = SkReadBuffer(paintdata_slug279, 28);
        SkPaint paint_slug279 = SkPaintPriv::Unflatten(paintbuffer_slug279);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data280 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c24300e0f044200200000000803f000000000050c243000000000000803f0000904300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0000c84300007e430080eb4300009243020000000000c84300007f430080dd4300007e43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0080f34300007f430080294400009243050000000080f34300007f430080034400007f4300c00d440080804300001744008080430040204400007f43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data280, 448);
        auto slug280 = sktext::gpu::Slug::Deserialize(data280, 448);
        free(data280);
        void *paintdata_slug280 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug280, 28);
        SkReadBuffer paintbuffer_slug280 = SkReadBuffer(paintdata_slug280, 28);
        SkPaint paint_slug280 = SkPaintPriv::Unflatten(paintbuffer_slug280);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data281 = malloc(468);
        hexToRawData("0000803f000040c200a09244000010410000604200600045280200000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f000064420080b74300a099440000d44315000000000064420000b8430000e4420080b94300002a430000b843000066430080b74300008d430080b7430000ac430080c0430000c6430000b8430000e1430080b7430080fd430080b74300c00c440000b84300401a440080b743008028440000b943004036440000b843004044440080b743008052440080b743008060440000b84300806e440000b84300007e440080cc43002085440080b84300408c440080b743002093440080b743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000ac7800004cea0000389a0100b8d80000906c0100a4c3010054780000f4850000f8890000a8750000b48001007cd500006cd90000f479000020f4000080ee000098850000a8c30100f88c000054da0000048c0000", data281, 468);
        auto slug281 = sktext::gpu::Slug::Deserialize(data281, 468);
        free(data281);
        void *paintdata_slug281 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug281, 28);
        SkReadBuffer paintbuffer_slug281 = SkReadBuffer(paintdata_slug281, 28);
        SkPaint paint_slug281 = SkPaintPriv::Unflatten(paintbuffer_slug281);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data282 = malloc(468);
        hexToRawData("0000803f000040c200c09244000010410000604200a00545280200000000803f0000000000006042000000000000803f0080f94300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080f94300000000000000000000803f000064420080e14300c099440000fe4315000000000064420000e3430000e6420080e14300002b430000e243000061430000e24300808c430080e1430000a9430080e1430000c5430000e2430000e2430080e1430000fd430000e24300800c440000e34300c01a440000e343008028440000e443000038440080f643004044440000e24300c052440000e343008060440000e44300806e440080e14300407c440080e143006085440000e34300408c440080e343002093440000e243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000800b0100f8890000a87500006cd90000f479000020f4000080ee0000d0160100608200007cd50000208e000054b40000a8c30100e8c60000208e000054b40000fceb000068750000e0d8000088b60000e4ca0000", data282, 468);
        auto slug282 = sktext::gpu::Slug::Deserialize(data282, 468);
        free(data282);
        void *paintdata_slug282 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug282, 28);
        SkReadBuffer paintbuffer_slug282 = SkReadBuffer(paintdata_slug282, 28);
        SkPaint paint_slug282 = SkPaintPriv::Unflatten(paintbuffer_slug282);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data283 = malloc(496);
        hexToRawData("0000a040000040c206410244000010410000604200e00a45600200000000803f0000000000006042000000000000803f00c0114400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f000074420040074400002243000012440300000000007442008007440000b442004007440000f04200400744eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f00002b4300c0054400401044000014440800000000002b430040104400005c430000064400008a4300c005440000a643008006440080c243004006440000de4300c005440080fa4300c0064400400c4400000f44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000a8c3010018780000048c0000800b010044ef0000e4d8000060110100b0c60100", data283, 496);
        auto slug283 = sktext::gpu::Slug::Deserialize(data283, 496);
        free(data283);
        void *paintdata_slug283 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug283, 28);
        SkReadBuffer paintbuffer_slug283 = SkReadBuffer(paintdata_slug283, 28);
        SkPaint paint_slug283 = SkPaintPriv::Unflatten(paintbuffer_slug283);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect100 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect100, 28);
        SkReadBuffer paintBuffer_rrect100(paintdata_rrect100, 28);
        SkPaint paintRRect100 = SkPaintPriv::Unflatten(paintBuffer_rrect100);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage65;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage65.allocPixels(ii);
        SkCanvas tmp(fakeImage65);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage66;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage66.allocPixels(ii);
        SkCanvas tmp(fakeImage66);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect101 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect101, 28);
        SkReadBuffer paintBuffer_rrect101(paintdata_rrect101, 28);
        SkPaint paintRRect101 = SkPaintPriv::Unflatten(paintBuffer_rrect101);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata35 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata35, 92);
        SkPath path35;
        path35.readFromMemory(pathdata35, 92);
        void *paintdata_path35 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path35, 28);
        SkReadBuffer paintBuffer_path35(paintdata_path35, 28);
        SkPaint paintPath35 = SkPaintPriv::Unflatten(paintBuffer_path35);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage67;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage67.allocPixels(ii);
        SkCanvas tmp(fakeImage67);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1316.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect306);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect307);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect308);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect309);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect310);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug271->draw(canvas, paint_slug271);
        slug271->draw(canvas);
        free(paintdata_slug271);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug272->draw(canvas, paint_slug272);
        slug272->draw(canvas);
        free(paintdata_slug272);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug273->draw(canvas, paint_slug273);
        slug273->draw(canvas);
        free(paintdata_slug273);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug274->draw(canvas, paint_slug274);
        slug274->draw(canvas);
        free(paintdata_slug274);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug275->draw(canvas, paint_slug275);
        slug275->draw(canvas);
        free(paintdata_slug275);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug276->draw(canvas, paint_slug276);
        slug276->draw(canvas);
        free(paintdata_slug276);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug277->draw(canvas, paint_slug277);
        slug277->draw(canvas);
        free(paintdata_slug277);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug278->draw(canvas, paint_slug278);
        slug278->draw(canvas);
        free(paintdata_slug278);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1885.000000, 1274.000000, 1943.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug279->draw(canvas, paint_slug279);
        slug279->draw(canvas);
        free(paintdata_slug279);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug280->draw(canvas, paint_slug280);
        slug280->draw(canvas);
        free(paintdata_slug280);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug281->draw(canvas, paint_slug281);
        slug281->draw(canvas);
        free(paintdata_slug281);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug282->draw(canvas, paint_slug282);
        slug282->draw(canvas);
        free(paintdata_slug282);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug283->draw(canvas, paint_slug283);
        slug283->draw(canvas);
        free(paintdata_slug283);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect100);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage65)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage65);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage66)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(514.000000, 1824.000000, 577.000000, 1873.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage66);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect101);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path35, paintPath35);
        free(pathdata35);
        free(paintdata_path35);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage67)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 336.000000, 42.000000, 378.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage67);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 16B473D3C85BD4DE6B9B34C2E674F595_1759762421902877.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest66, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect311 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect311, 28);
        SkReadBuffer paintBuffer_rect311(paintdata_rect311, 28);
        SkPaint paintRect311 = SkPaintPriv::Unflatten(paintBuffer_rect311);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect312 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect312, 28);
        SkReadBuffer paintBuffer_rect312(paintdata_rect312, 28);
        SkPaint paintRect312 = SkPaintPriv::Unflatten(paintBuffer_rect312);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect313 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect313, 28);
        SkReadBuffer paintBuffer_rect313(paintdata_rect313, 28);
        SkPaint paintRect313 = SkPaintPriv::Unflatten(paintBuffer_rect313);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect102 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect102, 28);
        SkReadBuffer paintBuffer_rrect102(paintdata_rrect102, 28);
        SkPaint paintRRect102 = SkPaintPriv::Unflatten(paintBuffer_rrect102);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage68;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage68.allocPixels(ii);
        SkCanvas tmp(fakeImage68);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect103 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect103, 28);
        SkReadBuffer paintBuffer_rrect103(paintdata_rrect103, 28);
        SkPaint paintRRect103 = SkPaintPriv::Unflatten(paintBuffer_rrect103);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata36 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata36, 92);
        SkPath path36;
        path36.readFromMemory(pathdata36, 92);
        void *paintdata_path36 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path36, 28);
        SkReadBuffer paintBuffer_path36(paintdata_path36, 28);
        SkPaint paintPath36 = SkPaintPriv::Unflatten(paintBuffer_path36);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage69;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage69.allocPixels(ii);
        SkCanvas tmp(fakeImage69);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect311);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect312);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect313);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect102);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage68)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage68);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect103);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path36, paintPath36);
        free(pathdata36);
        free(paintdata_path36);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage69)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 378.000000, 42.000000, 420.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage69);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762422018692.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest67, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect314 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect314, 28);
        SkReadBuffer paintBuffer_rect314(paintdata_rect314, 28);
        SkPaint paintRect314 = SkPaintPriv::Unflatten(paintBuffer_rect314);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect315 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect315, 28);
        SkReadBuffer paintBuffer_rect315(paintdata_rect315, 28);
        SkPaint paintRect315 = SkPaintPriv::Unflatten(paintBuffer_rect315);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect316 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect316, 28);
        SkReadBuffer paintBuffer_rect316(paintdata_rect316, 28);
        SkPaint paintRect316 = SkPaintPriv::Unflatten(paintBuffer_rect316);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect104 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect104, 28);
        SkReadBuffer paintBuffer_rrect104(paintdata_rrect104, 28);
        SkPaint paintRRect104 = SkPaintPriv::Unflatten(paintBuffer_rrect104);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage70;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage70.allocPixels(ii);
        SkCanvas tmp(fakeImage70);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect105 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect105, 28);
        SkReadBuffer paintBuffer_rrect105(paintdata_rrect105, 28);
        SkPaint paintRRect105 = SkPaintPriv::Unflatten(paintBuffer_rrect105);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata37 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata37, 92);
        SkPath path37;
        path37.readFromMemory(pathdata37, 92);
        void *paintdata_path37 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path37, 28);
        SkReadBuffer paintBuffer_path37(paintdata_path37, 28);
        SkPaint paintPath37 = SkPaintPriv::Unflatten(paintBuffer_path37);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage71;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage71.allocPixels(ii);
        SkCanvas tmp(fakeImage71);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect314);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect315);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect316);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect104);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage70)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage70);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect105);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path37, paintPath37);
        free(pathdata37);
        free(paintdata_path37);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage71)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 420.000000, 42.000000, 462.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage71);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 16B473D3C85BD4DE6B9B34C2E674F595_1759762422151940.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest68, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect317 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect317, 28);
        SkReadBuffer paintBuffer_rect317(paintdata_rect317, 28);
        SkPaint paintRect317 = SkPaintPriv::Unflatten(paintBuffer_rect317);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect318 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect318, 28);
        SkReadBuffer paintBuffer_rect318(paintdata_rect318, 28);
        SkPaint paintRect318 = SkPaintPriv::Unflatten(paintBuffer_rect318);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect319 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect319, 28);
        SkReadBuffer paintBuffer_rect319(paintdata_rect319, 28);
        SkPaint paintRect319 = SkPaintPriv::Unflatten(paintBuffer_rect319);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect106 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect106, 28);
        SkReadBuffer paintBuffer_rrect106(paintdata_rrect106, 28);
        SkPaint paintRRect106 = SkPaintPriv::Unflatten(paintBuffer_rrect106);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage72;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage72.allocPixels(ii);
        SkCanvas tmp(fakeImage72);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect107 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect107, 28);
        SkReadBuffer paintBuffer_rrect107(paintdata_rrect107, 28);
        SkPaint paintRRect107 = SkPaintPriv::Unflatten(paintBuffer_rrect107);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata38 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata38, 92);
        SkPath path38;
        path38.readFromMemory(pathdata38, 92);
        void *paintdata_path38 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path38, 28);
        SkReadBuffer paintBuffer_path38(paintdata_path38, 28);
        SkPaint paintPath38 = SkPaintPriv::Unflatten(paintBuffer_path38);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage73;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage73.allocPixels(ii);
        SkCanvas tmp(fakeImage73);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect317);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect318);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect319);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect106);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage72)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage72);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect107);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path38, paintPath38);
        free(pathdata38);
        free(paintdata_path38);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage73)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 462.000000, 42.000000, 504.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage73);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762422267799.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest69, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect320 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect320, 28);
        SkReadBuffer paintBuffer_rect320(paintdata_rect320, 28);
        SkPaint paintRect320 = SkPaintPriv::Unflatten(paintBuffer_rect320);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect321 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect321, 28);
        SkReadBuffer paintBuffer_rect321(paintdata_rect321, 28);
        SkPaint paintRect321 = SkPaintPriv::Unflatten(paintBuffer_rect321);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect322 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect322, 28);
        SkReadBuffer paintBuffer_rect322(paintdata_rect322, 28);
        SkPaint paintRect322 = SkPaintPriv::Unflatten(paintBuffer_rect322);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data284 = malloc(448);
        hexToRawData("00004040000040c20000ba430000a0400000604200807e45200200000000803f0000000000006042000000000000803f0000104100000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0000104100000000000000000000803f00006c4200001cc20080c343000060410600000000006c4200000cc20000e44200001cc200002a43000018c20000634300001cc200808c4300001cc20000a943000018c2c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300600000000aa0000dcd2000018890000a84601007cd900004caa00000100000000000000010000000000803f0000000000006042000000000000803f0000104100000000000000000000803f0000c443000000c20000d64300001041010000000000c443000000c20753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data284, 448);
        auto slug284 = sktext::gpu::Slug::Deserialize(data284, 448);
        free(data284);
        void *paintdata_slug284 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug284, 28);
        SkReadBuffer paintbuffer_slug284 = SkReadBuffer(paintdata_slug284, 28);
        SkPaint paint_slug284 = SkPaintPriv::Unflatten(paintbuffer_slug284);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect323 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect323, 28);
        SkReadBuffer paintBuffer_rect323(paintdata_rect323, 28);
        SkPaint paintRect323 = SkPaintPriv::Unflatten(paintBuffer_rect323);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage74;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 809);
        fakeImage74.allocPixels(ii);
        SkCanvas tmp(fakeImage74);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 809), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect324 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect324, 28);
        SkReadBuffer paintBuffer_rect324(paintdata_rect324, 28);
        SkPaint paintRect324 = SkPaintPriv::Unflatten(paintBuffer_rect324);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage75;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 809);
        fakeImage75.allocPixels(ii);
        SkCanvas tmp(fakeImage75);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 809), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect325 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect325, 28);
        SkReadBuffer paintBuffer_rect325(paintdata_rect325, 28);
        SkPaint paintRect325 = SkPaintPriv::Unflatten(paintBuffer_rect325);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage76;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 809);
        fakeImage76.allocPixels(ii);
        SkCanvas tmp(fakeImage76);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 809), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect326 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect326, 28);
        SkReadBuffer paintBuffer_rect326(paintdata_rect326, 28);
        SkPaint paintRect326 = SkPaintPriv::Unflatten(paintBuffer_rect326);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage77;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 809);
        fakeImage77.allocPixels(ii);
        SkCanvas tmp(fakeImage77);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 809), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect327 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect327, 28);
        SkReadBuffer paintBuffer_rect327(paintdata_rect327, 28);
        SkPaint paintRect327 = SkPaintPriv::Unflatten(paintBuffer_rect327);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage78;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 809);
        fakeImage78.allocPixels(ii);
        SkCanvas tmp(fakeImage78);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 809), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect328 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect328, 28);
        SkReadBuffer paintBuffer_rect328(paintdata_rect328, 28);
        SkPaint paintRect328 = SkPaintPriv::Unflatten(paintBuffer_rect328);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage79;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 809);
        fakeImage79.allocPixels(ii);
        SkCanvas tmp(fakeImage79);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 809), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -4242.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 4242.000000, 1344.000000, 4850.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect320);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect321);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 5095.000000, 1316.000000, 5098.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect322);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug284->draw(canvas, paint_slug284);
        slug284->draw(canvas);
        free(paintdata_slug284);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 4130.000000, 1274.000000, 4942.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 4130.000000, 444.000000, 4519.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect323);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage74)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 224.258881, 360.000000, 584.741089);
    SkRect dst = SkRect::MakeLTRB(56.000000, 4130.000000, 444.000000, 4519.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage74);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(462.000000, 4130.000000, 850.000000, 4519.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect324);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage75)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 224.258881, 360.000000, 584.741089);
    SkRect dst = SkRect::MakeLTRB(462.000000, 4130.000000, 850.000000, 4519.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage75);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(868.000000, 4130.000000, 1256.000000, 4519.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect325);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage76)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 224.258881, 360.000000, 584.741089);
    SkRect dst = SkRect::MakeLTRB(868.000000, 4130.000000, 1256.000000, 4519.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage76);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 4536.000000, 444.000000, 4925.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect326);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage77)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 224.258881, 360.000000, 584.741089);
    SkRect dst = SkRect::MakeLTRB(56.000000, 4536.000000, 444.000000, 4925.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage77);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(462.000000, 4536.000000, 850.000000, 4925.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect327);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage78)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 224.258881, 360.000000, 584.741089);
    SkRect dst = SkRect::MakeLTRB(462.000000, 4536.000000, 850.000000, 4925.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage78);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(868.000000, 4536.000000, 1256.000000, 4925.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect328);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage79)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 224.258881, 360.000000, 584.741089);
    SkRect dst = SkRect::MakeLTRB(868.000000, 4536.000000, 1256.000000, 4925.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage79);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 16B473D3C85BD4DE6B9B34C2E674F595_1759762422350817.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest70, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect329 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect329, 28);
        SkReadBuffer paintBuffer_rect329(paintdata_rect329, 28);
        SkPaint paintRect329 = SkPaintPriv::Unflatten(paintBuffer_rect329);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect330 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect330, 28);
        SkReadBuffer paintBuffer_rect330(paintdata_rect330, 28);
        SkPaint paintRect330 = SkPaintPriv::Unflatten(paintBuffer_rect330);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect331 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect331, 28);
        SkReadBuffer paintBuffer_rect331(paintdata_rect331, 28);
        SkPaint paintRect331 = SkPaintPriv::Unflatten(paintBuffer_rect331);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect332 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect332, 28);
        SkReadBuffer paintBuffer_rect332(paintdata_rect332, 28);
        SkPaint paintRect332 = SkPaintPriv::Unflatten(paintBuffer_rect332);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect333 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect333, 28);
        SkReadBuffer paintBuffer_rect333(paintdata_rect333, 28);
        SkPaint paintRect333 = SkPaintPriv::Unflatten(paintBuffer_rect333);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data285 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000484200000000000000000000803f00005042000080400000e04200004042010000000000504200008040824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data285, 228);
        auto slug285 = sktext::gpu::Slug::Deserialize(data285, 228);
        free(data285);
        void *paintdata_slug285 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug285, 28);
        SkReadBuffer paintbuffer_slug285 = SkReadBuffer(paintdata_slug285, 28);
        SkPaint paint_slug285 = SkPaintPriv::Unflatten(paintbuffer_slug285);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data286 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000284200000000000000000000803f00001143000000410000754300002c4204000000000011430000004100002d4300001041000047430000104100005e4300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data286, 264);
        auto slug286 = sktext::gpu::Slug::Deserialize(data286, 264);
        free(data286);
        void *paintdata_slug286 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug286, 28);
        SkReadBuffer paintbuffer_slug286 = SkReadBuffer(paintdata_slug286, 28);
        SkPaint paint_slug286 = SkPaintPriv::Unflatten(paintbuffer_slug286);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data287 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f0080ac43000000c00080c94300005c42010000000080ac43000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data287, 228);
        auto slug287 = sktext::gpu::Slug::Deserialize(data287, 228);
        free(data287);
        void *paintdata_slug287 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug287, 28);
        SkReadBuffer paintbuffer_slug287 = SkReadBuffer(paintdata_slug287, 28);
        SkPaint paint_slug287 = SkPaintPriv::Unflatten(paintbuffer_slug287);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data288 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000284200000000000000000000803f0000d443000000410080024400002c42040000000000d443000010410000e043000000410000ed43000010410080f94300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data288, 264);
        auto slug288 = sktext::gpu::Slug::Deserialize(data288, 264);
        free(data288);
        void *paintdata_slug288 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug288, 28);
        SkReadBuffer paintbuffer_slug288 = SkReadBuffer(paintdata_slug288, 28);
        SkPaint paint_slug288 = SkPaintPriv::Unflatten(paintbuffer_slug288);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data289 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f00801b44000000c00080294400005c420100000000801b44000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data289, 228);
        auto slug289 = sktext::gpu::Slug::Deserialize(data289, 228);
        free(data289);
        void *paintdata_slug289 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug289, 28);
        SkReadBuffer paintbuffer_slug289 = SkReadBuffer(paintdata_slug289, 28);
        SkPaint paint_slug289 = SkPaintPriv::Unflatten(paintbuffer_slug289);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data290 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00002e440000004100003d4400002c420300000000002e440000104100c03444000014420040374400000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00c03d440000c04000404844000034420100000000c03d440000c0406f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data290, 412);
        auto slug290 = sktext::gpu::Slug::Deserialize(data290, 412);
        free(data290);
        void *paintdata_slug290 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug290, 28);
        SkReadBuffer paintbuffer_slug290 = SkReadBuffer(paintdata_slug290, 28);
        SkPaint paint_slug290 = SkPaintPriv::Unflatten(paintbuffer_slug290);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data291 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f00a096440000d04100c09b44000004420100000000a096440000d041675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data291, 228);
        auto slug291 = sktext::gpu::Slug::Deserialize(data291, 228);
        free(data291);
        void *paintdata_slug291 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug291, 28);
        SkReadBuffer paintbuffer_slug291 = SkReadBuffer(paintdata_slug291, 28);
        SkPaint paint_slug291 = SkPaintPriv::Unflatten(paintbuffer_slug291);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data292 = malloc(288);
        hexToRawData("0000803f000028c2050092430000a040000044430040e944380100000000803f0000000000004443000000000000803f0000634300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000634300000000000000000000803f00004543000039430000f44300006843060000000000454300003943000077430000394300009643000039430080ac43000039430000c64300003b430080dd4300003c4365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000c43c010020a8010094110100d8910000e098000000aa0000", data292, 288);
        auto slug292 = sktext::gpu::Slug::Deserialize(data292, 288);
        free(data292);
        void *paintdata_slug292 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug292, 28);
        SkReadBuffer paintbuffer_slug292 = SkReadBuffer(paintdata_slug292, 28);
        SkPaint paint_slug292 = SkPaintPriv::Unflatten(paintbuffer_slug292);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data293 = malloc(324);
        hexToRawData("0000803f0000e8c1baab3f43000000000000444300e0f044680100000000803f0000000000004443000000000000803f0000904300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000904300000000000000000000803f00004543008081430080c1430000904309000000000045430080814300005c430000894300006e43008081430000824300808143000093430080814300009e43008081430080a843000084430000ad43008081430000b84300808143f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000080a0000800c0000ef090000070a0000e8090000e8090000700c0000e7090000070a0000", data293, 324);
        auto slug293 = sktext::gpu::Slug::Deserialize(data293, 324);
        free(data293);
        void *paintdata_slug293 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug293, 28);
        SkReadBuffer paintbuffer_slug293 = SkReadBuffer(paintdata_slug293, 28);
        SkPaint paint_slug293 = SkPaintPriv::Unflatten(paintbuffer_slug293);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data294 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c24300e0f044200200000000803f000000000050c243000000000000803f0000904300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0000c84300007e430080eb4300009243020000000000c84300007f430080dd4300007e43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0080f34300007f430080294400009243050000000080f34300007f430080034400007f4300c00d440080804300001744008080430040204400007f43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data294, 448);
        auto slug294 = sktext::gpu::Slug::Deserialize(data294, 448);
        free(data294);
        void *paintdata_slug294 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug294, 28);
        SkReadBuffer paintbuffer_slug294 = SkReadBuffer(paintdata_slug294, 28);
        SkPaint paint_slug294 = SkPaintPriv::Unflatten(paintbuffer_slug294);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data295 = malloc(468);
        hexToRawData("0000803f000040c200a09244000010410000604200600045280200000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f000064420080b74300a099440000d44315000000000064420000b8430000e4420080b94300002a430000b843000066430080b74300008d430080b7430000ac430080c0430000c6430000b8430000e1430080b7430080fd430080b74300c00c440000b84300401a440080b743008028440000b943004036440000b843004044440080b743008052440080b743008060440000b84300806e440000b84300007e440080cc43002085440080b84300408c440080b743002093440080b743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000ac7800004cea0000389a0100b8d80000906c0100a4c3010054780000f4850000f8890000a8750000b48001007cd500006cd90000f479000020f4000080ee000098850000a8c30100f88c000054da0000048c0000", data295, 468);
        auto slug295 = sktext::gpu::Slug::Deserialize(data295, 468);
        free(data295);
        void *paintdata_slug295 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug295, 28);
        SkReadBuffer paintbuffer_slug295 = SkReadBuffer(paintdata_slug295, 28);
        SkPaint paint_slug295 = SkPaintPriv::Unflatten(paintbuffer_slug295);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data296 = malloc(468);
        hexToRawData("0000803f000040c200c09244000010410000604200a00545280200000000803f0000000000006042000000000000803f0080f94300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080f94300000000000000000000803f000064420080e14300c099440000fe4315000000000064420000e3430000e6420080e14300002b430000e243000061430000e24300808c430080e1430000a9430080e1430000c5430000e2430000e2430080e1430000fd430000e24300800c440000e34300c01a440000e343008028440000e443000038440080f643004044440000e24300c052440000e343008060440000e44300806e440080e14300407c440080e143006085440000e34300408c440080e343002093440000e243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000800b0100f8890000a87500006cd90000f479000020f4000080ee0000d0160100608200007cd50000208e000054b40000a8c30100e8c60000208e000054b40000fceb000068750000e0d8000088b60000e4ca0000", data296, 468);
        auto slug296 = sktext::gpu::Slug::Deserialize(data296, 468);
        free(data296);
        void *paintdata_slug296 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug296, 28);
        SkReadBuffer paintbuffer_slug296 = SkReadBuffer(paintdata_slug296, 28);
        SkPaint paint_slug296 = SkPaintPriv::Unflatten(paintbuffer_slug296);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data297 = malloc(496);
        hexToRawData("0000a040000040c206410244000010410000604200e00a45600200000000803f0000000000006042000000000000803f00c0114400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f000074420040074400002243000012440300000000007442008007440000b442004007440000f04200400744eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f00002b4300c0054400401044000014440800000000002b430040104400005c430000064400008a4300c005440000a643008006440080c243004006440000de4300c005440080fa4300c0064400400c4400000f44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000a8c3010018780000048c0000800b010044ef0000e4d8000060110100b0c60100", data297, 496);
        auto slug297 = sktext::gpu::Slug::Deserialize(data297, 496);
        free(data297);
        void *paintdata_slug297 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug297, 28);
        SkReadBuffer paintbuffer_slug297 = SkReadBuffer(paintdata_slug297, 28);
        SkPaint paint_slug297 = SkPaintPriv::Unflatten(paintbuffer_slug297);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect108 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect108, 28);
        SkReadBuffer paintBuffer_rrect108(paintdata_rrect108, 28);
        SkPaint paintRRect108 = SkPaintPriv::Unflatten(paintBuffer_rrect108);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage80;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage80.allocPixels(ii);
        SkCanvas tmp(fakeImage80);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage81;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage81.allocPixels(ii);
        SkCanvas tmp(fakeImage81);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect109 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect109, 28);
        SkReadBuffer paintBuffer_rrect109(paintdata_rrect109, 28);
        SkPaint paintRRect109 = SkPaintPriv::Unflatten(paintBuffer_rrect109);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata39 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata39, 92);
        SkPath path39;
        path39.readFromMemory(pathdata39, 92);
        void *paintdata_path39 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path39, 28);
        SkReadBuffer paintBuffer_path39(paintdata_path39, 28);
        SkPaint paintPath39 = SkPaintPriv::Unflatten(paintBuffer_path39);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage82;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage82.allocPixels(ii);
        SkCanvas tmp(fakeImage82);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1344.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect329);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect330);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect331);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect332);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect333);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug285->draw(canvas, paint_slug285);
        slug285->draw(canvas);
        free(paintdata_slug285);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug286->draw(canvas, paint_slug286);
        slug286->draw(canvas);
        free(paintdata_slug286);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug287->draw(canvas, paint_slug287);
        slug287->draw(canvas);
        free(paintdata_slug287);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug288->draw(canvas, paint_slug288);
        slug288->draw(canvas);
        free(paintdata_slug288);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug289->draw(canvas, paint_slug289);
        slug289->draw(canvas);
        free(paintdata_slug289);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug290->draw(canvas, paint_slug290);
        slug290->draw(canvas);
        free(paintdata_slug290);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug291->draw(canvas, paint_slug291);
        slug291->draw(canvas);
        free(paintdata_slug291);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug292->draw(canvas, paint_slug292);
        slug292->draw(canvas);
        free(paintdata_slug292);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1885.000000, 1274.000000, 1943.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug293->draw(canvas, paint_slug293);
        slug293->draw(canvas);
        free(paintdata_slug293);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug294->draw(canvas, paint_slug294);
        slug294->draw(canvas);
        free(paintdata_slug294);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug295->draw(canvas, paint_slug295);
        slug295->draw(canvas);
        free(paintdata_slug295);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug296->draw(canvas, paint_slug296);
        slug296->draw(canvas);
        free(paintdata_slug296);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug297->draw(canvas, paint_slug297);
        slug297->draw(canvas);
        free(paintdata_slug297);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect108);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage80)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage80);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage81)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(514.000000, 1824.000000, 577.000000, 1873.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage81);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect109);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path39, paintPath39);
        free(pathdata39);
        free(paintdata_path39);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage82)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 504.000000, 42.000000, 546.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage82);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762422401451.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest71, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect334 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect334, 28);
        SkReadBuffer paintBuffer_rect334(paintdata_rect334, 28);
        SkPaint paintRect334 = SkPaintPriv::Unflatten(paintBuffer_rect334);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect335 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect335, 28);
        SkReadBuffer paintBuffer_rect335(paintdata_rect335, 28);
        SkPaint paintRect335 = SkPaintPriv::Unflatten(paintBuffer_rect335);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect336 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect336, 28);
        SkReadBuffer paintBuffer_rect336(paintdata_rect336, 28);
        SkPaint paintRect336 = SkPaintPriv::Unflatten(paintBuffer_rect336);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect110 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect110, 28);
        SkReadBuffer paintBuffer_rrect110(paintdata_rrect110, 28);
        SkPaint paintRRect110 = SkPaintPriv::Unflatten(paintBuffer_rrect110);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage83;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage83.allocPixels(ii);
        SkCanvas tmp(fakeImage83);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect111 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect111, 28);
        SkReadBuffer paintBuffer_rrect111(paintdata_rrect111, 28);
        SkPaint paintRRect111 = SkPaintPriv::Unflatten(paintBuffer_rrect111);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata40 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata40, 92);
        SkPath path40;
        path40.readFromMemory(pathdata40, 92);
        void *paintdata_path40 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path40, 28);
        SkReadBuffer paintBuffer_path40(paintdata_path40, 28);
        SkPaint paintPath40 = SkPaintPriv::Unflatten(paintBuffer_path40);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage84;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage84.allocPixels(ii);
        SkCanvas tmp(fakeImage84);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect334);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect335);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect336);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect110);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage83)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage83);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect111);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path40, paintPath40);
        free(pathdata40);
        free(paintdata_path40);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage84)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 546.000000, 42.000000, 588.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage84);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762422518391.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest72, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect337 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect337, 28);
        SkReadBuffer paintBuffer_rect337(paintdata_rect337, 28);
        SkPaint paintRect337 = SkPaintPriv::Unflatten(paintBuffer_rect337);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect338 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect338, 28);
        SkReadBuffer paintBuffer_rect338(paintdata_rect338, 28);
        SkPaint paintRect338 = SkPaintPriv::Unflatten(paintBuffer_rect338);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect339 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect339, 28);
        SkReadBuffer paintBuffer_rect339(paintdata_rect339, 28);
        SkPaint paintRect339 = SkPaintPriv::Unflatten(paintBuffer_rect339);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect112 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect112, 28);
        SkReadBuffer paintBuffer_rrect112(paintdata_rrect112, 28);
        SkPaint paintRRect112 = SkPaintPriv::Unflatten(paintBuffer_rrect112);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage85;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage85.allocPixels(ii);
        SkCanvas tmp(fakeImage85);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect113 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect113, 28);
        SkReadBuffer paintBuffer_rrect113(paintdata_rrect113, 28);
        SkPaint paintRRect113 = SkPaintPriv::Unflatten(paintBuffer_rrect113);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata41 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata41, 92);
        SkPath path41;
        path41.readFromMemory(pathdata41, 92);
        void *paintdata_path41 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path41, 28);
        SkReadBuffer paintBuffer_path41(paintdata_path41, 28);
        SkPaint paintPath41 = SkPaintPriv::Unflatten(paintBuffer_path41);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage86;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage86.allocPixels(ii);
        SkCanvas tmp(fakeImage86);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect337);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect338);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect339);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect112);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage85)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage85);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect113);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path41, paintPath41);
        free(pathdata41);
        free(paintdata_path41);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage86)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 588.000000, 42.000000, 630.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage86);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762422651149.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest73, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect340 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect340, 28);
        SkReadBuffer paintBuffer_rect340(paintdata_rect340, 28);
        SkPaint paintRect340 = SkPaintPriv::Unflatten(paintBuffer_rect340);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect341 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect341, 28);
        SkReadBuffer paintBuffer_rect341(paintdata_rect341, 28);
        SkPaint paintRect341 = SkPaintPriv::Unflatten(paintBuffer_rect341);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect342 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect342, 28);
        SkReadBuffer paintBuffer_rect342(paintdata_rect342, 28);
        SkPaint paintRect342 = SkPaintPriv::Unflatten(paintBuffer_rect342);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect114 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect114, 28);
        SkReadBuffer paintBuffer_rrect114(paintdata_rrect114, 28);
        SkPaint paintRRect114 = SkPaintPriv::Unflatten(paintBuffer_rrect114);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage87;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage87.allocPixels(ii);
        SkCanvas tmp(fakeImage87);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect115 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect115, 28);
        SkReadBuffer paintBuffer_rrect115(paintdata_rrect115, 28);
        SkPaint paintRRect115 = SkPaintPriv::Unflatten(paintBuffer_rrect115);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata42 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata42, 92);
        SkPath path42;
        path42.readFromMemory(pathdata42, 92);
        void *paintdata_path42 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path42, 28);
        SkReadBuffer paintBuffer_path42(paintdata_path42, 28);
        SkPaint paintPath42 = SkPaintPriv::Unflatten(paintBuffer_path42);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage88;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage88.allocPixels(ii);
        SkCanvas tmp(fakeImage88);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect340);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect341);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect342);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect114);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage87)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage87);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect115);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path42, paintPath42);
        free(pathdata42);
        free(paintdata_path42);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage88)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 630.000000, 42.000000, 672.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage88);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762422770616.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest74, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect343 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect343, 28);
        SkReadBuffer paintBuffer_rect343(paintdata_rect343, 28);
        SkPaint paintRect343 = SkPaintPriv::Unflatten(paintBuffer_rect343);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect344 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect344, 28);
        SkReadBuffer paintBuffer_rect344(paintdata_rect344, 28);
        SkPaint paintRect344 = SkPaintPriv::Unflatten(paintBuffer_rect344);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect345 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect345, 28);
        SkReadBuffer paintBuffer_rect345(paintdata_rect345, 28);
        SkPaint paintRect345 = SkPaintPriv::Unflatten(paintBuffer_rect345);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect116 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect116, 28);
        SkReadBuffer paintBuffer_rrect116(paintdata_rrect116, 28);
        SkPaint paintRRect116 = SkPaintPriv::Unflatten(paintBuffer_rrect116);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage89;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage89.allocPixels(ii);
        SkCanvas tmp(fakeImage89);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect117 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect117, 28);
        SkReadBuffer paintBuffer_rrect117(paintdata_rrect117, 28);
        SkPaint paintRRect117 = SkPaintPriv::Unflatten(paintBuffer_rrect117);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata43 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata43, 92);
        SkPath path43;
        path43.readFromMemory(pathdata43, 92);
        void *paintdata_path43 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path43, 28);
        SkReadBuffer paintBuffer_path43(paintdata_path43, 28);
        SkPaint paintPath43 = SkPaintPriv::Unflatten(paintBuffer_path43);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage90;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage90.allocPixels(ii);
        SkCanvas tmp(fakeImage90);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect343);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect344);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect345);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect116);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage89)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage89);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect117);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path43, paintPath43);
        free(pathdata43);
        free(paintdata_path43);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage90)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage90);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762422903873.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest75, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect346 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect346, 28);
        SkReadBuffer paintBuffer_rect346(paintdata_rect346, 28);
        SkPaint paintRect346 = SkPaintPriv::Unflatten(paintBuffer_rect346);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect347 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect347, 28);
        SkReadBuffer paintBuffer_rect347(paintdata_rect347, 28);
        SkPaint paintRect347 = SkPaintPriv::Unflatten(paintBuffer_rect347);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect348 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect348, 28);
        SkReadBuffer paintBuffer_rect348(paintdata_rect348, 28);
        SkPaint paintRect348 = SkPaintPriv::Unflatten(paintBuffer_rect348);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect118 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect118, 28);
        SkReadBuffer paintBuffer_rrect118(paintdata_rrect118, 28);
        SkPaint paintRRect118 = SkPaintPriv::Unflatten(paintBuffer_rrect118);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage91;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage91.allocPixels(ii);
        SkCanvas tmp(fakeImage91);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect119 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect119, 28);
        SkReadBuffer paintBuffer_rrect119(paintdata_rrect119, 28);
        SkPaint paintRRect119 = SkPaintPriv::Unflatten(paintBuffer_rrect119);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata44 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata44, 92);
        SkPath path44;
        path44.readFromMemory(pathdata44, 92);
        void *paintdata_path44 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path44, 28);
        SkReadBuffer paintBuffer_path44(paintdata_path44, 28);
        SkPaint paintPath44 = SkPaintPriv::Unflatten(paintBuffer_path44);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage92;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage92.allocPixels(ii);
        SkCanvas tmp(fakeImage92);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect346);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect347);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect348);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect118);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage91)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage91);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect119);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path44, paintPath44);
        free(pathdata44);
        free(paintdata_path44);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage92)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 42.000000, 42.000000, 84.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage92);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762423021295.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest76, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect349 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect349, 28);
        SkReadBuffer paintBuffer_rect349(paintdata_rect349, 28);
        SkPaint paintRect349 = SkPaintPriv::Unflatten(paintBuffer_rect349);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect350 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect350, 28);
        SkReadBuffer paintBuffer_rect350(paintdata_rect350, 28);
        SkPaint paintRect350 = SkPaintPriv::Unflatten(paintBuffer_rect350);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect351 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect351, 28);
        SkReadBuffer paintBuffer_rect351(paintdata_rect351, 28);
        SkPaint paintRect351 = SkPaintPriv::Unflatten(paintBuffer_rect351);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect120 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect120, 28);
        SkReadBuffer paintBuffer_rrect120(paintdata_rrect120, 28);
        SkPaint paintRRect120 = SkPaintPriv::Unflatten(paintBuffer_rrect120);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage93;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage93.allocPixels(ii);
        SkCanvas tmp(fakeImage93);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect121 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect121, 28);
        SkReadBuffer paintBuffer_rrect121(paintdata_rrect121, 28);
        SkPaint paintRRect121 = SkPaintPriv::Unflatten(paintBuffer_rrect121);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata45 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata45, 92);
        SkPath path45;
        path45.readFromMemory(pathdata45, 92);
        void *paintdata_path45 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path45, 28);
        SkReadBuffer paintBuffer_path45(paintdata_path45, 28);
        SkPaint paintPath45 = SkPaintPriv::Unflatten(paintBuffer_path45);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage94;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage94.allocPixels(ii);
        SkCanvas tmp(fakeImage94);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect349);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect350);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect351);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect120);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage93)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage93);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect121);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path45, paintPath45);
        free(pathdata45);
        free(paintdata_path45);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage94)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 84.000000, 42.000000, 126.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage94);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762423151610.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest77, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect352 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect352, 28);
        SkReadBuffer paintBuffer_rect352(paintdata_rect352, 28);
        SkPaint paintRect352 = SkPaintPriv::Unflatten(paintBuffer_rect352);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect353 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect353, 28);
        SkReadBuffer paintBuffer_rect353(paintdata_rect353, 28);
        SkPaint paintRect353 = SkPaintPriv::Unflatten(paintBuffer_rect353);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect354 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect354, 28);
        SkReadBuffer paintBuffer_rect354(paintdata_rect354, 28);
        SkPaint paintRect354 = SkPaintPriv::Unflatten(paintBuffer_rect354);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect122 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect122, 28);
        SkReadBuffer paintBuffer_rrect122(paintdata_rrect122, 28);
        SkPaint paintRRect122 = SkPaintPriv::Unflatten(paintBuffer_rrect122);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage95;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage95.allocPixels(ii);
        SkCanvas tmp(fakeImage95);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect123 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect123, 28);
        SkReadBuffer paintBuffer_rrect123(paintdata_rrect123, 28);
        SkPaint paintRRect123 = SkPaintPriv::Unflatten(paintBuffer_rrect123);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata46 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata46, 92);
        SkPath path46;
        path46.readFromMemory(pathdata46, 92);
        void *paintdata_path46 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path46, 28);
        SkReadBuffer paintBuffer_path46(paintdata_path46, 28);
        SkPaint paintPath46 = SkPaintPriv::Unflatten(paintBuffer_path46);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage96;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage96.allocPixels(ii);
        SkCanvas tmp(fakeImage96);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect352);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect353);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect354);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect122);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage95)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage95);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect123);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path46, paintPath46);
        free(pathdata46);
        free(paintdata_path46);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage96)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 126.000000, 42.000000, 168.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage96);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762423267908.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest78, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect355 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect355, 28);
        SkReadBuffer paintBuffer_rect355(paintdata_rect355, 28);
        SkPaint paintRect355 = SkPaintPriv::Unflatten(paintBuffer_rect355);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect356 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect356, 28);
        SkReadBuffer paintBuffer_rect356(paintdata_rect356, 28);
        SkPaint paintRect356 = SkPaintPriv::Unflatten(paintBuffer_rect356);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect357 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect357, 28);
        SkReadBuffer paintBuffer_rect357(paintdata_rect357, 28);
        SkPaint paintRect357 = SkPaintPriv::Unflatten(paintBuffer_rect357);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect124 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect124, 28);
        SkReadBuffer paintBuffer_rrect124(paintdata_rrect124, 28);
        SkPaint paintRRect124 = SkPaintPriv::Unflatten(paintBuffer_rrect124);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage97;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage97.allocPixels(ii);
        SkCanvas tmp(fakeImage97);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect125 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect125, 28);
        SkReadBuffer paintBuffer_rrect125(paintdata_rrect125, 28);
        SkPaint paintRRect125 = SkPaintPriv::Unflatten(paintBuffer_rrect125);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata47 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata47, 92);
        SkPath path47;
        path47.readFromMemory(pathdata47, 92);
        void *paintdata_path47 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path47, 28);
        SkReadBuffer paintBuffer_path47(paintdata_path47, 28);
        SkPaint paintPath47 = SkPaintPriv::Unflatten(paintBuffer_path47);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage98;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage98.allocPixels(ii);
        SkCanvas tmp(fakeImage98);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect355);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect356);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect357);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect124);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage97)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage97);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect125);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path47, paintPath47);
        free(pathdata47);
        free(paintdata_path47);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage98)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 168.000000, 42.000000, 210.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage98);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762423400155.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest79, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect358 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect358, 28);
        SkReadBuffer paintBuffer_rect358(paintdata_rect358, 28);
        SkPaint paintRect358 = SkPaintPriv::Unflatten(paintBuffer_rect358);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect359 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect359, 28);
        SkReadBuffer paintBuffer_rect359(paintdata_rect359, 28);
        SkPaint paintRect359 = SkPaintPriv::Unflatten(paintBuffer_rect359);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect360 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect360, 28);
        SkReadBuffer paintBuffer_rect360(paintdata_rect360, 28);
        SkPaint paintRect360 = SkPaintPriv::Unflatten(paintBuffer_rect360);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect361 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect361, 28);
        SkReadBuffer paintBuffer_rect361(paintdata_rect361, 28);
        SkPaint paintRect361 = SkPaintPriv::Unflatten(paintBuffer_rect361);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect362 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect362, 28);
        SkReadBuffer paintBuffer_rect362(paintdata_rect362, 28);
        SkPaint paintRect362 = SkPaintPriv::Unflatten(paintBuffer_rect362);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data298 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400000284200409d45e80000000000803f0000000000002842000000000000803f0080b54300000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0080b54300000000000000000000803f0000504200809e430000e0420080b443010000000000504200809e43824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data298, 228);
        auto slug298 = sktext::gpu::Slug::Deserialize(data298, 228);
        free(data298);
        void *paintdata_slug298 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug298, 28);
        SkReadBuffer paintbuffer_slug298 = SkReadBuffer(paintdata_slug298, 28);
        SkPaint paint_slug298 = SkPaintPriv::Unflatten(paintbuffer_slug298);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data299 = malloc(228);
        hexToRawData("00000040000004c20000c8410000803f00000f4300f89c45e80000000000803f0000000000000f43000000000000803f0000b14300000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000b14300000000000000000000803f000011430080a043000028430080b14301000000000011430080a043b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000fc090000", data299, 228);
        auto slug299 = sktext::gpu::Slug::Deserialize(data299, 228);
        free(data299);
        void *paintdata_slug299 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug299, 28);
        SkReadBuffer paintbuffer_slug299 = SkReadBuffer(paintdata_slug299, 28);
        SkPaint paint_slug299 = SkPaintPriv::Unflatten(paintbuffer_slug299);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data300 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000b8834300409d45e80000000000803f0000000000b88343000000000000803f0080b54300000000000000000000803f010000000100000000000000010000000000803f0000000000b88343000000000000803f0080b54300000000000000000000803f0080854300809b430080a2430000b843010000000080854300809b43824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000036000000", data300, 228);
        auto slug300 = sktext::gpu::Slug::Deserialize(data300, 228);
        free(data300);
        void *paintdata_slug300 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug300, 28);
        SkReadBuffer paintbuffer_slug300 = SkReadBuffer(paintdata_slug300, 28);
        SkPaint paint_slug300 = SkPaintPriv::Unflatten(paintbuffer_slug300);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data301 = malloc(240);
        hexToRawData("00000040000008c278bd474200000000001eab4300f89c45f80000000000803f00000000001eab43000000000000803f0000b14300000000000000000000803f010000000100000000000000010000000000803f00000000001eab43000000000000803f0000b14300000000000000000000803f0000ac430000a0430000c4430000b143020000000000ac430000a0430000b9430080a043b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000ed090000010a0000", data301, 240);
        auto slug301 = sktext::gpu::Slug::Deserialize(data301, 240);
        free(data301);
        void *paintdata_slug301 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug301, 28);
        SkReadBuffer paintbuffer_slug301 = SkReadBuffer(paintdata_slug301, 28);
        SkPaint paint_slug301 = SkPaintPriv::Unflatten(paintbuffer_slug301);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data302 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40004ef44300409d45e80000000000803f00000000004ef443000000000000803f0080b54300000000000000000000803f010000000100000000000000010000000000803f00000000004ef443000000000000803f0080b54300000000000000000000803f0000f64300809b43000009440000b843010000000000f64300809b43824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003a000000", data302, 228);
        auto slug302 = sktext::gpu::Slug::Deserialize(data302, 228);
        free(data302);
        void *paintdata_slug302 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug302, 28);
        SkReadBuffer paintbuffer_slug302 = SkReadBuffer(paintdata_slug302, 28);
        SkPaint paint_slug302 = SkPaintPriv::Unflatten(paintbuffer_slug302);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data303 = malloc(240);
        hexToRawData("00000040000004c278bd47420000803f006b0d4400f89c45f80000000000803f00000000006b0d44000000000000803f0000b14300000000000000000000803f010000000100000000000000010000000000803f00000000006b0d44000000000000803f0000b14300000000000000000000803f00000e440080a04300c019440080b1430200000000000e440080a043008014440080a043b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000ff090000fa090000", data303, 240);
        auto slug303 = sktext::gpu::Slug::Deserialize(data303, 240);
        free(data303);
        void *paintdata_slug303 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug303, 28);
        SkReadBuffer paintbuffer_slug303 = SkReadBuffer(paintdata_slug303, 28);
        SkPaint paint_slug303 = SkPaintPriv::Unflatten(paintbuffer_slug303);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data304 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f954400709d45e80000000000803f00000000809f9544000000000000803f0080b84300000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0080b84300000000000000000000803f00a096440000a94300c09b440080ac430100000000a096440000a943675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data304, 228);
        auto slug304 = sktext::gpu::Slug::Deserialize(data304, 228);
        free(data304);
        void *paintdata_slug304 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug304, 28);
        SkReadBuffer paintbuffer_slug304 = SkReadBuffer(paintdata_slug304, 28);
        SkPaint paint_slug304 = SkPaintPriv::Unflatten(paintbuffer_slug304);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data305 = malloc(252);
        hexToRawData("0000803f000028c2040011430000a0400000444300c8a245080100000000803f0000000000004443000000000000803f0000074400000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000074400000000000000000000803f000045430000f9430080aa430040084403000000000045430000f943000077430000f943008093430000f94365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300300000080d30000f8890000b8210100", data305, 252);
        auto slug305 = sktext::gpu::Slug::Deserialize(data305, 252);
        free(data305);
        void *paintdata_slug305 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug305, 28);
        SkReadBuffer paintbuffer_slug305 = SkReadBuffer(paintdata_slug305, 28);
        SkPaint paint_slug305 = SkPaintPriv::Unflatten(paintbuffer_slug305);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data306 = malloc(324);
        hexToRawData("000040400000e8c1baab3f43000000000000444300a8a445680100000000803f0000000000004443000000000000803f0000164400000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000164400000000000000000000803f0000474300c00e440080c14300001644090000000000474300c00e4400005b4300c00e4400007243008012440000824300c00e440000934300c00e4400809d4300c00e440080a843000010440000ae4300c00e440000b84300c00e44f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000e8090000e4090000800c0000f3090000e8090000f8090000700c0000eb090000e7090000", data306, 324);
        auto slug306 = sktext::gpu::Slug::Deserialize(data306, 324);
        free(data306);
        void *paintdata_slug306 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug306, 28);
        SkReadBuffer paintbuffer_slug306 = SkReadBuffer(paintdata_slug306, 28);
        SkPaint paint_slug306 = SkPaintPriv::Unflatten(paintbuffer_slug306);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data307 = malloc(448);
        hexToRawData("00523641000008c22f659043000080400050c24300a8a445200200000000803f000000000050c243000000000000803f0000164400000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000164400000000000000000000803f0000c84300800d440080eb4300001744020000000000c84300c00d440080dd4300800d44817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000164400000000000000000000803f0080f34300c00d440080294400001744050000000080f34300c00d440080034400c00d4400000d4400c00d4400c0164400c00d440080204400400e44817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000da630100049f01009e8c0000", data307, 448);
        auto slug307 = sktext::gpu::Slug::Deserialize(data307, 448);
        free(data307);
        void *paintdata_slug307 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug307, 28);
        SkReadBuffer paintbuffer_slug307 = SkReadBuffer(paintdata_slug307, 28);
        SkPaint paint_slug307 = SkPaintPriv::Unflatten(paintbuffer_slug307);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect363 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect363, 28);
        SkReadBuffer paintBuffer_rect363(paintdata_rect363, 28);
        SkPaint paintRect363 = SkPaintPriv::Unflatten(paintBuffer_rect363);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage99;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 809);
        fakeImage99.allocPixels(ii);
        SkCanvas tmp(fakeImage99);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 809), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect364 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect364, 28);
        SkReadBuffer paintBuffer_rect364(paintdata_rect364, 28);
        SkPaint paintRect364 = SkPaintPriv::Unflatten(paintBuffer_rect364);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage100;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 809);
        fakeImage100.allocPixels(ii);
        SkCanvas tmp(fakeImage100);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 809), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect365 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect365, 28);
        SkReadBuffer paintBuffer_rect365(paintdata_rect365, 28);
        SkPaint paintRect365 = SkPaintPriv::Unflatten(paintBuffer_rect365);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage101;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 809);
        fakeImage101.allocPixels(ii);
        SkCanvas tmp(fakeImage101);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 809), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect126 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect126, 28);
        SkReadBuffer paintBuffer_rrect126(paintdata_rrect126, 28);
        SkPaint paintRRect126 = SkPaintPriv::Unflatten(paintBuffer_rrect126);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage102;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage102.allocPixels(ii);
        SkCanvas tmp(fakeImage102);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage103;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage103.allocPixels(ii);
        SkCanvas tmp(fakeImage103);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect127 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect127, 28);
        SkReadBuffer paintBuffer_rrect127(paintdata_rrect127, 28);
        SkPaint paintRRect127 = SkPaintPriv::Unflatten(paintBuffer_rrect127);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata48 = malloc(224);
        hexToRawData("0501000016000000040000000f0000005839fc408b6c37408b6cff408b6c37409cc400417b143e40ac1c00416ce743405839b8407b1400417110b740e05b01418941b44042600141355e8a401f850141237a874075870141d34d86404035004116d9fe3f93184440bdbef33fe4973740508d074014ae374019045e404f8d3740e04f65404f8d37400bd76b4030083c402b876e4082c04240d1229f406666c640b81ec94084eb41405a69cb40ccf936401058d1403c0a37405839fc40ec7c37401e04583f462f563fe4da0a3f5bbf543f00040103010301030104010103010500", pathdata48, 224);
        SkPath path48;
        path48.readFromMemory(pathdata48, 224);
        void *paintdata_path48 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_path48, 28);
        SkReadBuffer paintBuffer_path48(paintdata_path48, 28);
        SkPaint paintPath48 = SkPaintPriv::Unflatten(paintBuffer_path48);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -4848.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 4848.000000, 1344.000000, 5456.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect358);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect359);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 5095.000000, 1316.000000, 5098.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect360);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect361);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 6738.000000, 1316.000000, 6741.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect362);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug298->draw(canvas, paint_slug298);
        slug298->draw(canvas);
        free(paintdata_slug298);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug299->draw(canvas, paint_slug299);
        slug299->draw(canvas);
        free(paintdata_slug299);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug300->draw(canvas, paint_slug300);
        slug300->draw(canvas);
        free(paintdata_slug300);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug301->draw(canvas, paint_slug301);
        slug301->draw(canvas);
        free(paintdata_slug301);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug302->draw(canvas, paint_slug302);
        slug302->draw(canvas);
        free(paintdata_slug302);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug303->draw(canvas, paint_slug303);
        slug303->draw(canvas);
        free(paintdata_slug303);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug304->draw(canvas, paint_slug304);
        slug304->draw(canvas);
        free(paintdata_slug304);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 5159.000000, 1274.000000, 5227.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug305->draw(canvas, paint_slug305);
        slug305->draw(canvas);
        free(paintdata_slug305);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 5227.000000, 1274.000000, 5285.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug306->draw(canvas, paint_slug306);
        slug306->draw(canvas);
        free(paintdata_slug306);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug307->draw(canvas, paint_slug307);
        slug307->draw(canvas);
        free(paintdata_slug307);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 3354.000000, 1316.000000, 5098.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 4130.000000, 1274.000000, 4942.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 4536.000000, 444.000000, 4925.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect363);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage99)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 224.258881, 360.000000, 584.741089);
    SkRect dst = SkRect::MakeLTRB(56.000000, 4536.000000, 444.000000, 4925.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage99);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(462.000000, 4536.000000, 850.000000, 4925.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect364);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage100)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 224.258881, 360.000000, 584.741089);
    SkRect dst = SkRect::MakeLTRB(462.000000, 4536.000000, 850.000000, 4925.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage100);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(868.000000, 4536.000000, 1256.000000, 4925.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect365);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage101)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 224.258881, 360.000000, 584.741089);
    SkRect dst = SkRect::MakeLTRB(868.000000, 4536.000000, 1256.000000, 4925.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage101);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 5150.000000, 168.000000, 5262.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect126);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 5150.000000, 168.000000, 5262.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage102)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 5150.000000, 168.000000, 5262.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage102);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 5159.000000, 1274.000000, 5227.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage103)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(367.000000, 5167.000000, 430.000000, 5216.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage103);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 5151.500000, 166.500000, 5260.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect127);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 5217.000000, 172.000000, 5266.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,4139.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,308.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path48, paintPath48);
        free(pathdata48);
        free(paintdata_path48);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762423498033.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest80, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect366 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect366, 28);
        SkReadBuffer paintBuffer_rect366(paintdata_rect366, 28);
        SkPaint paintRect366 = SkPaintPriv::Unflatten(paintBuffer_rect366);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect367 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect367, 28);
        SkReadBuffer paintBuffer_rect367(paintdata_rect367, 28);
        SkPaint paintRect367 = SkPaintPriv::Unflatten(paintBuffer_rect367);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect368 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect368, 28);
        SkReadBuffer paintBuffer_rect368(paintdata_rect368, 28);
        SkPaint paintRect368 = SkPaintPriv::Unflatten(paintBuffer_rect368);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect369 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect369, 28);
        SkReadBuffer paintBuffer_rect369(paintdata_rect369, 28);
        SkPaint paintRect369 = SkPaintPriv::Unflatten(paintBuffer_rect369);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect370 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect370, 28);
        SkReadBuffer paintBuffer_rect370(paintdata_rect370, 28);
        SkPaint paintRect370 = SkPaintPriv::Unflatten(paintBuffer_rect370);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data308 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420020d344e80000000000803f0000000000002842000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000484200000000000000000000803f00005042000080400000e04200004042010000000000504200008040824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data308, 228);
        auto slug308 = sktext::gpu::Slug::Deserialize(data308, 228);
        free(data308);
        void *paintdata_slug308 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug308, 28);
        SkReadBuffer paintbuffer_slug308 = SkReadBuffer(paintdata_slug308, 28);
        SkPaint paint_slug308 = SkPaintPriv::Unflatten(paintbuffer_slug308);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data309 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f430020d244180100000000803f0000000000000f43000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000284200000000000000000000803f00001143000000410000754300002c4204000000000011430000004100002d4300001041000047430000104100005e4300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e8090000eb090000f3090000", data309, 264);
        auto slug309 = sktext::gpu::Slug::Deserialize(data309, 264);
        free(data309);
        void *paintdata_slug309 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug309, 28);
        SkReadBuffer paintbuffer_slug309 = SkReadBuffer(paintdata_slug309, 28);
        SkPaint paint_slug309 = SkPaintPriv::Unflatten(paintbuffer_slug309);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data310 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa430020d344e80000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000484200000000000000000000803f0080ac43000000c00080c94300005c42010000000080ac43000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data310, 228);
        auto slug310 = sktext::gpu::Slug::Deserialize(data310, 228);
        free(data310);
        void *paintdata_slug310 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug310, 28);
        SkReadBuffer paintbuffer_slug310 = SkReadBuffer(paintdata_slug310, 28);
        SkPaint paint_slug310 = SkPaintPriv::Unflatten(paintbuffer_slug310);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data311 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d2430020d244180100000000803f000000000006d243000000000000803f0000284200000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0000284200000000000000000000803f0000d443000000410080024400002c42040000000000d443000010410000e043000000410000ed43000010410080f94300000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f0090000000a0000e7090000", data311, 264);
        auto slug311 = sktext::gpu::Slug::Deserialize(data311, 264);
        free(data311);
        void *paintdata_slug311 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug311, 28);
        SkReadBuffer paintbuffer_slug311 = SkReadBuffer(paintdata_slug311, 28);
        SkPaint paint_slug311 = SkPaintPriv::Unflatten(paintbuffer_slug311);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data312 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a440020d344e80000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000484200000000000000000000803f00801b44000000c00080294400005c420100000000801b44000000c0824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data312, 228);
        auto slug312 = sktext::gpu::Slug::Deserialize(data312, 228);
        free(data312);
        void *paintdata_slug312 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug312, 28);
        SkReadBuffer paintbuffer_slug312 = SkReadBuffer(paintdata_slug312, 28);
        SkPaint paint_slug312 = SkPaintPriv::Unflatten(paintbuffer_slug312);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data313 = malloc(412);
        hexToRawData("0000803f000010c2dac2d2420000404000d72d440020d244f00100000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f020000000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00002e440000004100003d4400002c420300000000002e440000104100c03444000014420040374400000041b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f5090000f90b00000b0a00000100000000000000010000000000803f0000000000d72d44000000000000803f0000284200000000000000000000803f00c03d440000c04000404844000034420100000000c03d440000c0406f9d9f074c00000001000000636572733800000001000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000df740000", data313, 412);
        auto slug313 = sktext::gpu::Slug::Deserialize(data313, 412);
        free(data313);
        void *paintdata_slug313 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug313, 28);
        SkReadBuffer paintbuffer_slug313 = SkReadBuffer(paintdata_slug313, 28);
        SkPaint paint_slug313 = SkPaintPriv::Unflatten(paintbuffer_slug313);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data314 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f95440000d444e80000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000644200000000000000000000803f00a096440000d04100c09b44000004420100000000a096440000d041675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data314, 228);
        auto slug314 = sktext::gpu::Slug::Deserialize(data314, 228);
        free(data314);
        void *paintdata_slug314 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug314, 28);
        SkReadBuffer paintbuffer_slug314 = SkReadBuffer(paintdata_slug314, 28);
        SkPaint paint_slug314 = SkPaintPriv::Unflatten(paintbuffer_slug314);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data315 = malloc(288);
        hexToRawData("0000803f000028c2050092430000a040000044430040e944380100000000803f0000000000004443000000000000803f0000634300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000634300000000000000000000803f00004543000039430000f44300006843060000000000454300003943000077430000394300009643000039430080ac43000039430000c64300003b430080dd4300003c4365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43006000000c43c010020a8010094110100d8910000e098000000aa0000", data315, 288);
        auto slug315 = sktext::gpu::Slug::Deserialize(data315, 288);
        free(data315);
        void *paintdata_slug315 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug315, 28);
        SkReadBuffer paintbuffer_slug315 = SkReadBuffer(paintdata_slug315, 28);
        SkPaint paint_slug315 = SkPaintPriv::Unflatten(paintbuffer_slug315);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data316 = malloc(324);
        hexToRawData("0000803f0000e8c1baab3f43000000000000444300e0f044680100000000803f0000000000004443000000000000803f0000904300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000904300000000000000000000803f00004543008081430080c1430000904309000000000045430080814300005c430000894300006e43008081430000824300808143000093430080814300009e43008081430080a843000084430000ad43008081430000b84300808143f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000080a0000800c0000ef090000070a0000e8090000e8090000700c0000e7090000070a0000", data316, 324);
        auto slug316 = sktext::gpu::Slug::Deserialize(data316, 324);
        free(data316);
        void *paintdata_slug316 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug316, 28);
        SkReadBuffer paintbuffer_slug316 = SkReadBuffer(paintdata_slug316, 28);
        SkPaint paint_slug316 = SkPaintPriv::Unflatten(paintbuffer_slug316);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data317 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c24300e0f044200200000000803f000000000050c243000000000000803f0000904300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0000c84300007e430080eb4300009243020000000000c84300007f430080dd4300007e43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000904300000000000000000000803f0080f34300007f430080294400009243050000000080f34300007f430080034400007f4300c00d440080804300001744008080430040204400007f43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data317, 448);
        auto slug317 = sktext::gpu::Slug::Deserialize(data317, 448);
        free(data317);
        void *paintdata_slug317 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug317, 28);
        SkReadBuffer paintbuffer_slug317 = SkReadBuffer(paintdata_slug317, 28);
        SkPaint paint_slug317 = SkPaintPriv::Unflatten(paintbuffer_slug317);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data318 = malloc(468);
        hexToRawData("0000803f000040c200a09244000010410000604200600045280200000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080cf4300000000000000000000803f000064420080b74300a099440000d44315000000000064420000b8430000e4420080b94300002a430000b843000066430080b74300008d430080b7430000ac430080c0430000c6430000b8430000e1430080b7430080fd430080b74300c00c440000b84300401a440080b743008028440000b943004036440000b843004044440080b743008052440080b743008060440000b84300806e440000b84300007e440080cc43002085440080b84300408c440080b743002093440080b743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000ac7800004cea0000389a0100b8d80000906c0100a4c3010054780000f4850000f8890000a8750000b48001007cd500006cd90000f479000020f4000080ee000098850000a8c30100f88c000054da0000048c0000", data318, 468);
        auto slug318 = sktext::gpu::Slug::Deserialize(data318, 468);
        free(data318);
        void *paintdata_slug318 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug318, 28);
        SkReadBuffer paintbuffer_slug318 = SkReadBuffer(paintdata_slug318, 28);
        SkPaint paint_slug318 = SkPaintPriv::Unflatten(paintbuffer_slug318);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data319 = malloc(468);
        hexToRawData("0000803f000040c200c09244000010410000604200a00545280200000000803f0000000000006042000000000000803f0080f94300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080f94300000000000000000000803f000064420080e14300c099440000fe4315000000000064420000e3430000e6420080e14300002b430000e243000061430000e24300808c430080e1430000a9430080e1430000c5430000e2430000e2430080e1430000fd430000e24300800c440000e34300c01a440000e343008028440000e443000038440080f643004044440000e24300c052440000e343008060440000e44300806e440080e14300407c440080e143006085440000e34300408c440080e343002093440000e243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43015000000800b0100f8890000a87500006cd90000f479000020f4000080ee0000d0160100608200007cd50000208e000054b40000a8c30100e8c60000208e000054b40000fceb000068750000e0d8000088b60000e4ca0000", data319, 468);
        auto slug319 = sktext::gpu::Slug::Deserialize(data319, 468);
        free(data319);
        void *paintdata_slug319 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug319, 28);
        SkReadBuffer paintbuffer_slug319 = SkReadBuffer(paintdata_slug319, 28);
        SkPaint paint_slug319 = SkPaintPriv::Unflatten(paintbuffer_slug319);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data320 = malloc(496);
        hexToRawData("0000a040000040c206410244000010410000604200e00a45600200000000803f0000000000006042000000000000803f00c0114400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f000074420040074400002243000012440300000000007442008007440000b442004007440000f04200400744eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000e8090000e4090000af0e00000100000000000000010000000000803f0000000000006042000000000000803f00c0114400000000000000000000803f00002b4300c0054400401044000014440800000000002b430040104400005c430000064400008a4300c005440000a643008006440080c243004006440000de4300c005440080fa4300c0064400400c4400000f44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43008000000a8c3010018780000048c0000800b010044ef0000e4d8000060110100b0c60100", data320, 496);
        auto slug320 = sktext::gpu::Slug::Deserialize(data320, 496);
        free(data320);
        void *paintdata_slug320 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug320, 28);
        SkReadBuffer paintbuffer_slug320 = SkReadBuffer(paintdata_slug320, 28);
        SkPaint paint_slug320 = SkPaintPriv::Unflatten(paintbuffer_slug320);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect128 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect128, 28);
        SkReadBuffer paintBuffer_rrect128(paintdata_rrect128, 28);
        SkPaint paintRRect128 = SkPaintPriv::Unflatten(paintBuffer_rrect128);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage104;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage104.allocPixels(ii);
        SkCanvas tmp(fakeImage104);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage105;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage105.allocPixels(ii);
        SkCanvas tmp(fakeImage105);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect129 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect129, 28);
        SkReadBuffer paintBuffer_rrect129(paintdata_rrect129, 28);
        SkPaint paintRRect129 = SkPaintPriv::Unflatten(paintBuffer_rrect129);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata49 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata49, 92);
        SkPath path49;
        path49.readFromMemory(pathdata49, 92);
        void *paintdata_path49 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path49, 28);
        SkReadBuffer paintBuffer_path49(paintdata_path49, 28);
        SkPaint paintPath49 = SkPaintPriv::Unflatten(paintBuffer_path49);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage106;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage106.allocPixels(ii);
        SkCanvas tmp(fakeImage106);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1818.000000, 1344.000000, 2426.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect366);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect367);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1753.000000, 1316.000000, 1756.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect368);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect369);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect370);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 112.000000, 1316.000000, 1756.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug308->draw(canvas, paint_slug308);
        slug308->draw(canvas);
        free(paintdata_slug308);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug309->draw(canvas, paint_slug309);
        slug309->draw(canvas);
        free(paintdata_slug309);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug310->draw(canvas, paint_slug310);
        slug310->draw(canvas);
        free(paintdata_slug310);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug311->draw(canvas, paint_slug311);
        slug311->draw(canvas);
        free(paintdata_slug311);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug312->draw(canvas, paint_slug312);
        slug312->draw(canvas);
        free(paintdata_slug312);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug313->draw(canvas, paint_slug313);
        slug313->draw(canvas);
        free(paintdata_slug313);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug314->draw(canvas, paint_slug314);
        slug314->draw(canvas);
        free(paintdata_slug314);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug315->draw(canvas, paint_slug315);
        slug315->draw(canvas);
        free(paintdata_slug315);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1885.000000, 1274.000000, 1943.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug316->draw(canvas, paint_slug316);
        slug316->draw(canvas);
        free(paintdata_slug316);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug317->draw(canvas, paint_slug317);
        slug317->draw(canvas);
        free(paintdata_slug317);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug318->draw(canvas, paint_slug318);
        slug318->draw(canvas);
        free(paintdata_slug318);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug319->draw(canvas, paint_slug319);
        slug319->draw(canvas);
        free(paintdata_slug319);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug320->draw(canvas, paint_slug320);
        slug320->draw(canvas);
        free(paintdata_slug320);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect128);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage104)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage104);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 1816.000000, 1274.000000, 1885.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage105)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(514.000000, 1824.000000, 577.000000, 1873.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage105);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect129);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path49, paintPath49);
        free(pathdata49);
        free(paintdata_path49);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage106)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 210.000000, 42.000000, 252.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage106);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 218F6FD22A1503484FF178A07B190261_1759762423531141.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest81, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect371 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect371, 28);
        SkReadBuffer paintBuffer_rect371(paintdata_rect371, 28);
        SkPaint paintRect371 = SkPaintPriv::Unflatten(paintBuffer_rect371);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect372 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect372, 28);
        SkReadBuffer paintBuffer_rect372(paintdata_rect372, 28);
        SkPaint paintRect372 = SkPaintPriv::Unflatten(paintBuffer_rect372);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect373 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect373, 28);
        SkReadBuffer paintBuffer_rect373(paintdata_rect373, 28);
        SkPaint paintRect373 = SkPaintPriv::Unflatten(paintBuffer_rect373);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect130 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect130, 28);
        SkReadBuffer paintBuffer_rrect130(paintdata_rrect130, 28);
        SkPaint paintRRect130 = SkPaintPriv::Unflatten(paintBuffer_rrect130);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage107;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage107.allocPixels(ii);
        SkCanvas tmp(fakeImage107);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect131 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect131, 28);
        SkReadBuffer paintBuffer_rrect131(paintdata_rrect131, 28);
        SkPaint paintRRect131 = SkPaintPriv::Unflatten(paintBuffer_rrect131);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata50 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata50, 92);
        SkPath path50;
        path50.readFromMemory(pathdata50, 92);
        void *paintdata_path50 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path50, 28);
        SkReadBuffer paintBuffer_path50(paintdata_path50, 28);
        SkPaint paintPath50 = SkPaintPriv::Unflatten(paintBuffer_path50);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage108;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage108.allocPixels(ii);
        SkCanvas tmp(fakeImage108);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect371);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect372);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect373);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect130);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage107)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage107);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect131);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path50, paintPath50);
        free(pathdata50);
        free(paintdata_path50);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage108)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 252.000000, 42.000000, 294.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage108);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762423649156.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest82, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect374 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect374, 28);
        SkReadBuffer paintBuffer_rect374(paintdata_rect374, 28);
        SkPaint paintRect374 = SkPaintPriv::Unflatten(paintBuffer_rect374);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect375 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect375, 28);
        SkReadBuffer paintBuffer_rect375(paintdata_rect375, 28);
        SkPaint paintRect375 = SkPaintPriv::Unflatten(paintBuffer_rect375);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect376 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect376, 28);
        SkReadBuffer paintBuffer_rect376(paintdata_rect376, 28);
        SkPaint paintRect376 = SkPaintPriv::Unflatten(paintBuffer_rect376);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect132 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect132, 28);
        SkReadBuffer paintBuffer_rrect132(paintdata_rrect132, 28);
        SkPaint paintRRect132 = SkPaintPriv::Unflatten(paintBuffer_rrect132);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage109;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage109.allocPixels(ii);
        SkCanvas tmp(fakeImage109);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect133 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect133, 28);
        SkReadBuffer paintBuffer_rrect133(paintdata_rrect133, 28);
        SkPaint paintRRect133 = SkPaintPriv::Unflatten(paintBuffer_rrect133);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata51 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata51, 92);
        SkPath path51;
        path51.readFromMemory(pathdata51, 92);
        void *paintdata_path51 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path51, 28);
        SkReadBuffer paintBuffer_path51(paintdata_path51, 28);
        SkPaint paintPath51 = SkPaintPriv::Unflatten(paintBuffer_path51);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage110;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage110.allocPixels(ii);
        SkCanvas tmp(fakeImage110);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect374);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect375);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect376);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect132);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage109)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage109);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect133);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path51, paintPath51);
        free(pathdata51);
        free(paintdata_path51);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage110)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 294.000000, 42.000000, 336.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage110);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 218F6FD22A1503484FF178A07B190261_1759762423782365.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest83, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect377 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect377, 28);
        SkReadBuffer paintBuffer_rect377(paintdata_rect377, 28);
        SkPaint paintRect377 = SkPaintPriv::Unflatten(paintBuffer_rect377);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect378 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect378, 28);
        SkReadBuffer paintBuffer_rect378(paintdata_rect378, 28);
        SkPaint paintRect378 = SkPaintPriv::Unflatten(paintBuffer_rect378);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect379 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect379, 28);
        SkReadBuffer paintBuffer_rect379(paintdata_rect379, 28);
        SkPaint paintRect379 = SkPaintPriv::Unflatten(paintBuffer_rect379);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect134 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect134, 28);
        SkReadBuffer paintBuffer_rrect134(paintdata_rrect134, 28);
        SkPaint paintRRect134 = SkPaintPriv::Unflatten(paintBuffer_rrect134);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage111;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage111.allocPixels(ii);
        SkCanvas tmp(fakeImage111);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect135 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect135, 28);
        SkReadBuffer paintBuffer_rrect135(paintdata_rrect135, 28);
        SkPaint paintRRect135 = SkPaintPriv::Unflatten(paintBuffer_rrect135);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata52 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata52, 92);
        SkPath path52;
        path52.readFromMemory(pathdata52, 92);
        void *paintdata_path52 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path52, 28);
        SkReadBuffer paintBuffer_path52(paintdata_path52, 28);
        SkPaint paintPath52 = SkPaintPriv::Unflatten(paintBuffer_path52);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage112;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage112.allocPixels(ii);
        SkCanvas tmp(fakeImage112);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect377);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect378);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect379);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect134);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage111)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage111);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect135);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path52, paintPath52);
        free(pathdata52);
        free(paintdata_path52);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage112)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 336.000000, 42.000000, 378.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage112);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762423898664.paintbuf
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest84, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect380 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect380, 28);
        SkReadBuffer paintBuffer_rect380(paintdata_rect380, 28);
        SkPaint paintRect380 = SkPaintPriv::Unflatten(paintBuffer_rect380);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect381 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect381, 28);
        SkReadBuffer paintBuffer_rect381(paintdata_rect381, 28);
        SkPaint paintRect381 = SkPaintPriv::Unflatten(paintBuffer_rect381);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect382 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect382, 28);
        SkReadBuffer paintBuffer_rect382(paintdata_rect382, 28);
        SkPaint paintRect382 = SkPaintPriv::Unflatten(paintBuffer_rect382);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect136 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect136, 28);
        SkReadBuffer paintBuffer_rrect136(paintdata_rrect136, 28);
        SkPaint paintRRect136 = SkPaintPriv::Unflatten(paintBuffer_rrect136);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage113;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage113.allocPixels(ii);
        SkCanvas tmp(fakeImage113);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect137 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect137, 28);
        SkReadBuffer paintBuffer_rrect137(paintdata_rrect137, 28);
        SkPaint paintRRect137 = SkPaintPriv::Unflatten(paintBuffer_rrect137);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata53 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata53, 92);
        SkPath path53;
        path53.readFromMemory(pathdata53, 92);
        void *paintdata_path53 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path53, 28);
        SkReadBuffer paintBuffer_path53(paintdata_path53, 28);
        SkPaint paintPath53 = SkPaintPriv::Unflatten(paintBuffer_path53);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage114;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 672);
        fakeImage114.allocPixels(ii);
        SkCanvas tmp(fakeImage114);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 672), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -1818.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(122.000000, 2053.000000, 172.000000, 2103.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect380);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect381);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 3351.000000, 1316.000000, 3354.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect382);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect136);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage113)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 1808.000000, 168.000000, 1920.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage113);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 1809.500000, 166.500000, 1918.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect137);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 1756.000000, 1316.000000, 3354.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,1091.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path53, paintPath53);
        free(pathdata53);
        free(paintdata_path53);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage114)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 378.000000, 42.000000, 420.000000);
    SkRect dst = SkRect::MakeLTRB(123.000000, 1875.000000, 172.000000, 1924.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage114);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 218F6FD22A1503484FF178A07B190261_1759762424040253.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest85, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect383 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect383, 28);
        SkReadBuffer paintBuffer_rect383(paintdata_rect383, 28);
        SkPaint paintRect383 = SkPaintPriv::Unflatten(paintBuffer_rect383);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect384 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect384, 28);
        SkReadBuffer paintBuffer_rect384(paintdata_rect384, 28);
        SkPaint paintRect384 = SkPaintPriv::Unflatten(paintBuffer_rect384);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect385 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect385, 28);
        SkReadBuffer paintBuffer_rect385(paintdata_rect385, 28);
        SkPaint paintRect385 = SkPaintPriv::Unflatten(paintBuffer_rect385);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data321 = malloc(324);
        hexToRawData("000040400000e8c1baab3f43000000000000444300a8a445680100000000803f0000000000004443000000000000803f0000c0c000000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000c0c000000000000000000000803f0000474300000cc20080c1430000c0c0090000000000474300000cc200005b4300000cc2000072430000a0c10000824300000cc20000934300000cc200809d4300000cc20080a8430000f0c10000ae4300000cc20000b84300000cc2f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000e8090000e4090000800c0000f3090000e8090000f8090000700c0000eb090000e7090000", data321, 324);
        auto slug321 = sktext::gpu::Slug::Deserialize(data321, 324);
        free(data321);
        void *paintdata_slug321 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug321, 28);
        SkReadBuffer paintbuffer_slug321 = SkReadBuffer(paintdata_slug321, 28);
        SkPaint paint_slug321 = SkPaintPriv::Unflatten(paintbuffer_slug321);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data322 = malloc(448);
        hexToRawData("00523641000008c22f659043000080400050c24300a8a445200200000000803f000000000050c243000000000000803f0000c0c000000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000c0c000000000000000000000803f0000c843000020c20080eb43000000c0020000000000c84300001cc20080dd43000020c2817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000c0c000000000000000000000803f0080f34300001cc200802944000000c0050000000080f34300001cc20080034400001cc200000d4400001cc200c0164400001cc200802044000014c2817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000da630100049f01009e8c0000", data322, 448);
        auto slug322 = sktext::gpu::Slug::Deserialize(data322, 448);
        free(data322);
        void *paintdata_slug322 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug322, 28);
        SkReadBuffer paintbuffer_slug322 = SkReadBuffer(paintdata_slug322, 28);
        SkPaint paint_slug322 = SkPaintPriv::Unflatten(paintbuffer_slug322);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data323 = malloc(668);
        hexToRawData("00000000000040c2ae072c440000c0400000604200a8a845580300000000803f0000000000006042000000000000803f0000f44200000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0000f44200000000000000000000803f000060420000a2420000b8420000f44201000000000060420000a2420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000006042000000000000803f0000f44200000000000000000000803f0000c2420000944200803044000000430b0000000000c24200009a4200001543000094420000524300009442000082430000944200809e43000096420000bb43000096420080d643000094420000f34300009c42008007440000944200801544000094420080234400009642c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300b000000b4980000d8b6000074750000ec230100dc7d00003cd90000a0f50000640b0100b4a20000ac8b0000d0a000000100000000000000010000000000803f0000000000006042000000000000803f0000f44200000000000000000000803f000031440000a24200003a440000f44201000000000031440000a2420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data323, 668);
        auto slug323 = sktext::gpu::Slug::Deserialize(data323, 668);
        free(data323);
        void *paintdata_slug323 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug323, 28);
        SkReadBuffer paintbuffer_slug323 = SkReadBuffer(paintdata_slug323, 28);
        SkPaint paint_slug323 = SkPaintPriv::Unflatten(paintbuffer_slug323);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data324 = malloc(228);
        hexToRawData("0000144200003cc2000050420000c04000103a4400a8a845e80000000000803f0000000000103a44000000000000803f0000f44200000000000000000000803f010000000100000000000000010000000000803f0000000000103a44000000000000803f0000f44200000000000000000000803f00404344000096420000474400000043010000000040434400009642ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000f5c40100", data324, 228);
        auto slug324 = sktext::gpu::Slug::Deserialize(data324, 228);
        free(data324);
        void *paintdata_slug324 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug324, 28);
        SkReadBuffer paintbuffer_slug324 = SkReadBuffer(paintdata_slug324, 28);
        SkPaint paint_slug324 = SkPaintPriv::Unflatten(paintbuffer_slug324);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data325 = malloc(460);
        hexToRawData("0000000000003cc25c8fd3430000c0400010484400a8a845300200000000803f0000000000104844000000000000803f0000f44200000000000000000000803f020000000100000000000000010000000000803f0000000000104844000000000000803f0000f44200000000000000000000803f004048440000a242000051440000f44201000000004048440000a2420753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000390c00000100000000000000010000000000803f0000000000104844000000000000803f0000f44200000000000000000000803f00805144000096420000994400000043070000000080514400009a4200805f440000964200806d440000964200c07b440000964200c0844400009a4200e08b44000096420020934400009a42c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430070000004d7f0100e5c7000001cc0000e54901003d8b0000e989000069980100", data325, 460);
        auto slug325 = sktext::gpu::Slug::Deserialize(data325, 460);
        free(data325);
        void *paintdata_slug325 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug325, 28);
        SkReadBuffer paintbuffer_slug325 = SkReadBuffer(paintdata_slug325, 28);
        SkPaint paint_slug325 = SkPaintPriv::Unflatten(paintbuffer_slug325);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data326 = malloc(448);
        hexToRawData("00000040000040c20000ba430000c040000060420048ab45200200000000803f0000000000006042000000000000803f00004e4300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00004e4300000000000000000000803f0000684200001e430080c24300005443060000000000684200001f430000e64200001f4300002c4300001e430000644300001e4300008d4300001e430080a94300002243c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43006000000e8890000e44901005cb500005cb50000c8a20000ac1101000100000000000000010000000000803f0000000000006042000000000000803f00004e4300000000000000000000803f0000c443000025430000d64300004e43010000000000c443000025430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data326, 448);
        auto slug326 = sktext::gpu::Slug::Deserialize(data326, 448);
        free(data326);
        void *paintdata_slug326 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug326, 28);
        SkReadBuffer paintbuffer_slug326 = SkReadBuffer(paintdata_slug326, 28);
        SkPaint paint_slug326 = SkPaintPriv::Unflatten(paintbuffer_slug326);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data327 = malloc(396);
        hexToRawData("00008040000040c200c051440000c0400010d6430048ab45c80100000000803f000000000010d643000000000000803f00004e4300000000000000000000803f010000000100000000000000010000000000803f000000000010d643000000000000803f00004e4300000000000000000000803f0000d84300001e4300609e44000054430f0000000000d84300001f430080f24300001e4300800944000022430040164400001e430080234400001e43008031440000214300803f440000214300804d4400001f4300805b4400001f4300c0694400001f4300807744000021430040834400001f4300c0894400001e4300e0904400001e4300c0974400001f43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300f000000fdc40100ed23010055d40000d116010081d30000d91201004d7f0100e5c7000001cc0000e54901003d8b000029ad000069d90000f1aa000061820000", data327, 396);
        auto slug327 = sktext::gpu::Slug::Deserialize(data327, 396);
        free(data327);
        void *paintdata_slug327 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug327, 28);
        SkReadBuffer paintbuffer_slug327 = SkReadBuffer(paintdata_slug327, 28);
        SkPaint paint_slug327 = SkPaintPriv::Unflatten(paintbuffer_slug327);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data328 = malloc(456);
        hexToRawData("0000803f000040c200a08b44000010410000604200e8ad45180200000000803f0000000000006042000000000000803f0000914300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000914300000000000000000000803f000064420000724300a09244008095431400000000006442000073430000e642000073430000304300008e43000063430000734300008d43000073430080a843000073430000c543000073430000e243000075430000fd430000724300800c440000754300001c4400008e43008028440000734300803644000073430080444400007343000053440000754300c061440000724300806e440000724300407c44000072430000864400008e4300608c4400007343ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430140000007cdb0000d0b70100a8c30100e4490100809900006c5f0100d052010068980100ac7a0100d8620100a8c30100089a0100bc380100f874000068980100b416010050770000dc370100a8c30100e4490100", data328, 456);
        auto slug328 = sktext::gpu::Slug::Deserialize(data328, 456);
        free(data328);
        void *paintdata_slug328 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug328, 28);
        SkReadBuffer paintbuffer_slug328 = SkReadBuffer(paintdata_slug328, 28);
        SkPaint paint_slug328 = SkPaintPriv::Unflatten(paintbuffer_slug328);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data329 = malloc(480);
        hexToRawData("00000040000044c20080924400001041000060420088b045380200000000803f0000000000006042000000000000803f0000bb4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000bb4300000000000000000000803f000068420080a243008099440080bf4316000000000068420080a4430000ea420000b74300002c430080a443000066430080a34300808e430000b7430000a9430080a3430000c5430080a2430080e0430080a3430000fe430000a34300400c440000a34300401a440080a34300002a440000b843008036440000a343008044440080a343008053440000a34300c060440000a443008067440080a343000076440080a44300c081440080a34300e088440080a343008090440000a443008093440000a343ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430160000003c8b0000a0c601006898010084ae0000a0c6010044ec0000bcc50000a018010040d5000000c500004c730100a8c30100b888000008880000a884000074c60100e889000068980100e8890000e449010078c60100d0160100", data329, 480);
        auto slug329 = sktext::gpu::Slug::Deserialize(data329, 480);
        free(data329);
        void *paintdata_slug329 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug329, 28);
        SkReadBuffer paintbuffer_slug329 = SkReadBuffer(paintdata_slug329, 28);
        SkPaint paint_slug329 = SkPaintPriv::Unflatten(paintbuffer_slug329);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data330 = malloc(300);
        hexToRawData("00000040000040c20000c3430000c040000060420028b345480100000000803f0000000000006042000000000000803f0000e54300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000e54300000000000000000000803f000068420000cd430000df430000e84307000000000068420080cd430000e2420000cd4300002b430000cf43000063430080ce4300008f430080df430080a8430000cd430000c6430000cd43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430070000006c85000090440100ac110100489a0100b0c6010090790000fc960100", data330, 300);
        auto slug330 = sktext::gpu::Slug::Deserialize(data330, 300);
        free(data330);
        void *paintdata_slug330 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug330, 28);
        SkReadBuffer paintbuffer_slug330 = SkReadBuffer(paintdata_slug330, 28);
        SkPaint paint_slug330 = SkPaintPriv::Unflatten(paintbuffer_slug330);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data331 = malloc(400);
        hexToRawData("0000004000003cc2999924430000e0400000e0430028b345e00100000000803f000000000000e043000000000000803f0000e54300000000000000000000803f020000000100000000000000010000000000803f000000000000e043000000000000803f0000e54300000000000000000000803f0000e1430000cf430080fa430080e843010000000000e1430000cf430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000300d00000100000000000000010000000000803f000000000000e043000000000000803f0000e54300000000000000000000803f0080fe430080cd43004019440080e743020000000080fe430080cd4300c00c440080cd43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430020000001a3f010022c50000", data331, 400);
        auto slug331 = sktext::gpu::Slug::Deserialize(data331, 400);
        free(data331);
        void *paintdata_slug331 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug331, 28);
        SkReadBuffer paintbuffer_slug331 = SkReadBuffer(paintdata_slug331, 28);
        SkPaint paint_slug331 = SkPaintPriv::Unflatten(paintbuffer_slug331);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data332 = malloc(300);
        hexToRawData("c0f59841000040c25c0fca430000104100a719440028b345480100000000803f0000000000a71944000000000000803f0000e54300000000000000000000803f010000000100000000000000010000000000803f0000000000a71944000000000000803f0000e54300000000000000000000803f00801e440000cd4300c07e440080e9430700000000801e440000cd4300c02b440000cd4300c039440000cd43008049440000e243000056440000d84300c063440080cd4300c071440000ce43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43007000000d3160100f3e9000083a00000abc30100c37400009f720100ef180100", data332, 300);
        auto slug332 = sktext::gpu::Slug::Deserialize(data332, 300);
        free(data332);
        void *paintdata_slug332 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug332, 28);
        SkReadBuffer paintbuffer_slug332 = SkReadBuffer(paintdata_slug332, 28);
        SkPaint paint_slug332 = SkPaintPriv::Unflatten(paintbuffer_slug332);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data333 = malloc(412);
        hexToRawData("00000000000040c2b81e49430000a040006f7f440028b345f00100000000803f00000000006f7f44000000000000803f0000e54300000000000000000000803f020000000100000000000000010000000000803f00000000006f7f44000000000000803f0000e54300000000000000000000803f00807f440080d043004084440000e5430100000000807f440080d0430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b430010000003b0c00000100000000000000010000000000803f00000000006f7f44000000000000803f0000e54300000000000000000000803f004084440000cd4300e098440080e74303000000004084440000cd4300808b440000cf43008092440080ce43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43003000000ef23010067a10000f3830100", data333, 412);
        auto slug333 = sktext::gpu::Slug::Deserialize(data333, 412);
        free(data333);
        void *paintdata_slug333 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug333, 28);
        SkReadBuffer paintbuffer_slug333 = SkReadBuffer(paintdata_slug333, 28);
        SkPaint paint_slug333 = SkPaintPriv::Unflatten(paintbuffer_slug333);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data334 = malloc(436);
        hexToRawData("00008040000040c200009e43000080400000604200c8b545100200000000803f0000000000006042000000000000803f0080074400000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0080074400000000000000000000803f000070420000f7430000a6430080084405000000000070420000f7430000e4420000f74300002a430000f743000066430000f74300808e430080f843c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43005000000d01601005ca10000f83a010074750000b49800000100000000000000010000000000803f0000000000006042000000000000803f0080074400000000000000000000803f0000a8430080fa430000ba4300800744010000000000a8430080fa430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data334, 436);
        auto slug334 = sktext::gpu::Slug::Deserialize(data334, 436);
        free(data334);
        void *paintdata_slug334 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug334, 28);
        SkReadBuffer paintbuffer_slug334 = SkReadBuffer(paintdata_slug334, 28);
        SkPaint paint_slug334 = SkPaintPriv::Unflatten(paintbuffer_slug334);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data335 = malloc(228);
        hexToRawData("0000004100002cc2000070410000803f0010ba4300c8b545e80000000000803f000000000010ba43000000000000803f0080074400000000000000000000803f010000000100000000000000010000000000803f000000000010ba43000000000000803f0080074400000000000000000000803f0000be430080f9430000c24300c00744010000000000be430080f943ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000b1c30100", data335, 228);
        auto slug335 = sktext::gpu::Slug::Deserialize(data335, 228);
        free(data335);
        void *paintdata_slug335 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug335, 28);
        SkReadBuffer paintbuffer_slug335 = SkReadBuffer(paintdata_slug335, 28);
        SkPaint paint_slug335 = SkPaintPriv::Unflatten(paintbuffer_slug335);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage115;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 42);
        fakeImage115.allocPixels(ii);
        SkCanvas tmp(fakeImage115);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data336 = malloc(312);
        hexToRawData("00000040000040c20000df430000a0400020fd4300c8b545580100000000803f000000000020fd43000000000000803f0080074400000000000000000000803f010000000100000000000000010000000000803f000000000020fd43000000000000803f0080074400000000000000000000803f0000fe430000f74300006e4400c00844080000000000fe430000f74300400d440000f74300001b440000f74300c029440000f74300c036440000f743000045440000f743000053440000f74300c060440000f743c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300800000081d30000f9890000b9210100d116010079bb0000298a0000d9630100059f0100", data336, 312);
        auto slug336 = sktext::gpu::Slug::Deserialize(data336, 312);
        free(data336);
        void *paintdata_slug336 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug336, 28);
        SkReadBuffer paintbuffer_slug336 = SkReadBuffer(paintdata_slug336, 28);
        SkPaint paint_slug336 = SkPaintPriv::Unflatten(paintbuffer_slug336);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect386 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect386, 28);
        SkReadBuffer paintBuffer_rect386(paintdata_rect386, 28);
        SkPaint paintRect386 = SkPaintPriv::Unflatten(paintBuffer_rect386);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect387 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect387, 28);
        SkReadBuffer paintBuffer_rect387(paintdata_rect387, 28);
        SkPaint paintRect387 = SkPaintPriv::Unflatten(paintBuffer_rect387);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage116;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(640, 360);
        fakeImage116.allocPixels(ii);
        SkCanvas tmp(fakeImage116);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 640, 360), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -5454.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5454.000000, 1344.000000, 6062.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect383);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect384);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 6738.000000, 1316.000000, 6741.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect385);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 5227.000000, 1274.000000, 5285.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug321->draw(canvas, paint_slug321);
        slug321->draw(canvas);
        free(paintdata_slug321);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug322->draw(canvas, paint_slug322);
        slug322->draw(canvas);
        free(paintdata_slug322);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug323->draw(canvas, paint_slug323);
        slug323->draw(canvas);
        free(paintdata_slug323);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug324->draw(canvas, paint_slug324);
        slug324->draw(canvas);
        free(paintdata_slug324);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug325->draw(canvas, paint_slug325);
        slug325->draw(canvas);
        free(paintdata_slug325);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug326->draw(canvas, paint_slug326);
        slug326->draw(canvas);
        free(paintdata_slug326);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug327->draw(canvas, paint_slug327);
        slug327->draw(canvas);
        free(paintdata_slug327);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug328->draw(canvas, paint_slug328);
        slug328->draw(canvas);
        free(paintdata_slug328);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug329->draw(canvas, paint_slug329);
        slug329->draw(canvas);
        free(paintdata_slug329);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug330->draw(canvas, paint_slug330);
        slug330->draw(canvas);
        free(paintdata_slug330);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug331->draw(canvas, paint_slug331);
        slug331->draw(canvas);
        free(paintdata_slug331);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug332->draw(canvas, paint_slug332);
        slug332->draw(canvas);
        free(paintdata_slug332);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug333->draw(canvas, paint_slug333);
        slug333->draw(canvas);
        free(paintdata_slug333);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug334->draw(canvas, paint_slug334);
        slug334->draw(canvas);
        free(paintdata_slug334);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug335->draw(canvas, paint_slug335);
        slug335->draw(canvas);
        free(paintdata_slug335);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage115)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(443.000000, 5766.000000, 499.000000, 5822.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage115);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug336->draw(canvas, paint_slug336);
        slug336->draw(canvas);
        free(paintdata_slug336);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect386);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect387);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage116)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 640.000000, 360.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage116);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 69F5BD3189171B8691AD66A449205439_1759762424044849.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest86, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect388 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect388, 28);
        SkReadBuffer paintBuffer_rect388(paintdata_rect388, 28);
        SkPaint paintRect388 = SkPaintPriv::Unflatten(paintBuffer_rect388);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect389 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect389, 28);
        SkReadBuffer paintBuffer_rect389(paintdata_rect389, 28);
        SkPaint paintRect389 = SkPaintPriv::Unflatten(paintBuffer_rect389);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect390 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect390, 28);
        SkReadBuffer paintBuffer_rect390(paintdata_rect390, 28);
        SkPaint paintRect390 = SkPaintPriv::Unflatten(paintBuffer_rect390);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect391 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect391, 28);
        SkReadBuffer paintBuffer_rect391(paintdata_rect391, 28);
        SkPaint paintRect391 = SkPaintPriv::Unflatten(paintBuffer_rect391);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect392 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect392, 28);
        SkReadBuffer paintBuffer_rect392(paintdata_rect392, 28);
        SkPaint paintRect392 = SkPaintPriv::Unflatten(paintBuffer_rect392);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage117;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(640, 360);
        fakeImage117.allocPixels(ii);
        SkCanvas tmp(fakeImage117);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 640, 360), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect138 = malloc(28);
        hexToRawData("0000000000008040000000000000000000000000cdcccc3e01030000", paintdata_rrect138, 28);
        SkReadBuffer paintBuffer_rrect138(paintdata_rrect138, 28);
        SkPaint paintRRect138 = SkPaintPriv::Unflatten(paintBuffer_rrect138);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data337 = malloc(228);
        hexToRawData("0000000080e686c2a0c9d34300341b4100d01e440050c345e80000000000803f0000000000d01e44000000000000803f0080b84300000000000000000000803f010000000100000000000000010000000000803f0000000000d01e44000000000000803f0080b84300000000000000000000803f00c0204400809643000030440080bd430100000000c02044008096431a3f826b4c0000000100000063657273380000000d00000000009a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000ffffffff590000000100b4300100000009000000", data337, 228);
        auto slug337 = sktext::gpu::Slug::Deserialize(data337, 228);
        free(data337);
        void *paintdata_slug337 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug337, 28);
        SkReadBuffer paintbuffer_slug337 = SkReadBuffer(paintdata_slug337, 28);
        SkPaint paint_slug337 = SkPaintPriv::Unflatten(paintbuffer_slug337);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect393 = malloc(320);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200f40000000000803f0000000000006042000000000000803f0038c94500000000000000000000803f10000000536b4c696e6561724772616469656e7400000000b4000000010000a0040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdcc4c3e000000000000000000000000cdcc4c3e44000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f04000000000000008fc2f53c48e17a3f0000803f0000000000000000000000000000fc4200000000000000000000000000000000", paintdata_rect393, 320);
        SkReadBuffer paintBuffer_rect393(paintdata_rect393, 320);
        SkPaint paintRect393 = SkPaintPriv::Unflatten(paintBuffer_rect393);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data338 = malloc(528);
        hexToRawData("00000040000010c2b2f03e4300008040000093420028cc45000200000000803f0000000000009342000000000000803f0000234400000000000000000000803f020000000100000000000000010000000000803f0000000000009342000000000000803f0000234400000000000000000000803f00008442004019440000d04200402544010000000000844200401944446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000001000000020a00000100000000000000010000000000803f0000000000009342000000000000803f0000234400000000000000000000803f0000b44200c017440000894300402644040000000000b442008018440000054300c0174400002d4300c017440000574300c0174400b0c1ac800000000200000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000de74000046e9000076cf0000bad10000", data338, 528);
        auto slug338 = sktext::gpu::Slug::Deserialize(data338, 528);
        free(data338);
        void *paintdata_slug338 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug338, 28);
        SkReadBuffer paintbuffer_slug338 = SkReadBuffer(paintdata_slug338, 28);
        SkPaint paint_slug338 = SkPaintPriv::Unflatten(paintbuffer_slug338);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -6060.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6060.000000, 1344.000000, 6668.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect388);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect389);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 6738.000000, 1316.000000, 6741.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect390);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect391);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect392);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage117)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 640.000000, 360.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage117);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(571.000000, 6128.000000, 760.000000, 6317.000000);
        SkVector radii[4] = { { 94.500000,94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect138);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug337->draw(canvas, paint_slug337);
        slug337->draw(canvas);
        free(paintdata_slug337);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 6439.000000, 1274.000000, 6565.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect393);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug338->draw(canvas, paint_slug338);
        slug338->draw(canvas);
        free(paintdata_slug338);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 218F6FD22A1503484FF178A07B190261_1759762425062342.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest87, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect394 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect394, 28);
        SkReadBuffer paintBuffer_rect394(paintdata_rect394, 28);
        SkPaint paintRect394 = SkPaintPriv::Unflatten(paintBuffer_rect394);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect395 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect395, 28);
        SkReadBuffer paintBuffer_rect395(paintdata_rect395, 28);
        SkPaint paintRect395 = SkPaintPriv::Unflatten(paintBuffer_rect395);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect396 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect396, 28);
        SkReadBuffer paintBuffer_rect396(paintdata_rect396, 28);
        SkPaint paintRect396 = SkPaintPriv::Unflatten(paintBuffer_rect396);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect397 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect397, 28);
        SkReadBuffer paintBuffer_rect397(paintdata_rect397, 28);
        SkPaint paintRect397 = SkPaintPriv::Unflatten(paintBuffer_rect397);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect398 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect398, 28);
        SkReadBuffer paintBuffer_rect398(paintdata_rect398, 28);
        SkPaint paintRect398 = SkPaintPriv::Unflatten(paintBuffer_rect398);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data339 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420098d045e80000000000803f0000000000002842000000000000803f00003c4300000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f00003c4300000000000000000000803f0000504200000e430000e04200003a43010000000000504200000e43824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data339, 228);
        auto slug339 = sktext::gpu::Slug::Deserialize(data339, 228);
        free(data339);
        void *paintdata_slug339 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug339, 28);
        SkReadBuffer paintbuffer_slug339 = SkReadBuffer(paintdata_slug339, 28);
        SkPaint paint_slug339 = SkPaintPriv::Unflatten(paintbuffer_slug339);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data340 = malloc(252);
        hexToRawData("00004040000008c278bd97420000803f00000f430058d045080100000000803f0000000000000f43000000000000803f0000344300000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000344300000000000000000000803f000012430000124300005b430000354303000000000012430000134300002b43000013430000444300001243b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f8090000000a00000b0a0000", data340, 252);
        auto slug340 = sktext::gpu::Slug::Deserialize(data340, 252);
        free(data340);
        void *paintdata_slug340 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug340, 28);
        SkReadBuffer paintbuffer_slug340 = SkReadBuffer(paintdata_slug340, 28);
        SkPaint paint_slug340 = SkPaintPriv::Unflatten(paintbuffer_slug340);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data341 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a89d430098d045e80000000000803f0000000000a89d43000000000000803f00003c4300000000000000000000803f010000000100000000000000010000000000803f0000000000a89d43000000000000803f00003c4300000000000000000000803f00809f43000008430080bc43000041430100000000809f4300000843824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data341, 228);
        auto slug341 = sktext::gpu::Slug::Deserialize(data341, 228);
        free(data341);
        void *paintdata_slug341 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug341, 28);
        SkReadBuffer paintbuffer_slug341 = SkReadBuffer(paintdata_slug341, 28);
        SkPaint paint_slug341 = SkPaintPriv::Unflatten(paintbuffer_slug341);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data342 = malloc(252);
        hexToRawData("0000803f000008c278bd974200000000000ec5430058d045080100000000803f00000000000ec543000000000000803f0000344300000000000000000000803f010000000100000000000000010000000000803f00000000000ec543000000000000803f0000344300000000000000000000803f0080c543000012430000eb4300003443030000000080c543000013430000d343000012430000e04300001243b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f4090000ec090000ec090000", data342, 252);
        auto slug342 = sktext::gpu::Slug::Deserialize(data342, 252);
        free(data342);
        void *paintdata_slug342 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug342, 28);
        SkReadBuffer paintbuffer_slug342 = SkReadBuffer(paintdata_slug342, 28);
        SkPaint paint_slug342 = SkPaintPriv::Unflatten(paintbuffer_slug342);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data343 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40009b0d440098d045e80000000000803f00000000009b0d44000000000000803f00003c4300000000000000000000803f010000000100000000000000010000000000803f00000000009b0d44000000000000803f00003c4300000000000000000000803f00800e440000084300801c44000041430100000000800e4400000843824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003a000000", data343, 228);
        auto slug343 = sktext::gpu::Slug::Deserialize(data343, 228);
        free(data343);
        void *paintdata_slug343 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug343, 28);
        SkReadBuffer paintbuffer_slug343 = SkReadBuffer(paintdata_slug343, 28);
        SkPaint paint_slug343 = SkPaintPriv::Unflatten(paintbuffer_slug343);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data344 = malloc(264);
        hexToRawData("0000803f000008c2349ccb420000803f00df20440058d045180100000000803f0000000000df2044000000000000803f0000344300000000000000000000803f010000000100000000000000010000000000803f0000000000df2044000000000000803f0000344300000000000000000000803f004021440000124300403a440000354304000000004021440000134300c027440000124300c02e44000013430000354400001343b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000f6090000e6090000e9090000f9090000", data344, 264);
        auto slug344 = sktext::gpu::Slug::Deserialize(data344, 264);
        free(data344);
        void *paintdata_slug344 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug344, 28);
        SkReadBuffer paintbuffer_slug344 = SkReadBuffer(paintdata_slug344, 28);
        SkPaint paint_slug344 = SkPaintPriv::Unflatten(paintbuffer_slug344);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data345 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f954400d0d045e80000000000803f00000000809f9544000000000000803f0000434300000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000434300000000000000000000803f00a096440000244300c09b4400002b430100000000a0964400002443675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data345, 228);
        auto slug345 = sktext::gpu::Slug::Deserialize(data345, 228);
        free(data345);
        void *paintdata_slug345 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug345, 28);
        SkReadBuffer paintbuffer_slug345 = SkReadBuffer(paintdata_slug345, 28);
        SkPaint paint_slug345 = SkPaintPriv::Unflatten(paintbuffer_slug345);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data346 = malloc(252);
        hexToRawData("0000803f000028c20400104300008040000044430020d645080100000000803f0000000000004443000000000000803f0080b64300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0080b64300000000000000000000803f000045430080a1430000aa430080b84303000000000045430080a143000077430000a243000094430080a14365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f4230100e449010068370100", data346, 252);
        auto slug346 = sktext::gpu::Slug::Deserialize(data346, 252);
        free(data346);
        void *paintdata_slug346 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug346, 28);
        SkReadBuffer paintbuffer_slug346 = SkReadBuffer(paintdata_slug346, 28);
        SkPaint paint_slug346 = SkPaintPriv::Unflatten(paintbuffer_slug346);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data347 = malloc(324);
        hexToRawData("000040400000e8c1baab3e4300000000000044430008d845680100000000803f0000000000004443000000000000803f0000d54300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000d54300000000000000000000803f000047430080c6430080c1430000d54309000000000047430080c64300005b430080c643000072430000ce43000083430080c643000092430080c64300009d430080c6430080a8430000c9430000ad430080c6430000b8430080c643f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000e8090000e4090000800c0000eb090000e4090000040a0000700c0000e7090000030a0000", data347, 324);
        auto slug347 = sktext::gpu::Slug::Deserialize(data347, 324);
        free(data347);
        void *paintdata_slug347 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug347, 28);
        SkReadBuffer paintbuffer_slug347 = SkReadBuffer(paintdata_slug347, 28);
        SkPaint paint_slug347 = SkPaintPriv::Unflatten(paintbuffer_slug347);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data348 = malloc(448);
        hexToRawData("00523641000008c22fe59043000080400050c2430008d845200200000000803f000000000050c243000000000000803f0000d54300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000d54300000000000000000000803f0000c8430000c4430080eb430000d743020000000000c8430080c4430080dd430000c443817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000d54300000000000000000000803f0080f3430080c443008029440000d743050000000080f3430080c443008003440080c44300c00d440080c543000017440080c543004020440080c443817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000063a0100949e0100e2050100", data348, 448);
        auto slug348 = sktext::gpu::Slug::Deserialize(data348, 448);
        free(data348);
        void *paintdata_slug348 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug348, 28);
        SkReadBuffer paintbuffer_slug348 = SkReadBuffer(paintdata_slug348, 28);
        SkPaint paint_slug348 = SkPaintPriv::Unflatten(paintbuffer_slug348);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data349 = malloc(692);
        hexToRawData("00004040000050c2ae47594400006041000060420000dc45780300000000803f0000000000006042000000000000803f00400a4400000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f00400a4400000000000000000000803f00006c420080fc430000df4300800b440700000000006c420080fc430000e6420080fc43000029430000fd43000062430000fd4300008d430000fd430080a9430080fe430000c5430080fc43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43007000000d00a010058aa00009c850000808500006c85000040d40000d86301000100000000000000010000000000803f0000000000006042000000000000803f00400a4400000000000000000000803f0080e8430080fc430040554400c00b44070000000080e8430080fc43008002440000fe43000010440000fd4300001e440080fc4300002c440080fc4300403a440000fd43004048440080fd43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43007000000c4890000e0d80000407a0000e4d80000fc7d000048710100007c01000100000002000000010000000000803f0000000000006042000000000000803f00400a4400000000000000000000803f00c055440080fa430040674400c00d440100000000c055440080fa43f17915b84c0000000100000063657273380000000e000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000b8290000", data349, 692);
        auto slug349 = sktext::gpu::Slug::Deserialize(data349, 692);
        free(data349);
        void *paintdata_slug349 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug349, 28);
        SkReadBuffer paintbuffer_slug349 = SkReadBuffer(paintdata_slug349, 28);
        SkPaint paint_slug349 = SkPaintPriv::Unflatten(paintbuffer_slug349);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect399 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect399, 28);
        SkReadBuffer paintBuffer_rect399(paintdata_rect399, 28);
        SkPaint paintRect399 = SkPaintPriv::Unflatten(paintBuffer_rect399);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect400 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect400, 28);
        SkReadBuffer paintBuffer_rect400(paintdata_rect400, 28);
        SkPaint paintRect400 = SkPaintPriv::Unflatten(paintBuffer_rect400);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage118;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(640, 360);
        fakeImage118.allocPixels(ii);
        SkCanvas tmp(fakeImage118);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 640, 360), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect401 = malloc(320);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200f40000000000803f0000000000006042000000000000803f0038c94500000000000000000000803f10000000536b4c696e6561724772616469656e7400000000b4000000010000a0040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdcc4c3e000000000000000000000000cdcc4c3e44000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f04000000000000008fc2f53c48e17a3f0000803f0000000000000000000000000000fc4200000000000000000000000000000000", paintdata_rect401, 320);
        SkReadBuffer paintBuffer_rect401(paintdata_rect401, 320);
        SkPaint paintRect401 = SkPaintPriv::Unflatten(paintBuffer_rect401);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data350 = malloc(528);
        hexToRawData("00000040000010c2b2f03e4300008040000093420028cc45000200000000803f0000000000009342000000000000803f0000384200000000000000000000803f020000000100000000000000010000000000803f0000000000009342000000000000803f0000384200000000000000000000803f000084420000e0400000d04200005c4201000000000084420000e040446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000001000000020a00000100000000000000010000000000803f0000000000009342000000000000803f0000384200000000000000000000803f0000b4420000803f0000894300006c42040000000000b44200008040000005430000803f00002d430000803f000057430000803f00b0c1ac800000000200000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000de74000046e9000076cf0000bad10000", data350, 528);
        auto slug350 = sktext::gpu::Slug::Deserialize(data350, 528);
        free(data350);
        void *paintdata_slug350 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug350, 28);
        SkReadBuffer paintbuffer_slug350 = SkReadBuffer(paintdata_slug350, 28);
        SkPaint paint_slug350 = SkPaintPriv::Unflatten(paintbuffer_slug350);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data351 = malloc(316);
        hexToRawData("000000400000f8c11e2ea1420000000000bf92440028cc45180100000000803f0000000000bf9244000000000000803f0000384200000000000000000000803f010000000100000000000000010000000000803f0000000000bf9244000000000000803f0000384200000000000000000000803f00e091440000c04000009e4400005c420400000000e091440000c04000e0944400003041002096440000c040002099440000c040446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000e4090000700c0000f20900000a0a0000", data351, 316);
        auto slug351 = sktext::gpu::Slug::Deserialize(data351, 316);
        free(data351);
        void *paintdata_slug351 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug351, 28);
        SkReadBuffer paintbuffer_slug351 = SkReadBuffer(paintdata_slug351, 28);
        SkPaint paint_slug351 = SkPaintPriv::Unflatten(paintbuffer_slug351);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect139 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect139, 28);
        SkReadBuffer paintBuffer_rrect139(paintdata_rrect139, 28);
        SkPaint paintRRect139 = SkPaintPriv::Unflatten(paintBuffer_rrect139);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage119;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage119.allocPixels(ii);
        SkCanvas tmp(fakeImage119);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage120;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage120.allocPixels(ii);
        SkCanvas tmp(fakeImage120);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect140 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect140, 28);
        SkReadBuffer paintBuffer_rrect140(paintdata_rrect140, 28);
        SkPaint paintRRect140 = SkPaintPriv::Unflatten(paintBuffer_rrect140);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata54 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata54, 92);
        SkPath path54;
        path54.readFromMemory(pathdata54, 92);
        void *paintdata_path54 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path54, 28);
        SkReadBuffer paintBuffer_path54(paintdata_path54, 28);
        SkPaint paintPath54 = SkPaintPriv::Unflatten(paintBuffer_path54);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -6666.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6666.000000, 1344.000000, 7274.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect394);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect395);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 6738.000000, 1316.000000, 6741.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect396);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect397);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 7665.000000, 1316.000000, 7668.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect398);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug339->draw(canvas, paint_slug339);
        slug339->draw(canvas);
        free(paintdata_slug339);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug340->draw(canvas, paint_slug340);
        slug340->draw(canvas);
        free(paintdata_slug340);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug341->draw(canvas, paint_slug341);
        slug341->draw(canvas);
        free(paintdata_slug341);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug342->draw(canvas, paint_slug342);
        slug342->draw(canvas);
        free(paintdata_slug342);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug343->draw(canvas, paint_slug343);
        slug343->draw(canvas);
        free(paintdata_slug343);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug344->draw(canvas, paint_slug344);
        slug344->draw(canvas);
        free(paintdata_slug344);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug345->draw(canvas, paint_slug345);
        slug345->draw(canvas);
        free(paintdata_slug345);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 6802.000000, 1274.000000, 6871.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug346->draw(canvas, paint_slug346);
        slug346->draw(canvas);
        free(paintdata_slug346);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 6871.000000, 1274.000000, 6929.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug347->draw(canvas, paint_slug347);
        slug347->draw(canvas);
        free(paintdata_slug347);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug348->draw(canvas, paint_slug348);
        slug348->draw(canvas);
        free(paintdata_slug348);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug349->draw(canvas, paint_slug349);
        slug349->draw(canvas);
        free(paintdata_slug349);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 5098.000000, 1316.000000, 6741.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect399);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect400);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage118)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 640.000000, 360.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 5880.000000, 1274.000000, 6565.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage118);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 6439.000000, 1274.000000, 6565.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect401);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug350->draw(canvas, paint_slug350);
        slug350->draw(canvas);
        free(paintdata_slug350);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug351->draw(canvas, paint_slug351);
        slug351->draw(canvas);
        free(paintdata_slug351);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 6794.000000, 168.000000, 6906.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect139);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 6794.000000, 168.000000, 6906.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage119)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 6794.000000, 168.000000, 6906.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage119);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 6802.000000, 1274.000000, 6871.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage120)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(367.000000, 6810.000000, 430.000000, 6859.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage120);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 6795.500000, 166.500000, 6904.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect140);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 6860.000000, 172.000000, 6909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,6076.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path54, paintPath54);
        free(pathdata54);
        free(paintdata_path54);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 9557EC544AD5ECC62F6271877E15C907_1759762426280617.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest88, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect402 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect402, 28);
        SkReadBuffer paintBuffer_rect402(paintdata_rect402, 28);
        SkPaint paintRect402 = SkPaintPriv::Unflatten(paintBuffer_rect402);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect403 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect403, 28);
        SkReadBuffer paintBuffer_rect403(paintdata_rect403, 28);
        SkPaint paintRect403 = SkPaintPriv::Unflatten(paintBuffer_rect403);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect404 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect404, 28);
        SkReadBuffer paintBuffer_rect404(paintdata_rect404, 28);
        SkPaint paintRect404 = SkPaintPriv::Unflatten(paintBuffer_rect404);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect405 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect405, 28);
        SkReadBuffer paintBuffer_rect405(paintdata_rect405, 28);
        SkPaint paintRect405 = SkPaintPriv::Unflatten(paintBuffer_rect405);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect406 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect406, 28);
        SkReadBuffer paintBuffer_rect406(paintdata_rect406, 28);
        SkPaint paintRect406 = SkPaintPriv::Unflatten(paintBuffer_rect406);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data352 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40000028420088ed45e80000000000803f0000000000002842000000000000803f0000fe4300000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000fe4300000000000000000000803f000050420000e7430000e0420000fd4301000000000050420000e743824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data352, 228);
        auto slug352 = sktext::gpu::Slug::Deserialize(data352, 228);
        free(data352);
        void *paintdata_slug352 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug352, 28);
        SkReadBuffer paintbuffer_slug352 = SkReadBuffer(paintdata_slug352, 28);
        SkPaint paint_slug352 = SkPaintPriv::Unflatten(paintbuffer_slug352);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data353 = malloc(228);
        hexToRawData("00004040000004c20000c0410000803f00000f430048ed45e80000000000803f0000000000000f43000000000000803f0000fa4300000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000fa4300000000000000000000803f000012430080e943000027430080fa4301000000000012430080e943b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000f8090000", data353, 228);
        auto slug353 = sktext::gpu::Slug::Deserialize(data353, 228);
        free(data353);
        void *paintdata_slug353 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug353, 28);
        SkReadBuffer paintbuffer_slug353 = SkReadBuffer(paintdata_slug353, 28);
        SkPaint paint_slug353 = SkPaintPriv::Unflatten(paintbuffer_slug353);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data354 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000b883430088ed45e80000000000803f0000000000b88343000000000000803f0000fe4300000000000000000000803f010000000100000000000000010000000000803f0000000000b88343000000000000803f0000fe4300000000000000000000803f008085430000e4430080a2430040004401000000008085430000e443824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000036000000", data354, 228);
        auto slug354 = sktext::gpu::Slug::Deserialize(data354, 228);
        free(data354);
        void *paintdata_slug354 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug354, 28);
        SkReadBuffer paintbuffer_slug354 = SkReadBuffer(paintdata_slug354, 28);
        SkPaint paint_slug354 = SkPaintPriv::Unflatten(paintbuffer_slug354);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data355 = malloc(228);
        hexToRawData("00000040000008c20000c04100000000001eab430048ed45e80000000000803f00000000001eab43000000000000803f0000fa4300000000000000000000803f010000000100000000000000010000000000803f00000000001eab43000000000000803f0000fa4300000000000000000000803f0000ac430000e9430000b7430000fa43010000000000ac430000e943b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000ed090000", data355, 228);
        auto slug355 = sktext::gpu::Slug::Deserialize(data355, 228);
        free(data355);
        void *paintdata_slug355 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug355, 28);
        SkReadBuffer paintbuffer_slug355 = SkReadBuffer(paintdata_slug355, 28);
        SkPaint paint_slug355 = SkPaintPriv::Unflatten(paintbuffer_slug355);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data356 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400056e7430088ed45e80000000000803f000000000056e743000000000000803f0000fe4300000000000000000000803f010000000100000000000000010000000000803f000000000056e743000000000000803f0000fe4300000000000000000000803f0000e9430000e44300c0024400400044010000000000e9430000e443824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003b000000", data356, 228);
        auto slug356 = sktext::gpu::Slug::Deserialize(data356, 228);
        free(data356);
        void *paintdata_slug356 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug356, 28);
        SkReadBuffer paintbuffer_slug356 = SkReadBuffer(paintdata_slug356, 28);
        SkPaint paint_slug356 = SkPaintPriv::Unflatten(paintbuffer_slug356);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data357 = malloc(240);
        hexToRawData("00000040000008c278bd47420000803f00ef06440048ed45f80000000000803f0000000000ef0644000000000000803f0000fa4300000000000000000000803f010000000100000000000000010000000000803f0000000000ef0644000000000000803f0000fa4300000000000000000000803f008007440000e943008013440080fa4302000000008007440080e94300c00d440000e943b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000ff090000f3090000", data357, 240);
        auto slug357 = sktext::gpu::Slug::Deserialize(data357, 240);
        free(data357);
        void *paintdata_slug357 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug357, 28);
        SkReadBuffer paintbuffer_slug357 = SkReadBuffer(paintdata_slug357, 28);
        SkPaint paint_slug357 = SkPaintPriv::Unflatten(paintbuffer_slug357);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data358 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f954400c0ed45e80000000000803f00000000809f9544000000000000803f00c0004400000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f00c0004400000000000000000000803f00a096440000f24300c09b440080f5430100000000a096440000f243675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data358, 228);
        auto slug358 = sktext::gpu::Slug::Deserialize(data358, 228);
        free(data358);
        void *paintdata_slug358 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug358, 28);
        SkReadBuffer paintbuffer_slug358 = SkReadBuffer(paintdata_slug358, 28);
        SkPaint paint_slug358 = SkPaintPriv::Unflatten(paintbuffer_slug358);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect407 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect407, 28);
        SkReadBuffer paintBuffer_rect407(paintdata_rect407, 28);
        SkPaint paintRect407 = SkPaintPriv::Unflatten(paintBuffer_rect407);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage121;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 480);
        fakeImage121.allocPixels(ii);
        SkCanvas tmp(fakeImage121);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 480), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -7272.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7272.000000, 1344.000000, 7880.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect402);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect403);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 7665.000000, 1316.000000, 7668.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect404);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect405);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 9392.000000, 1316.000000, 9395.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect406);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug352->draw(canvas, paint_slug352);
        slug352->draw(canvas);
        free(paintdata_slug352);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug353->draw(canvas, paint_slug353);
        slug353->draw(canvas);
        free(paintdata_slug353);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug354->draw(canvas, paint_slug354);
        slug354->draw(canvas);
        free(paintdata_slug354);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug355->draw(canvas, paint_slug355);
        slug355->draw(canvas);
        free(paintdata_slug355);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug356->draw(canvas, paint_slug356);
        slug356->draw(canvas);
        free(paintdata_slug356);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug357->draw(canvas, paint_slug357);
        slug357->draw(canvas);
        free(paintdata_slug357);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug358->draw(canvas, paint_slug358);
        slug358->draw(canvas);
        free(paintdata_slug358);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 6741.000000, 1316.000000, 7668.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 7098.000000, 1274.000000, 7512.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 7098.000000, 453.000000, 7495.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect407);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage121)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 59.886578, 360.000000, 420.113403);
    SkRect dst = SkRect::MakeLTRB(56.000000, 7098.000000, 453.000000, 7495.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage121);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 3E8F3D4370FF5C06D70F960E9D49EDED_1759762426641390.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest89, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect408 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect408, 28);
        SkReadBuffer paintBuffer_rect408(paintdata_rect408, 28);
        SkPaint paintRect408 = SkPaintPriv::Unflatten(paintBuffer_rect408);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect409 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect409, 28);
        SkReadBuffer paintBuffer_rect409(paintdata_rect409, 28);
        SkPaint paintRect409 = SkPaintPriv::Unflatten(paintBuffer_rect409);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect410 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect410, 28);
        SkReadBuffer paintBuffer_rect410(paintdata_rect410, 28);
        SkPaint paintRect410 = SkPaintPriv::Unflatten(paintBuffer_rect410);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data359 = malloc(264);
        hexToRawData("00000040000028c2060040430000a040000044430018f345180100000000803f0000000000004443000000000000803f0000a04200000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000a04200000000000000000000803f00004643000018420000c2430000aa42040000000000464300001c42000076430000184200809343000018420080ad430000184265cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300400000078a10000d863010080d30000ac940100", data359, 264);
        auto slug359 = sktext::gpu::Slug::Deserialize(data359, 264);
        free(data359);
        void *paintdata_slug359 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug359, 28);
        SkReadBuffer paintbuffer_slug359 = SkReadBuffer(paintdata_slug359, 28);
        SkPaint paint_slug359 = SkPaintPriv::Unflatten(paintbuffer_slug359);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data360 = malloc(312);
        hexToRawData("0000803f0000e8c1ccb92843000000000000444300f8f445580100000000803f0000000000004443000000000000803f00000c4300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f00000c4300000000000000000000803f000045430000de420080b64300000c4308000000000045430000de4200005c430000fc4200006e430000de42000088430000de42000092430000de4200809d430000e8420000a2430000de420000ad430000de42f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43008000000080a0000800c0000f7090000e8090000ec090000700c0000ef090000f3090000", data360, 312);
        auto slug360 = sktext::gpu::Slug::Deserialize(data360, 312);
        free(data360);
        void *paintdata_slug360 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug360, 28);
        SkReadBuffer paintbuffer_slug360 = SkReadBuffer(paintdata_slug360, 28);
        SkPaint paint_slug360 = SkPaintPriv::Unflatten(paintbuffer_slug360);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data361 = malloc(448);
        hexToRawData("00523641000008c22f659043000080400056b74300f8f445200200000000803f000000000056b743000000000000803f00000c4300000000000000000000803f020000000100000000000000010000000000803f000000000056b743000000000000803f00000c4300000000000000000000803f0000bd430000d4420080e04300001043020000000000bd430000d6420080d2430000d442817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000056b743000000000000803f00000c4300000000000000000000803f0080e8430000d6420000244400001043050000000080e8430000d6420000fc430000d642008007440000d642004011440000d64200001b440000da42817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000da630100049f01009e8c0000", data361, 448);
        auto slug361 = sktext::gpu::Slug::Deserialize(data361, 448);
        free(data361);
        void *paintdata_slug361 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug361, 28);
        SkReadBuffer paintbuffer_slug361 = SkReadBuffer(paintdata_slug361, 28);
        SkPaint paint_slug361 = SkPaintPriv::Unflatten(paintbuffer_slug361);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data362 = malloc(692);
        hexToRawData("00000000000040c252f835440000a0400000604200f0f845780300000000803f0000000000006042000000000000803f0080854300000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0080854300000000000000000000803f00006042000062430000b842008085430100000000006042000062430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000006042000000000000803f0080854300000000000000000000803f0000ba4200005b4300802244000088430a0000000000ba4200005c430000154300005b4300004f4300005b430080844300005c4300809e4300005b430000bb4300005d430000d74300005e430000f34300005b430080074400005b4300c0154400005b43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300a000000687800001c780000a4d300003c9501001cd40000ecc500008cb60000dc9900006c77010020a801000100000000000000010000000000803f0000000000006042000000000000803f0080854300000000000000000000803f0040244400006143000044440000864304000000004024440000624300802b4400006143008033440000614300003b44000062430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43004000000e8090000040a0000080a0000380c0000", data362, 692);
        auto slug362 = sktext::gpu::Slug::Deserialize(data362, 692);
        free(data362);
        void *paintdata_slug362 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug362, 28);
        SkReadBuffer paintbuffer_slug362 = SkReadBuffer(paintdata_slug362, 28);
        SkPaint paint_slug362 = SkPaintPriv::Unflatten(paintbuffer_slug362);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data363 = malloc(264);
        hexToRawData("00001442000040c2000037430000c0400000444400f0f845180100000000803f0000000000004444000000000000803f0080854300000000000000000000803f010000000100000000000000010000000000803f0000000000004444000000000000803f0080854300000000000000000000803f00404d4400005b4300c07144008088430400000000404d4400005c430040534400005e430040604400005b430000704400006d43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000f4c40100043a0100ec8b0000a4c30100", data363, 264);
        auto slug363 = sktext::gpu::Slug::Deserialize(data363, 264);
        free(data363);
        void *paintdata_slug363 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug363, 28);
        SkReadBuffer paintbuffer_slug363 = SkReadBuffer(paintdata_slug363, 28);
        SkPaint paint_slug363 = SkPaintPriv::Unflatten(paintbuffer_slug363);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data364 = malloc(424);
        hexToRawData("00000000000040c25c0f80430000a04000007c4400f0f845000200000000803f0000000000007c44000000000000803f0080854300000000000000000000803f020000000100000000000000010000000000803f0000000000007c44000000000000803f0080854300000000000000000000803f00007c440000624300808244008085430100000000007c44000062430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f0000000000007c44000000000000803f0080854300000000000000000000803f00c0824400005b4300009e44000088430400000000c0824400005e4300c0894400005c430000914400005b430000984400005b43c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300400000030db000098010100d4b40000d0160100", data364, 424);
        auto slug364 = sktext::gpu::Slug::Deserialize(data364, 424);
        free(data364);
        void *paintdata_slug364 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug364, 28);
        SkReadBuffer paintbuffer_slug364 = SkReadBuffer(paintdata_slug364, 28);
        SkPaint paint_slug364 = SkPaintPriv::Unflatten(paintbuffer_slug364);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data365 = malloc(448);
        hexToRawData("0000803f000040c20000ba430000a040000060420090fb45200200000000803f0000000000006042000000000000803f0080af4300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0080af4300000000000000000000803f00006442008097430000c1430000b2430600000000006442008097430000e442008097430000294300809743000065430000994300008d43008097430000aa4300809943c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43006000000b48001005077000024380100b498000098ab0000d87600000100000000000000010000000000803f0000000000006042000000000000803f0080af4300000000000000000000803f0000c44300009b430000d6430080af43010000000000c44300009b430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data365, 448);
        auto slug365 = sktext::gpu::Slug::Deserialize(data365, 448);
        free(data365);
        void *paintdata_slug365 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug365, 28);
        SkReadBuffer paintbuffer_slug365 = SkReadBuffer(paintdata_slug365, 28);
        SkPaint paint_slug365 = SkPaintPriv::Unflatten(paintbuffer_slug365);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data366 = malloc(228);
        hexToRawData("0000804000003cc2000098410000c0400010d6430090fb45e80000000000803f000000000010d643000000000000803f0080af4300000000000000000000803f010000000100000000000000010000000000803f000000000010d643000000000000803f0080af4300000000000000000000803f0000d843000098430000e0430080b243010000000000d84300009843ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000fdc40100", data366, 228);
        auto slug366 = sktext::gpu::Slug::Deserialize(data366, 228);
        free(data366);
        void *paintdata_slug366 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug366, 28);
        SkReadBuffer paintbuffer_slug366 = SkReadBuffer(paintdata_slug366, 28);
        SkPaint paint_slug366 = SkPaintPriv::Unflatten(paintbuffer_slug366);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data367 = malloc(608);
        hexToRawData("00000000000040c25c0fcc430000a0400010f2430090fb45080300000000803f000000000010f243000000000000803f0080af4300000000000000000000803f030000000100000000000000010000000000803f000000000010f243000000000000803f0080af4300000000000000000000803f0080f24300009b43000002440080af43010000000080f24300009b430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000390c00000100000000000000010000000000803f000000000010f243000000000000803f0080af4300000000000000000000803f0080024400809743008055440000b24306000000008002440080974300c0104400009a4300801e440080974300c02c440080974300403b440000984300c0484400809843c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300600000035760000e57400002d1801005da10000d5940100958200000100000000000000010000000000803f000000000010f243000000000000803f0080af4300000000000000000000803f0040564400009b4300005f440080af43010000000040564400009b430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000390c0000", data367, 608);
        auto slug367 = sktext::gpu::Slug::Deserialize(data367, 608);
        free(data367);
        void *paintdata_slug367 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug367, 28);
        SkReadBuffer paintbuffer_slug367 = SkReadBuffer(paintdata_slug367, 28);
        SkPaint paint_slug367 = SkPaintPriv::Unflatten(paintbuffer_slug367);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data368 = malloc(288);
        hexToRawData("c0f58841000040c25c8fac430000a04000185f440090fb45380100000000803f0000000000185f44000000000000803f0080af4300000000000000000000803f010000000100000000000000010000000000803f0000000000185f44000000000000803f0080af4300000000000000000000803f004063440080974300c09a440000b24306000000004063440080974300c071440080974300407f4400809843000087440000984300008e44008097430020954400809743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300600000052ea000046e900001e8c0000d6940100d216010076750000", data368, 288);
        auto slug368 = sktext::gpu::Slug::Deserialize(data368, 288);
        free(data368);
        void *paintdata_slug368 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug368, 28);
        SkReadBuffer paintbuffer_slug368 = SkReadBuffer(paintdata_slug368, 28);
        SkPaint paint_slug368 = SkPaintPriv::Unflatten(paintbuffer_slug368);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data369 = malloc(1232);
        hexToRawData("0000a040000040c251b8934400001041000060420030fe45800600000000803f0000000000006042000000000000803f0080d94300000000000000000000803f060000000100000000000000010000000000803f0000000000006042000000000000803f0080d94300000000000000000000803f000074420080c14300407b440000de4311000000000074420000c3430000e6420000c24300002d430000c343000062430080c14300808c430080c1430080a9430080c3430080c4430000c2430080e0430080c1430080fd430080c14300400d440000c24300001c440080d64300c028440000c343004037440000c24300c044440000c343008052440080c14300c060440080c14300406e440080c143ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43011000000b4980000a877000004ed00004c640100b8d100002c830000687800001c780000a4d300003c950100a8c301009c1101003c950100208e00006c77010020a80100609900000100000000000000010000000000803f0000000000006042000000000000803f0080d94300000000000000000000803f00407d440000c54300c080440080d9430100000000407d440000c543eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000e80900000100000000000000010000000000803f0000000000006042000000000000803f0080d94300000000000000000000803f002082440000c24300c088440080db4301000000002082440000c243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000008c2e01000100000000000000010000000000803f0000000000006042000000000000803f0080d94300000000000000000000803f004089440080c44300a090440000da4302000000004089440080c44300408d440080c443eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000040a0000f30900000100000000000000010000000000803f0000000000006042000000000000803f0080d94300000000000000000000803f004091440000c243006097440000dc4301000000004091440000c243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000838500000100000000000000010000000000803f0000000000006042000000000000803f0080d94300000000000000000000803f00a098440000c54300c09a440080d9430100000000a098440000c543eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000eb090000", data369, 1232);
        auto slug369 = sktext::gpu::Slug::Deserialize(data369, 1232);
        free(data369);
        void *paintdata_slug369 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug369, 28);
        SkReadBuffer paintbuffer_slug369 = SkReadBuffer(paintdata_slug369, 28);
        SkPaint paint_slug369 = SkPaintPriv::Unflatten(paintbuffer_slug369);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data370 = malloc(1996);
        hexToRawData("0000803f000040c285ab9644000010410000604200680046d80a00000000803f0000000000006042000000000000803f00c0014400000000000000000000803f0b0000000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f000064420000ec430000dc4200c0024401000000000064420000ec43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000008c2e01000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f0000e4420080ee4300002d4300000244020000000000e4420080ee43000012430080ee43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000080a0000f00900000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f000031430080eb43000029440000044409000000000031430080eb4300006d430080eb4300009443004000440000ad430080eb430000ca430000ec430080e5430000ed43004000440080eb4300800e440080eb4300401c440080eb43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43009000000ef75000093940100abc301008fa200003f950100238e00006f77010023a80100639900000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f00402b440000ef4300802f4400c001440100000000402b440000ef43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000eb0900000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f004032440000ec4300803f4400c0024401000000004032440000ec43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000008f2e01000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f008040440080ee4300404f440000024402000000008040440000ef43008048440080ee43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000030a0000f30900000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f008050440000ec4300805c440000034401000000008050440000ec43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000828500000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f00405f440000ef430040634400c001440100000000405f440000ef43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000ea0900000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f004066440000ec430080734400c0024401000000004066440000ec43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000008e2e01000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f008074440080ee4300a081440000024402000000008074440080ee4300807c440080ee43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000060a0000e60900000100000000000000010000000000803f0000000000006042000000000000803f00c0014400000000000000000000803f002082440080eb4300a09d440040034404000000002082440080eb4300a089440080eb4300a090440000fe43004097440080eb43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ed75000091940100b1c6010021a80100", data370, 1996);
        auto slug370 = sktext::gpu::Slug::Deserialize(data370, 1996);
        free(data370);
        void *paintdata_slug370 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug370, 28);
        SkReadBuffer paintbuffer_slug370 = SkReadBuffer(paintdata_slug370, 28);
        SkPaint paint_slug370 = SkPaintPriv::Unflatten(paintbuffer_slug370);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data371 = malloc(1096);
        hexToRawData("0000803f000040c252989744000010410000604200b80146b80500000000803f0000000000006042000000000000803f00c0164400000000000000000000803f050000000100000000000000010000000000803f0000000000006042000000000000803f00c0164400000000000000000000803f0000644200c00a4400001944000018440a0000000000644200c00a440000e84200c00a440000294300c00a440000654300c0144400808e4300800b440080a84300c00a440080c64300c014440080e14300c00b440080fc4300c00a4400000d4400c00a44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300a000000f8cf0000288200001cd40000a0c60100b49800001cd40000a0c601002c8300001cd40000d01601000100000000000000010000000000803f0000000000006042000000000000803f00c0164400000000000000000000803f00801a4400400c4400402144000017440100000000801a4400400c44eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000f00900000100000000000000010000000000803f0000000000006042000000000000803f00c0164400000000000000000000803f0080224400c00a4400007b4400001944070000000080224400c00a440040304400c00a4400803e4400400b4400004e440040154400405a4400c00a440080684400800b4400c0764400400b44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43007000000f48c00001cd40000ecc50000a8c30100b48001007cd5000074c601000100000000000000010000000000803f0000000000006042000000000000803f00c0164400000000000000000000803f00807d4400400c4400408644000017440200000000807d4400400c4400c0824400400c44eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000080a0000e70900000100000000000000010000000000803f0000000000006042000000000000803f00c0164400000000000000000000803f00a0864400400b4400a09e44000019440400000000a0864400400b4400808e4400400b4400009244004015440040984400800b44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000fb8c00007bc60100abc301008fb60000", data371, 1096);
        auto slug371 = sktext::gpu::Slug::Deserialize(data371, 1096);
        free(data371);
        void *paintdata_slug371 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug371, 28);
        SkReadBuffer paintbuffer_slug371 = SkReadBuffer(paintdata_slug371, 28);
        SkPaint paint_slug371 = SkPaintPriv::Unflatten(paintbuffer_slug371);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect141 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect141, 28);
        SkReadBuffer paintBuffer_rrect141(paintdata_rrect141, 28);
        SkPaint paintRRect141 = SkPaintPriv::Unflatten(paintBuffer_rrect141);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage122;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage122.allocPixels(ii);
        SkCanvas tmp(fakeImage122);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage123;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage123.allocPixels(ii);
        SkCanvas tmp(fakeImage123);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect142 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect142, 28);
        SkReadBuffer paintBuffer_rrect142(paintdata_rrect142, 28);
        SkPaint paintRRect142 = SkPaintPriv::Unflatten(paintBuffer_rrect142);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata55 = malloc(224);
        hexToRawData("0501000016000000040000000f0000005839fc408b6c37408b6cff408b6c37409cc400417b143e40ac1c00416ce743405839b8407b1400417110b740e05b01418941b44042600141355e8a401f850141237a874075870141d34d86404035004116d9fe3f93184440bdbef33fe4973740508d074014ae374019045e404f8d3740e04f65404f8d37400bd76b4030083c402b876e4082c04240d1229f406666c640b81ec94084eb41405a69cb40ccf936401058d1403c0a37405839fc40ec7c37401e04583f462f563fe4da0a3f5bbf543f00040103010301030104010103010500", pathdata55, 224);
        SkPath path55;
        path55.readFromMemory(pathdata55, 224);
        void *paintdata_path55 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_path55, 28);
        SkReadBuffer paintBuffer_path55(paintdata_path55, 28);
        SkPaint paintPath55 = SkPaintPriv::Unflatten(paintBuffer_path55);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -7878.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7878.000000, 1344.000000, 8486.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect408);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect409);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 9392.000000, 1316.000000, 9395.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect410);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 7729.000000, 1274.000000, 7797.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug359->draw(canvas, paint_slug359);
        slug359->draw(canvas);
        free(paintdata_slug359);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 7797.000000, 1274.000000, 7855.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug360->draw(canvas, paint_slug360);
        slug360->draw(canvas);
        free(paintdata_slug360);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug361->draw(canvas, paint_slug361);
        slug361->draw(canvas);
        free(paintdata_slug361);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug362->draw(canvas, paint_slug362);
        slug362->draw(canvas);
        free(paintdata_slug362);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug363->draw(canvas, paint_slug363);
        slug363->draw(canvas);
        free(paintdata_slug363);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug364->draw(canvas, paint_slug364);
        slug364->draw(canvas);
        free(paintdata_slug364);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug365->draw(canvas, paint_slug365);
        slug365->draw(canvas);
        free(paintdata_slug365);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug366->draw(canvas, paint_slug366);
        slug366->draw(canvas);
        free(paintdata_slug366);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug367->draw(canvas, paint_slug367);
        slug367->draw(canvas);
        free(paintdata_slug367);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug368->draw(canvas, paint_slug368);
        slug368->draw(canvas);
        free(paintdata_slug368);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug369->draw(canvas, paint_slug369);
        slug369->draw(canvas);
        free(paintdata_slug369);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug370->draw(canvas, paint_slug370);
        slug370->draw(canvas);
        free(paintdata_slug370);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug371->draw(canvas, paint_slug371);
        slug371->draw(canvas);
        free(paintdata_slug371);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 7720.000000, 168.000000, 7832.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect141);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 7720.000000, 168.000000, 7832.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage122)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 7720.000000, 168.000000, 7832.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage122);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 7729.000000, 1274.000000, 7797.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage123)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(416.000000, 7737.000000, 479.000000, 7786.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage123);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 7721.500000, 166.500000, 7830.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect142);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 7787.000000, 172.000000, 7836.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,6709.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,308.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path55, paintPath55);
        free(pathdata55);
        free(paintdata_path55);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 3700CA16BE9BC5CF494D5852B375A67D_1759762427711587.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest90, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect411 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect411, 28);
        SkReadBuffer paintBuffer_rect411(paintdata_rect411, 28);
        SkPaint paintRect411 = SkPaintPriv::Unflatten(paintBuffer_rect411);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect412 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect412, 28);
        SkReadBuffer paintBuffer_rect412(paintdata_rect412, 28);
        SkPaint paintRect412 = SkPaintPriv::Unflatten(paintBuffer_rect412);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect413 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect413, 28);
        SkReadBuffer paintBuffer_rect413(paintdata_rect413, 28);
        SkPaint paintRect413 = SkPaintPriv::Unflatten(paintBuffer_rect413);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data372 = malloc(1096);
        hexToRawData("0000803f000040c252989744000010410000604200b80146b80500000000803f0000000000006042000000000000803f000040c000000000000000000000803f050000000100000000000000010000000000803f0000000000006042000000000000803f000040c000000000000000000000803f0000644200004cc200001944000000400a0000000000644200004cc20000e84200004cc20000294300004cc200006543000030c100808e43000040c20080a84300004cc20080c643000030c10080e14300003cc20080fc4300004cc200000d4400004cc2ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300a000000f8cf0000288200001cd40000a0c60100b49800001cd40000a0c601002c8300001cd40000d01601000100000000000000010000000000803f0000000000006042000000000000803f000040c000000000000000000000803f00801a44000034c200402144000000c00100000000801a44000034c2eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000f00900000100000000000000010000000000803f0000000000006042000000000000803f000040c000000000000000000000803f0080224400004cc200007b440000c040070000000080224400004cc20040304400004cc200803e44000044c200004e44000010c100405a4400004cc200806844000040c200c07644000044c2ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43007000000f48c00001cd40000ecc50000a8c30100b48001007cd5000074c601000100000000000000010000000000803f0000000000006042000000000000803f000040c000000000000000000000803f00807d44000034c200408644000000c00200000000807d44000034c200c08244000034c2eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000080a0000e70900000100000000000000010000000000803f0000000000006042000000000000803f000040c000000000000000000000803f00a08644000044c200a09e440000c0400400000000a08644000044c200808e44000044c200009244000010c100409844000040c2ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000fb8c00007bc60100abc301008fb60000", data372, 1096);
        auto slug372 = sktext::gpu::Slug::Deserialize(data372, 1096);
        free(data372);
        void *paintdata_slug372 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug372, 28);
        SkReadBuffer paintbuffer_slug372 = SkReadBuffer(paintdata_slug372, 28);
        SkPaint paint_slug372 = SkPaintPriv::Unflatten(paintbuffer_slug372);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data373 = malloc(1356);
        hexToRawData("00000040000044c252d884440000c0400000604200080346380700000000803f0000000000006042000000000000803f0000a24200000000000000000000803f070000000100000000000000010000000000803f0000000000006042000000000000803f0000a24200000000000000000000803f000068420000044200005e430000ac420300000000006842000004420000e4420000044200002b4300000442ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000dc9900006c77010020a801000100000000000000010000000000803f0000000000006042000000000000803f0000a24200000000000000000000803f0000654300002042000076430000a242010000000000654300002042eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000e80900000100000000000000010000000000803f0000000000006042000000000000803f0000a24200000000000000000000803f008080430000084200009b430000aa42010000000080804300000842ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000008c2e01000100000000000000010000000000803f0000000000006042000000000000803f0000a24200000000000000000000803f00009d4300001c420080ba430000a4420200000000009d4300001c420000ad4300001c42eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000040a00000b0a00000100000000000000010000000000803f0000000000006042000000000000803f0000a24200000000000000000000803f0080be4300000842000023440000ae42050000000080be4300008c420000da43000008420000f54300000c4200400844000010420040164400000842ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43005000000b3c60100d794010097820000830b0100ab9900000100000000000000010000000000803f0000000000006042000000000000803f0000a24200000000000000000000803f0000274400000c4200c03c440000aa42020000000000274400000c420000354400000c42eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000370f0000370f00000100000000000000010000000000803f0000000000006042000000000000803f0000a24200000000000000000000803f008040440000004200e08b440000ac4207000000008040440000144200404e4400000c4200005c440000004200806a44000008420040784400001042002083440000044200008b4400001842ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43007000000f7820000ef180100377b00009b010100df980100b3cf0000b3c30100", data373, 1356);
        auto slug373 = sktext::gpu::Slug::Deserialize(data373, 1356);
        free(data373);
        void *paintdata_slug373 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug373, 28);
        SkReadBuffer paintbuffer_slug373 = SkReadBuffer(paintdata_slug373, 28);
        SkPaint paint_slug373 = SkPaintPriv::Unflatten(paintbuffer_slug373);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage124;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 42);
        fakeImage124.allocPixels(ii);
        SkCanvas tmp(fakeImage124);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data374 = malloc(324);
        hexToRawData("00000040000040c20000fb430000a04000006042006c0446680100000000803f0000000000006042000000000000803f00002a4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f00002a4300000000000000000000803f000068420000f44200800b4400002f4309000000000068420000f6420000e4420000f44200002a430000f442000065430000f44200008e430000f4420080a8430000f4420000c5430000f4420000e1430000f4420080fc430000f442c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300900000078a10000d863010080d30000ac940100d016010078bb0000288a0000d8630100049f0100", data374, 324);
        auto slug374 = sktext::gpu::Slug::Deserialize(data374, 324);
        free(data374);
        void *paintdata_slug374 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug374, 28);
        SkReadBuffer paintbuffer_slug374 = SkReadBuffer(paintdata_slug374, 28);
        SkPaint paint_slug374 = SkPaintPriv::Unflatten(paintbuffer_slug374);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect414 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect414, 28);
        SkReadBuffer paintBuffer_rect414(paintdata_rect414, 28);
        SkPaint paintRect414 = SkPaintPriv::Unflatten(paintBuffer_rect414);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect415 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect415, 28);
        SkReadBuffer paintBuffer_rect415(paintdata_rect415, 28);
        SkPaint paintRect415 = SkPaintPriv::Unflatten(paintBuffer_rect415);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage125;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(480, 640);
        fakeImage125.allocPixels(ii);
        SkCanvas tmp(fakeImage125);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 480, 640), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect143 = malloc(28);
        hexToRawData("0000000000008040000000000000000000000000cdcccc3e01030000", paintdata_rrect143, 28);
        SkReadBuffer paintBuffer_rrect143(paintdata_rrect143, 28);
        SkPaint paintRRect143 = SkPaintPriv::Unflatten(paintBuffer_rrect143);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data375 = malloc(228);
        hexToRawData("0000000080e686c2a0c9d34300341b410058924300200b46e80000000000803f0000000000589243000000000000803f00c0154400000000000000000000803f010000000100000000000000010000000000803f0000000000589243000000000000803f00c0154400000000000000000000803f0080964300c004440080b44300401844010000000080964300c004441a3f826b4c0000000100000063657273380000000d00000000009a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000ffffffff590000000100b430010000000b000000", data375, 228);
        auto slug375 = sktext::gpu::Slug::Deserialize(data375, 228);
        free(data375);
        void *paintdata_slug375 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug375, 28);
        SkReadBuffer paintbuffer_slug375 = SkReadBuffer(paintdata_slug375, 28);
        SkPaint paint_slug375 = SkPaintPriv::Unflatten(paintbuffer_slug375);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -8484.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 8484.000000, 1344.000000, 9092.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect411);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect412);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 9392.000000, 1316.000000, 9395.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect413);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug372->draw(canvas, paint_slug372);
        slug372->draw(canvas);
        free(paintdata_slug372);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug373->draw(canvas, paint_slug373);
        slug373->draw(canvas);
        free(paintdata_slug373);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage124)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(1175.000000, 8335.000000, 1231.000000, 8391.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage124);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug374->draw(canvas, paint_slug374);
        slug374->draw(canvas);
        free(paintdata_slug374);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 8533.000000, 589.000000, 9218.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect414);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 8533.000000, 589.000000, 9218.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect415);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 8533.000000, 589.000000, 9218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage125)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 10.816901, 479.999969, 628.281677);
    SkRect dst = SkRect::MakeLTRB(56.000000, 8533.000000, 589.000000, 9218.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage125);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(228.000000, 8781.000000, 417.000000, 8970.000000);
        SkVector radii[4] = { { 94.500000,94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect143);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug375->draw(canvas, paint_slug375);
        slug375->draw(canvas);
        free(paintdata_slug375);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: C40B2439DD2838478BF8AE77EEBFDD19_1759762428179708.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest91, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect416 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect416, 28);
        SkReadBuffer paintBuffer_rect416(paintdata_rect416, 28);
        SkPaint paintRect416 = SkPaintPriv::Unflatten(paintBuffer_rect416);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect417 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect417, 28);
        SkReadBuffer paintBuffer_rect417(paintdata_rect417, 28);
        SkPaint paintRect417 = SkPaintPriv::Unflatten(paintBuffer_rect417);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect418 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect418, 28);
        SkReadBuffer paintBuffer_rect418(paintdata_rect418, 28);
        SkPaint paintRect418 = SkPaintPriv::Unflatten(paintBuffer_rect418);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect419 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect419, 28);
        SkReadBuffer paintBuffer_rect419(paintdata_rect419, 28);
        SkPaint paintRect419 = SkPaintPriv::Unflatten(paintBuffer_rect419);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect420 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect420, 28);
        SkReadBuffer paintBuffer_rect420(paintdata_rect420, 28);
        SkPaint paintRect420 = SkPaintPriv::Unflatten(paintBuffer_rect420);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data376 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc400000284200c41146e80000000000803f0000000000002842000000000000803f0000d14300000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000d14300000000000000000000803f000050420000ba430000e0420000d04301000000000050420000ba43824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data376, 228);
        auto slug376 = sktext::gpu::Slug::Deserialize(data376, 228);
        free(data376);
        void *paintdata_slug376 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug376, 28);
        SkReadBuffer paintbuffer_slug376 = SkReadBuffer(paintdata_slug376, 28);
        SkPaint paint_slug376 = SkPaintPriv::Unflatten(paintbuffer_slug376);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data377 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00000f4300a01146180100000000803f0000000000000f43000000000000803f0080cc4300000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0080cc4300000000000000000000803f000011430080bb43000075430000cd4304000000000011430080bb4300002a430000bc43000045430000bc4300005f430000bc43b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000f0090000f4090000ff090000030a0000", data377, 264);
        auto slug377 = sktext::gpu::Slug::Deserialize(data377, 264);
        free(data377);
        void *paintdata_slug377 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug377, 28);
        SkReadBuffer paintbuffer_slug377 = SkReadBuffer(paintdata_slug377, 28);
        SkPaint paint_slug377 = SkPaintPriv::Unflatten(paintbuffer_slug377);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data378 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a0aa4300c41146e80000000000803f0000000000a0aa43000000000000803f0000d14300000000000000000000803f010000000100000000000000010000000000803f0000000000a0aa43000000000000803f0000d14300000000000000000000803f0080ac430000b7430080c9430080d343010000000080ac430000b743824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data378, 228);
        auto slug378 = sktext::gpu::Slug::Deserialize(data378, 228);
        free(data378);
        void *paintdata_slug378 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug378, 28);
        SkReadBuffer paintbuffer_slug378 = SkReadBuffer(paintdata_slug378, 28);
        SkPaint paint_slug378 = SkPaintPriv::Unflatten(paintbuffer_slug378);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data379 = malloc(264);
        hexToRawData("00008040000008c2349ccb420000803f0006d24300a01146180100000000803f000000000006d243000000000000803f0080cc4300000000000000000000803f010000000100000000000000010000000000803f000000000006d243000000000000803f0080cc4300000000000000000000803f0000d4430080bb43008002440000cd43040000000000d4430000bc430080e0430000bc430080ec430000bc430080f9430080bb43b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000e8090000f8090000f40900000b0a0000", data379, 264);
        auto slug379 = sktext::gpu::Slug::Deserialize(data379, 264);
        free(data379);
        void *paintdata_slug379 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug379, 28);
        SkReadBuffer paintbuffer_slug379 = SkReadBuffer(paintdata_slug379, 28);
        SkPaint paint_slug379 = SkPaintPriv::Unflatten(paintbuffer_slug379);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data380 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000931a4400c41146e80000000000803f0000000000931a44000000000000803f0000d14300000000000000000000803f010000000100000000000000010000000000803f0000000000931a44000000000000803f0000d14300000000000000000000803f00801b440000b743008029440080d3430100000000801b440000b743824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000039000000", data380, 228);
        auto slug380 = sktext::gpu::Slug::Deserialize(data380, 228);
        free(data380);
        void *paintdata_slug380 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug380, 28);
        SkReadBuffer paintbuffer_slug380 = SkReadBuffer(paintdata_slug380, 28);
        SkPaint paint_slug380 = SkPaintPriv::Unflatten(paintbuffer_slug380);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data381 = malloc(264);
        hexToRawData("00000040000008c2349ccb420000803f00d72d4400a01146180100000000803f0000000000d72d44000000000000803f0080cc4300000000000000000000803f010000000100000000000000010000000000803f0000000000d72d44000000000000803f0080cc4300000000000000000000803f00402e440080bb43008047440000cd430400000000402e440000bc4300c034440080bb4300403b440000bc4300c041440080bb43b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000010a0000e5090000010a0000e5090000", data381, 264);
        auto slug381 = sktext::gpu::Slug::Deserialize(data381, 264);
        free(data381);
        void *paintdata_slug381 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug381, 28);
        SkReadBuffer paintbuffer_slug381 = SkReadBuffer(paintdata_slug381, 28);
        SkPaint paint_slug381 = SkPaintPriv::Unflatten(paintbuffer_slug381);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data382 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f954400dc1146e80000000000803f00000000809f9544000000000000803f0000d44300000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000d44300000000000000000000803f00a096440080c44300c09b440000c8430100000000a096440080c443675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data382, 228);
        auto slug382 = sktext::gpu::Slug::Deserialize(data382, 228);
        free(data382);
        void *paintdata_slug382 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug382, 28);
        SkReadBuffer paintbuffer_slug382 = SkReadBuffer(paintdata_slug382, 28);
        SkPaint paint_slug382 = SkPaintPriv::Unflatten(paintbuffer_slug382);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data383 = malloc(288);
        hexToRawData("0000a040000028c2058090430000a0400000444300881446380100000000803f0000000000004443000000000000803f00c0144400000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f00c0144400000000000000000000803f0000494300400a440080f24300001644060000000000494300400a440000794300c00a440080934300400a440080ad4300400a440000c54300000b440080dd4300800a4465cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300600000074750000b498000080d30000ac940100608e0000e8840000", data383, 288);
        auto slug383 = sktext::gpu::Slug::Deserialize(data383, 288);
        free(data383);
        void *paintdata_slug383 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug383, 28);
        SkReadBuffer paintbuffer_slug383 = SkReadBuffer(paintdata_slug383, 28);
        SkPaint paint_slug383 = SkPaintPriv::Unflatten(paintbuffer_slug383);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect421 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect421, 28);
        SkReadBuffer paintBuffer_rect421(paintdata_rect421, 28);
        SkPaint paintRect421 = SkPaintPriv::Unflatten(paintBuffer_rect421);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect422 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect422, 28);
        SkReadBuffer paintBuffer_rect422(paintdata_rect422, 28);
        SkPaint paintRect422 = SkPaintPriv::Unflatten(paintBuffer_rect422);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage126;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(480, 640);
        fakeImage126.allocPixels(ii);
        SkCanvas tmp(fakeImage126);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 480, 640), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect144 = malloc(28);
        hexToRawData("0000000000008040000000000000000000000000cdcccc3e01030000", paintdata_rrect144, 28);
        SkReadBuffer paintBuffer_rrect144(paintdata_rrect144, 28);
        SkPaint paintRRect144 = SkPaintPriv::Unflatten(paintBuffer_rrect144);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data384 = malloc(228);
        hexToRawData("0000000080e686c2a0c9d34300341b410058924300200b46e80000000000803f0000000000589243000000000000803f0000e0c000000000000000000000803f010000000100000000000000010000000000803f0000000000589243000000000000803f0000e0c000000000000000000000803f00809643000096c20080b443000040400100000000809643000096c21a3f826b4c0000000100000063657273380000000d00000000009a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000ffffffff590000000100b430010000000b000000", data384, 228);
        auto slug384 = sktext::gpu::Slug::Deserialize(data384, 228);
        free(data384);
        void *paintdata_slug384 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug384, 28);
        SkReadBuffer paintbuffer_slug384 = SkReadBuffer(paintdata_slug384, 28);
        SkPaint paint_slug384 = SkPaintPriv::Unflatten(paintbuffer_slug384);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect423 = malloc(320);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200f40000000000803f0000000000006042000000000000803f00100e4600000000000000000000803f10000000536b4c696e6561724772616469656e7400000000b4000000010000a0040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdcc4c3e000000000000000000000000cdcc4c3e44000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f04000000000000008fc2f53c48e17a3f0000803f0000000000000000000000000000fc4200000000000000000000000000000000", paintdata_rect423, 320);
        SkReadBuffer paintBuffer_rect423(paintdata_rect423, 320);
        SkPaint paintRect423 = SkPaintPriv::Unflatten(paintBuffer_rect423);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data385 = malloc(540);
        hexToRawData("00000040000010c258e156430000804000009342008c0f46100200000000803f0000000000009342000000000000803f00008a4300000000000000000000803f020000000100000000000000010000000000803f0000000000009342000000000000803f00008a4300000000000000000000803f0000844200006d430000014300808e43020000000000844200006d430000b44200006d43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000002000000fe090000fe0900000100000000000000010000000000803f0000000000009342000000000000803f00008a4300000000000000000000803f0000e442000067430000954300809043040000000000e44200006a4300001d4300006743000045430000674300006f430000674300b0c1ac800000000200000063657273380000000a000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000de74000046e9000076cf0000bad10000", data385, 540);
        auto slug385 = sktext::gpu::Slug::Deserialize(data385, 540);
        free(data385);
        void *paintdata_slug385 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug385, 28);
        SkReadBuffer paintbuffer_slug385 = SkReadBuffer(paintdata_slug385, 28);
        SkPaint paint_slug385 = SkPaintPriv::Unflatten(paintbuffer_slug385);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data386 = malloc(316);
        hexToRawData("000000400000f8c11e2ea14200000000006cf443008c0f46180100000000803f00000000006cf443000000000000803f00008a4300000000000000000000803f010000000100000000000000010000000000803f00000000006cf443000000000000803f00008a4300000000000000000000803f0080f04300006c4300c0104400808e43040000000080f04300006c430000fd43000071430080014400006d430040074400006d43446a144b800000000200000063657273380000000c000000000028420000803f000000000000803f00000000000000000000803f000080bf0000000000000000000000ff590000000100b430746366652c00000014000000536b426c75724d61736b46696c746572496d706c000000000c00000000006040000000000000000004000000e7090000730c0000ea090000fa090000", data386, 316);
        auto slug386 = sktext::gpu::Slug::Deserialize(data386, 316);
        free(data386);
        void *paintdata_slug386 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug386, 28);
        SkReadBuffer paintbuffer_slug386 = SkReadBuffer(paintdata_slug386, 28);
        SkPaint paint_slug386 = SkPaintPriv::Unflatten(paintbuffer_slug386);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect145 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect145, 28);
        SkReadBuffer paintBuffer_rrect145(paintdata_rrect145, 28);
        SkPaint paintRRect145 = SkPaintPriv::Unflatten(paintBuffer_rrect145);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage127;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage127.allocPixels(ii);
        SkCanvas tmp(fakeImage127);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage128;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage128.allocPixels(ii);
        SkCanvas tmp(fakeImage128);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect146 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect146, 28);
        SkReadBuffer paintBuffer_rrect146(paintdata_rrect146, 28);
        SkPaint paintRRect146 = SkPaintPriv::Unflatten(paintBuffer_rrect146);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata56 = malloc(224);
        hexToRawData("0501000016000000040000000f0000005839fc408b6c37408b6cff408b6c37409cc400417b143e40ac1c00416ce743405839b8407b1400417110b740e05b01418941b44042600141355e8a401f850141237a874075870141d34d86404035004116d9fe3f93184440bdbef33fe4973740508d074014ae374019045e404f8d3740e04f65404f8d37400bd76b4030083c402b876e4082c04240d1229f406666c640b81ec94084eb41405a69cb40ccf936401058d1403c0a37405839fc40ec7c37401e04583f462f563fe4da0a3f5bbf543f00040103010301030104010103010500", pathdata56, 224);
        SkPath path56;
        path56.readFromMemory(pathdata56, 224);
        void *paintdata_path56 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_path56, 28);
        SkReadBuffer paintBuffer_path56(paintdata_path56, 28);
        SkPaint paintPath56 = SkPaintPriv::Unflatten(paintBuffer_path56);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -9090.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9090.000000, 1344.000000, 9698.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect416);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect417);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 9392.000000, 1316.000000, 9395.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect418);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect419);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 10906.000000, 1316.000000, 10909.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect420);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug376->draw(canvas, paint_slug376);
        slug376->draw(canvas);
        free(paintdata_slug376);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug377->draw(canvas, paint_slug377);
        slug377->draw(canvas);
        free(paintdata_slug377);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug378->draw(canvas, paint_slug378);
        slug378->draw(canvas);
        free(paintdata_slug378);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug379->draw(canvas, paint_slug379);
        slug379->draw(canvas);
        free(paintdata_slug379);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug380->draw(canvas, paint_slug380);
        slug380->draw(canvas);
        free(paintdata_slug380);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug381->draw(canvas, paint_slug381);
        slug381->draw(canvas);
        free(paintdata_slug381);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug382->draw(canvas, paint_slug382);
        slug382->draw(canvas);
        free(paintdata_slug382);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 9456.000000, 1274.000000, 9524.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug383->draw(canvas, paint_slug383);
        slug383->draw(canvas);
        free(paintdata_slug383);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 7668.000000, 1316.000000, 9395.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 8533.000000, 589.000000, 9218.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect421);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 8533.000000, 589.000000, 9218.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect422);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 8533.000000, 589.000000, 9218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage126)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 10.816901, 479.999969, 628.281677);
    SkRect dst = SkRect::MakeLTRB(56.000000, 8533.000000, 589.000000, 9218.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage126);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(228.000000, 8781.000000, 417.000000, 8970.000000);
        SkVector radii[4] = { { 94.500000,94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect144);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug384->draw(canvas, paint_slug384);
        slug384->draw(canvas);
        free(paintdata_slug384);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 9092.000000, 589.000000, 9218.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect423);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug385->draw(canvas, paint_slug385);
        slug385->draw(canvas);
        free(paintdata_slug385);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug386->draw(canvas, paint_slug386);
        slug386->draw(canvas);
        free(paintdata_slug386);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 9448.000000, 168.000000, 9560.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect145);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 9448.000000, 168.000000, 9560.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage127)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 9448.000000, 168.000000, 9560.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage127);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 9456.000000, 1274.000000, 9524.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage128)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(514.000000, 9464.000000, 577.000000, 9513.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage128);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 9449.500000, 166.500000, 9558.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect146);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 9514.000000, 172.000000, 9563.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,8436.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,308.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path56, paintPath56);
        free(pathdata56);
        free(paintdata_path56);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 4A96AA84C6F9086A08F383C2A37C98A7_1759762429340495.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest92, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect424 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect424, 28);
        SkReadBuffer paintBuffer_rect424(paintdata_rect424, 28);
        SkPaint paintRect424 = SkPaintPriv::Unflatten(paintBuffer_rect424);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect425 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect425, 28);
        SkReadBuffer paintBuffer_rect425(paintdata_rect425, 28);
        SkPaint paintRect425 = SkPaintPriv::Unflatten(paintBuffer_rect425);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect426 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect426, 28);
        SkReadBuffer paintBuffer_rect426(paintdata_rect426, 28);
        SkPaint paintRect426 = SkPaintPriv::Unflatten(paintBuffer_rect426);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data387 = malloc(288);
        hexToRawData("0000a040000028c2058090430000a0400000444300881446380100000000803f0000000000004443000000000000803f000030c100000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f000030c100000000000000000000803f00004943000054c20080f2430000c0c00600000000004943000054c20000794300004cc200809343000054c20080ad43000054c20000c543000048c20080dd43000050c265cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300600000074750000b498000080d30000ac940100608e0000e8840000", data387, 288);
        auto slug387 = sktext::gpu::Slug::Deserialize(data387, 288);
        free(data387);
        void *paintdata_slug387 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug387, 28);
        SkReadBuffer paintbuffer_slug387 = SkReadBuffer(paintdata_slug387, 28);
        SkPaint paint_slug387 = SkPaintPriv::Unflatten(paintbuffer_slug387);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data388 = malloc(324);
        hexToRawData("000040400000e8c1baab3f43000000000000444300781546680100000000803f0000000000004443000000000000803f0000444200000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000444200000000000000000000803f000047430000a0410000c2430000444209000000000047430000a04100005b430000a0410000724300000c42000082430000a041000093430000a04100809d430000a0410080a8430000c8410000ad430000a0410000b8430000a041f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000e8090000e4090000800c0000ef090000e8090000f8090000700c0000ef090000ff090000", data388, 324);
        auto slug388 = sktext::gpu::Slug::Deserialize(data388, 324);
        free(data388);
        void *paintdata_slug388 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug388, 28);
        SkReadBuffer paintbuffer_slug388 = SkReadBuffer(paintdata_slug388, 28);
        SkPaint paint_slug388 = SkPaintPriv::Unflatten(paintbuffer_slug388);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data389 = malloc(252);
        hexToRawData("00525641000004c254caf842000080400050c24300781546080100000000803f000000000050c243000000000000803f0000444200000000000000000000803f010000000100000000000000010000000000803f000000000050c243000000000000803f0000444200000000000000000000803f0000c943000080410040004400005442030000000000c943000090410080db43000080410080ee4300008041817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300300000088b400001a390100047b0100", data389, 252);
        auto slug389 = sktext::gpu::Slug::Deserialize(data389, 252);
        free(data389);
        void *paintdata_slug389 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug389, 28);
        SkReadBuffer paintbuffer_slug389 = SkReadBuffer(paintdata_slug389, 28);
        SkPaint paint_slug389 = SkPaintPriv::Unflatten(paintbuffer_slug389);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data390 = malloc(228);
        hexToRawData("0000144200003cc2000050420000c0400000604200781746e80000000000803f0000000000006042000000000000803f0000314300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0000314300000000000000000000803f0000ba42000002430000d84200003743010000000000ba4200000243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000f4c40100", data390, 228);
        auto slug390 = sktext::gpu::Slug::Deserialize(data390, 228);
        free(data390);
        void *paintdata_slug390 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug390, 28);
        SkReadBuffer paintbuffer_slug390 = SkReadBuffer(paintdata_slug390, 28);
        SkPaint paint_slug390 = SkPaintPriv::Unflatten(paintbuffer_slug390);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data391 = malloc(644);
        hexToRawData("00000000000040c2ae0710440000c0400000e04200781746380300000000803f000000000000e042000000000000803f0000314300000000000000000000803f030000000100000000000000010000000000803f000000000000e042000000000000803f0000314300000000000000000000803f0000e042000008430000144300003143010000000000e042000008430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c00000100000000000000010000000000803f000000000000e042000000000000803f0000314300000000000000000000803f000016430000014300c021440000374309000000000016430000014300004d430000014300808343000004430000a143000005430080ba43000002430000d743000001430080f2430000014300400744000004430080154400000243c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43009000000f8d9000000dc0000dc87000088b400006c5f01005cc60000f05d0100acea0000048500000100000000000000010000000000803f000000000000e042000000000000803f0000314300000000000000000000803f000023440000084300002c44000031430100000000002344000008430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data391, 644);
        auto slug391 = sktext::gpu::Slug::Deserialize(data391, 644);
        free(data391);
        void *paintdata_slug391 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug391, 28);
        SkReadBuffer paintbuffer_slug391 = SkReadBuffer(paintdata_slug391, 28);
        SkPaint paint_slug391 = SkPaintPriv::Unflatten(paintbuffer_slug391);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data392 = malloc(228);
        hexToRawData("0000804000003cc2000098410000c04000102c4400781746e80000000000803f0000000000102c44000000000000803f0000314300000000000000000000803f010000000100000000000000010000000000803f0000000000102c44000000000000803f0000314300000000000000000000803f00002d440000024300003144000037430100000000002d4400000243ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000fdc40100", data392, 228);
        auto slug392 = sktext::gpu::Slug::Deserialize(data392, 228);
        free(data392);
        void *paintdata_slug392 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug392, 28);
        SkReadBuffer paintbuffer_slug392 = SkReadBuffer(paintdata_slug392, 28);
        SkPaint paint_slug392 = SkPaintPriv::Unflatten(paintbuffer_slug392);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data393 = malloc(472);
        hexToRawData("00000000000040c25c0ff1430000a04000103a4400781746400200000000803f0000000000103a44000000000000803f0000314300000000000000000000803f020000000100000000000000010000000000803f0000000000103a44000000000000803f0000314300000000000000000000803f00403a440000084300004344000031430100000000403a44000008430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000390c00000100000000000000010000000000803f0000000000103a44000000000000803f0000314300000000000000000000803f00804344000001430060994400003643080000000080434400000243008052440000014300805f440000014300c06d440000014300007c440000024300c084440000034300e08b440000014300c0924400000143c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43008000000099a01002daf00008da20000b1b60000e1b40000dd7d01008dab0000e1dd0000", data393, 472);
        auto slug393 = sktext::gpu::Slug::Deserialize(data393, 472);
        free(data393);
        void *paintdata_slug393 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug393, 28);
        SkReadBuffer paintbuffer_slug393 = SkReadBuffer(paintdata_slug393, 28);
        SkPaint paint_slug393 = SkPaintPriv::Unflatten(paintbuffer_slug393);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data394 = malloc(472);
        hexToRawData("0000a040000040c20000f2430000a0400000604200c81846400200000000803f0000000000006042000000000000803f0080824300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f0080824300000000000000000000803f00007442000055430080f943000085430800000000007442000056430000e4420000574300002e4300005943000061430000564300008d43000055430080a843000055430080c443000058430000e14300005643c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300800000098840000ecc5000088b400006c5f01005cc60000f05d0100acea0000048500000100000000000000010000000000803f0000000000006042000000000000803f0080824300000000000000000000803f0000fc4300005c430000074400808243010000000000fc4300005c430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000380c0000", data394, 472);
        auto slug394 = sktext::gpu::Slug::Deserialize(data394, 472);
        free(data394);
        void *paintdata_slug394 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug394, 28);
        SkReadBuffer paintbuffer_slug394 = SkReadBuffer(paintdata_slug394, 28);
        SkPaint paint_slug394 = SkPaintPriv::Unflatten(paintbuffer_slug394);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data395 = malloc(732);
        hexToRawData("0000a040000034c28fc25f43000010410008074400c81846c00300000000803f0000000000080744000000000000803f0080824300000000000000000000803f040000000100000000000000010000000000803f0000000000080744000000000000803f0080824300000000000000000000803f0040084400005b430080164400008343020000000040084400005c4300800f4400005b43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000e9090000e40900000100000000000000010000000000803f0000000000080744000000000000803f0080824300000000000000000000803f00c017440000584300802244008085430100000000c0174400005843ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000e0d800000100000000000000010000000000803f0000000000080744000000000000803f0080824300000000000000000000803f0040264400005c4300802a4400808243010000000040264400005c43eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000e80900000100000000000000010000000000803f0000000000080744000000000000803f0080824300000000000000000000803f00402f440000594300003f44000087430200000000402f440000594300003d4400007f43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300200000054d40000a8c30100", data395, 732);
        auto slug395 = sktext::gpu::Slug::Deserialize(data395, 732);
        free(data395);
        void *paintdata_slug395 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug395, 28);
        SkReadBuffer paintbuffer_slug395 = SkReadBuffer(paintdata_slug395, 28);
        SkPaint paint_slug395 = SkPaintPriv::Unflatten(paintbuffer_slug395);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data396 = malloc(448);
        hexToRawData("00000040000040c2cc4cc0430000e04000f9484400c81846200200000000803f0000000000f94844000000000000803f0080824300000000000000000000803f020000000100000000000000010000000000803f0000000000f94844000000000000803f0080824300000000000000000000803f008049440000594300405644000086430100000000804944000059430753fea54c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b43001000000300d00000100000000000000010000000000803f0000000000f94844000000000000803f0080824300000000000000000000803f000058440000554300a094440000854306000000000058440000554300c065440000584300007344000055430000814400005543008087440000584300a08e4400005643c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300600000076750000b698000082d30000ae940100628e0000ea840000", data396, 448);
        auto slug396 = sktext::gpu::Slug::Deserialize(data396, 448);
        free(data396);
        void *paintdata_slug396 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug396, 28);
        SkReadBuffer paintbuffer_slug396 = SkReadBuffer(paintdata_slug396, 28);
        SkPaint paint_slug396 = SkPaintPriv::Unflatten(paintbuffer_slug396);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data397 = malloc(228);
        hexToRawData("c0f5804100003cc2703d8c420000a0400050954400c81846e80000000000803f0000000000509544000000000000803f0080824300000000000000000000803f010000000100000000000000010000000000803f0000000000509544000000000000803f0080824300000000000000000000803f006097440000564300009e4400008543010000000060974400005643ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000fa770000", data397, 228);
        auto slug397 = sktext::gpu::Slug::Deserialize(data397, 228);
        free(data397);
        void *paintdata_slug397 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug397, 28);
        SkReadBuffer paintbuffer_slug397 = SkReadBuffer(paintdata_slug397, 28);
        SkPaint paint_slug397 = SkPaintPriv::Unflatten(paintbuffer_slug397);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data398 = malloc(788);
        hexToRawData("00004040000040c270bd96440000a0400000604200181a46f80300000000803f0000000000006042000000000000803f0080ac4300000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0080ac4300000000000000000000803f00006c4200809443000098430000af430500000000006c42008095430000b4420000954300000e430080944300004643000095430000814300809443ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300500000074c6010084ae000030750000089a01002caf00000100000000000000010000000000803f0000000000006042000000000000803f0080ac4300000000000000000000803f00009b43008097430080a8430080ac430100000000009b4300809743eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000ec0900000100000000000000010000000000803f0000000000006042000000000000803f0080ac4300000000000000000000803f0000ab430080944300c09d440000af43110000000000ab43008094430000c743008094430000e34300809443000000440000954300800d440080954300c01b44008094430080294400809443000039440080954300403e440000954300c04c440080944300c05a4400009543004068440080944300407644008094430020824400809443004089440080944300209044000096430040974400009543ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43011000000f48c00008ca20000b0b60000e0b40000dc7d01008cab0000e0dd000078c601006c5f01008cab0000a87700002085000000dc000044bd000098ab000038ae0000d0a00000", data398, 788);
        auto slug398 = sktext::gpu::Slug::Deserialize(data398, 788);
        free(data398);
        void *paintdata_slug398 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug398, 28);
        SkReadBuffer paintbuffer_slug398 = SkReadBuffer(paintdata_slug398, 28);
        SkPaint paint_slug398 = SkPaintPriv::Unflatten(paintbuffer_slug398);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data399 = malloc(776);
        hexToRawData("00000040000040c271bd9644000010410000604200681b46e80300000000803f0000000000006042000000000000803f0080d64300000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0080d64300000000000000000000803f000068420080be4300a08b440000db4313000000000068420080be430000e4420000bf43000030430080d343000062430000bf4300008d430080bf430080a9430080be430000c5430080be430080e0430080be430080fd430080be4300000e440080d34300401a440000bf43008028440080be43004037440000bf43008044440080bf43008052440080be43004060440080be4300c06e440000c04300807d440080c043004085440080c043ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430130000009c4b0100e4be0000a8c30100fc370100c0d8000020a8010014f00000a0dd0000d8830000a8c3010070d90000e0dd000098840000ecc50000f8d9000000dc0000dc87000088b40000f87600000100000000000000010000000000803f0000000000006042000000000000803f0080d64300000000000000000000803f00408c440080c14300a08f440080d6430100000000408c440080c143eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000080a00000100000000000000010000000000803f0000000000006042000000000000803f0080d64300000000000000000000803f006090440000bf4300c09d440080d94302000000006090440000c043002097440000bf43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000e0d800006c5f0100", data399, 776);
        auto slug399 = sktext::gpu::Slug::Deserialize(data399, 776);
        free(data399);
        void *paintdata_slug399 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug399, 28);
        SkReadBuffer paintbuffer_slug399 = SkReadBuffer(paintdata_slug399, 28);
        SkPaint paint_slug399 = SkPaintPriv::Unflatten(paintbuffer_slug399);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data400 = malloc(276);
        hexToRawData("00000040000040c2000076430000c0400000604200b81c46280100000000803f0000000000006042000000000000803f0040004400000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0040004400000000000000000000803f000068420080e8430000974300c0014405000000000068420080e8430000e2420080e843000029430000ea43000062430000e94300008f430000fb43ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430050000005cc60000f05d0100acea000004850000b0c60100", data400, 276);
        auto slug400 = sktext::gpu::Slug::Deserialize(data400, 276);
        free(data400);
        void *paintdata_slug400 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug400, 28);
        SkReadBuffer paintbuffer_slug400 = SkReadBuffer(paintdata_slug400, 28);
        SkPaint paint_slug400 = SkPaintPriv::Unflatten(paintbuffer_slug400);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data401 = malloc(1564);
        hexToRawData("00000040000044c266669744000010410000604200081e46600800000000803f0000000000006042000000000000803f0040154400000000000000000000803f080000000100000000000000010000000000803f0000000000006042000000000000803f0040154400000000000000000000803f0000684200c00a440000354300801544040000000000684200c00a440000b44200c00a440000f44200c00a4400001a4300c00a44eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e4090000ef090000f30900000100000000000000010000000000803f0000000000006042000000000000803f0040154400000000000000000000803f00003a430040094400006e43004016440100000000003a4300400944ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000093b600000100000000000000010000000000803f0000000000006042000000000000803f0040154400000000000000000000803f0000754300c00a440080964300401544020000000000754300000b440000894300c00a44eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000eb090000ee0900000100000000000000010000000000803f0000000000006042000000000000803f0040154400000000000000000000803f0080994300000a440080ae4300c01644010000000080994300000a44ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000e2d800000100000000000000010000000000803f0000000000006042000000000000803f0040154400000000000000000000803f0080b64300000b440080ce4300401544020000000080b64300000b440080c64300000b44eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000ea090000ea0900000100000000000000010000000000803f0000000000006042000000000000803f0040154400000000000000000000803f0080d8430000094400007a44008017440b0000000080d84300400a440000f2430040094400c0074400c0134400001444004009440000224400c00944000030440040094400003f440040094400404c440000094400405a4400000a440040684400000a4400c0774400c01344ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300b00000055d4000029d60000a9c30100619900003d240100fd790000d1160100bdc50000edad0000f1830100a9c301000100000000000000010000000000803f0000000000006042000000000000803f0040154400000000000000000000803f0040824400c00a4400e0894400401544020000000040824400c00a440020864400000b44eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000ed090000f50900000100000000000000010000000000803f0000000000006042000000000000803f0040154400000000000000000000803f00208a440040094400609e44008016440300000000208a440040094400809144004009440040984400400944ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000c5ae0000d1160100b1b60000", data401, 1564);
        auto slug401 = sktext::gpu::Slug::Deserialize(data401, 1564);
        free(data401);
        void *paintdata_slug401 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug401, 28);
        SkReadBuffer paintbuffer_slug401 = SkReadBuffer(paintdata_slug401, 28);
        SkPaint paint_slug401 = SkPaintPriv::Unflatten(paintbuffer_slug401);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect147 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect147, 28);
        SkReadBuffer paintBuffer_rrect147(paintdata_rrect147, 28);
        SkPaint paintRRect147 = SkPaintPriv::Unflatten(paintBuffer_rrect147);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage129;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(180, 180);
        fakeImage129.allocPixels(ii);
        SkCanvas tmp(fakeImage129);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 180, 180), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect148 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect148, 28);
        SkReadBuffer paintBuffer_rrect148(paintdata_rrect148, 28);
        SkPaint paintRRect148 = SkPaintPriv::Unflatten(paintBuffer_rrect148);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata57 = malloc(224);
        hexToRawData("0501000016000000040000000f0000005839fc408b6c37408b6cff408b6c37409cc400417b143e40ac1c00416ce743405839b8407b1400417110b740e05b01418941b44042600141355e8a401f850141237a874075870141d34d86404035004116d9fe3f93184440bdbef33fe4973740508d074014ae374019045e404f8d3740e04f65404f8d37400bd76b4030083c402b876e4082c04240d1229f406666c640b81ec94084eb41405a69cb40ccf936401058d1403c0a37405839fc40ec7c37401e04583f462f563fe4da0a3f5bbf543f00040103010301030104010103010500", pathdata57, 224);
        SkPath path57;
        path57.readFromMemory(pathdata57, 224);
        void *paintdata_path57 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_path57, 28);
        SkReadBuffer paintBuffer_path57(paintdata_path57, 28);
        SkPaint paintPath57 = SkPaintPriv::Unflatten(paintBuffer_path57);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -9696.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9696.000000, 1344.000000, 10304.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect424);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect425);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 10906.000000, 1316.000000, 10909.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect426);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 9456.000000, 1274.000000, 9524.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug387->draw(canvas, paint_slug387);
        slug387->draw(canvas);
        free(paintdata_slug387);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 9524.000000, 1274.000000, 9582.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug388->draw(canvas, paint_slug388);
        slug388->draw(canvas);
        free(paintdata_slug388);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug389->draw(canvas, paint_slug389);
        slug389->draw(canvas);
        free(paintdata_slug389);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug390->draw(canvas, paint_slug390);
        slug390->draw(canvas);
        free(paintdata_slug390);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug391->draw(canvas, paint_slug391);
        slug391->draw(canvas);
        free(paintdata_slug391);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug392->draw(canvas, paint_slug392);
        slug392->draw(canvas);
        free(paintdata_slug392);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug393->draw(canvas, paint_slug393);
        slug393->draw(canvas);
        free(paintdata_slug393);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug394->draw(canvas, paint_slug394);
        slug394->draw(canvas);
        free(paintdata_slug394);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug395->draw(canvas, paint_slug395);
        slug395->draw(canvas);
        free(paintdata_slug395);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug396->draw(canvas, paint_slug396);
        slug396->draw(canvas);
        free(paintdata_slug396);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug397->draw(canvas, paint_slug397);
        slug397->draw(canvas);
        free(paintdata_slug397);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug398->draw(canvas, paint_slug398);
        slug398->draw(canvas);
        free(paintdata_slug398);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug399->draw(canvas, paint_slug399);
        slug399->draw(canvas);
        free(paintdata_slug399);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug400->draw(canvas, paint_slug400);
        slug400->draw(canvas);
        free(paintdata_slug400);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug401->draw(canvas, paint_slug401);
        slug401->draw(canvas);
        free(paintdata_slug401);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 9448.000000, 168.000000, 9560.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect147);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 9448.000000, 168.000000, 9560.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage129)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 180.000000, 180.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 9448.000000, 168.000000, 9560.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage129);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 9449.500000, 166.500000, 9558.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect148);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 9514.000000, 172.000000, 9563.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,8436.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,308.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path57, paintPath57);
        free(pathdata57);
        free(paintdata_path57);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: CC075DD398AA844C8C4EBEE0B3960B97_1759762429675591.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest93, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect427 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect427, 28);
        SkReadBuffer paintBuffer_rect427(paintdata_rect427, 28);
        SkPaint paintRect427 = SkPaintPriv::Unflatten(paintBuffer_rect427);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect428 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect428, 28);
        SkReadBuffer paintBuffer_rect428(paintdata_rect428, 28);
        SkPaint paintRect428 = SkPaintPriv::Unflatten(paintBuffer_rect428);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect429 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect429, 28);
        SkReadBuffer paintBuffer_rect429(paintdata_rect429, 28);
        SkPaint paintRect429 = SkPaintPriv::Unflatten(paintBuffer_rect429);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data402 = malloc(1564);
        hexToRawData("00000040000044c266669744000010410000604200081e46600800000000803f0000000000006042000000000000803f000010c100000000000000000000803f080000000100000000000000010000000000803f0000000000006042000000000000803f000010c100000000000000000000803f0000684200004cc200003543000000c1040000000000684200004cc20000b44200004cc20000f44200004cc200001a4300004cc2eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000ec090000e4090000ef090000f30900000100000000000000010000000000803f0000000000006042000000000000803f000010c100000000000000000000803f00003a43000064c200006e430000a0c00100000000003a43000064c2ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000093b600000100000000000000010000000000803f0000000000006042000000000000803f000010c100000000000000000000803f0000754300004cc200809643000010c10200000000007543000048c20000894300004cc2eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000eb090000ee0900000100000000000000010000000000803f0000000000006042000000000000803f000010c100000000000000000000803f00809943000058c20080ae43000040c00100000000809943000058c2ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43001000000e2d800000100000000000000010000000000803f0000000000006042000000000000803f000010c100000000000000000000803f0080b643000048c20080ce43000010c1020000000080b643000048c20080c643000048c2eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000ea090000ea0900000100000000000000010000000000803f0000000000006042000000000000803f000010c100000000000000000000803f0080d843000068c200007a44000000000b0000000080d843000054c20000f243000064c200c00744000070c100001444000064c20000224400005cc200003044000064c200003f44000064c200404c44000068c200405a44000058c200406844000058c200c07744000070c1ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300b00000055d4000029d60000a9c30100619900003d240100fd790000d1160100bdc50000edad0000f1830100a9c301000100000000000000010000000000803f0000000000006042000000000000803f000010c100000000000000000000803f0040824400004cc200e08944000010c1020000000040824400004cc200208644000048c2eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000ed090000f50900000100000000000000010000000000803f0000000000006042000000000000803f000010c100000000000000000000803f00208a44000064c200609e44000080c00300000000208a44000064c200809144000064c200409844000064c2ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000c5ae0000d1160100b1b60000", data402, 1564);
        auto slug402 = sktext::gpu::Slug::Deserialize(data402, 1564);
        free(data402);
        void *paintdata_slug402 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug402, 28);
        SkReadBuffer paintbuffer_slug402 = SkReadBuffer(paintdata_slug402, 28);
        SkPaint paint_slug402 = SkPaintPriv::Unflatten(paintbuffer_slug402);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data403 = malloc(776);
        hexToRawData("00008040000040c2e13a9344000010410000604200581f46e80300000000803f0000000000006042000000000000803f0000964200000000000000000000803f030000000100000000000000010000000000803f0000000000006042000000000000803f0000964200000000000000000000803f000070420000d8410000df430000a04207000000000070420000e0410000e4420000d841000029430000d841000062430000e04100008d430000d8410080aa430000f8410080c4430000e041ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43007000000e0b40000f8d9000000dc0000884c0100387c0100f08c0000a4a200000100000000000000010000000000803f0000000000006042000000000000803f0000964200000000000000000000803f0000e143000004420000004400009642020000000000e143000004420000f14300000842eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43002000000ec090000f40900000100000000000000010000000000803f0000000000006042000000000000803f0000964200000000000000000000803f008000440000d84100409a440000a8420d000000008000440000d84100000f440000d84100801c440000d84100002a440000d84100003a4400008a42004047440000f841004054440000d841004062440000d841008070440000e04100807e440000d841008086440000e04100808d440000d841002094440000d841ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300d000000c7ae0000d316010053ab0000ef8b0000abc30100f38c00009fdd00006f770100ab750000b3b60000e3b40000d316010023850000", data403, 776);
        auto slug403 = sktext::gpu::Slug::Deserialize(data403, 776);
        free(data403);
        void *paintdata_slug403 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug403, 28);
        SkReadBuffer paintbuffer_slug403 = SkReadBuffer(paintdata_slug403, 28);
        SkPaint paint_slug403 = SkPaintPriv::Unflatten(paintbuffer_slug403);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data404 = malloc(472);
        hexToRawData("0000803f000040c2fa7ec1430000a0400000604200a82046400200000000803f0000000000006042000000000000803f00001f4300000000000000000000803f020000000100000000000000010000000000803f0000000000006042000000000000803f00001f4300000000000000000000803f000064420000de420080c2430000244306000000000064420000de420000e2420000de42000029430000e042000062430000de4200008d430000de420000a9430000de42ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300600000000dc000044bd00006c5f01006c4b0100f48c0000f48500000100000000000000010000000000803f0000000000006042000000000000803f00001f4300000000000000000000803f0000cd43000018430080dd4300002043030000000000cd43000018430080d343000018430000da4300001843eace81b94c00000001000000636572733800000002000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000f80b0000f80b0000f80b0000", data404, 472);
        auto slug404 = sktext::gpu::Slug::Deserialize(data404, 472);
        free(data404);
        void *paintdata_slug404 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug404, 28);
        SkReadBuffer paintbuffer_slug404 = SkReadBuffer(paintdata_slug404, 28);
        SkPaint paint_slug404 = SkPaintPriv::Unflatten(paintbuffer_slug404);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data405 = malloc(240);
        hexToRawData("00000040000040c20000dc420000a04000f8de4300a82046f80000000000803f0000000000f8de43000000000000803f00001f4300000000000000000000803f010000000100000000000000010000000000803f0000000000f8de43000000000000803f00001f4300000000000000000000803f0000e0430000de4200000b4400002443020000000000e0430000e0420000fc430000de42c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300200000060820000dcd20000", data405, 240);
        auto slug405 = sktext::gpu::Slug::Deserialize(data405, 240);
        free(data405);
        void *paintdata_slug405 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug405, 28);
        SkReadBuffer paintbuffer_slug405 = SkReadBuffer(paintdata_slug405, 28);
        SkPaint paint_slug405 = SkPaintPriv::Unflatten(paintbuffer_slug405);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect430 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect430, 28);
        SkReadBuffer paintBuffer_rect430(paintdata_rect430, 28);
        SkPaint paintRect430 = SkPaintPriv::Unflatten(paintBuffer_rect430);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage130;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 360);
        fakeImage130.allocPixels(ii);
        SkCanvas tmp(fakeImage130);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 360), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -10302.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 10302.000000, 1344.000000, 10910.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect427);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect428);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 10906.000000, 1316.000000, 10909.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect429);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug402->draw(canvas, paint_slug402);
        slug402->draw(canvas);
        free(paintdata_slug402);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug403->draw(canvas, paint_slug403);
        slug403->draw(canvas);
        free(paintdata_slug403);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug404->draw(canvas, paint_slug404);
        slug404->draw(canvas);
        free(paintdata_slug404);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug405->draw(canvas, paint_slug405);
        slug405->draw(canvas);
        free(paintdata_slug405);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 10340.000000, 1274.000000, 10754.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 10340.000000, 453.000000, 10736.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect430);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage130)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 360.000000, 360.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 10340.000000, 453.000000, 10736.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage130);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 803019323051A401196E7678C65A85ED_1759762430836460.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest94, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect431 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect431, 28);
        SkReadBuffer paintBuffer_rect431(paintdata_rect431, 28);
        SkPaint paintRect431 = SkPaintPriv::Unflatten(paintBuffer_rect431);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect432 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect432, 28);
        SkReadBuffer paintBuffer_rect432(paintdata_rect432, 28);
        SkPaint paintRect432 = SkPaintPriv::Unflatten(paintBuffer_rect432);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect433 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect433, 28);
        SkReadBuffer paintBuffer_rect433(paintdata_rect433, 28);
        SkPaint paintRect433 = SkPaintPriv::Unflatten(paintBuffer_rect433);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect434 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect434, 28);
        SkReadBuffer paintBuffer_rect434(paintdata_rect434, 28);
        SkPaint paintRect434 = SkPaintPriv::Unflatten(paintBuffer_rect434);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect435 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect435, 28);
        SkReadBuffer paintBuffer_rect435(paintdata_rect435, 28);
        SkPaint paintRect435 = SkPaintPriv::Unflatten(paintBuffer_rect435);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data406 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000002842006c2946e80000000000803f0000000000002842000000000000803f0000e44200000000000000000000803f010000000100000000000000010000000000803f0000000000002842000000000000803f0000e44200000000000000000000803f00005042000088420000e0420000e042010000000000504200008842824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000030000000", data406, 228);
        auto slug406 = sktext::gpu::Slug::Deserialize(data406, 228);
        free(data406);
        void *paintdata_slug406 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug406, 28);
        SkReadBuffer paintbuffer_slug406 = SkReadBuffer(paintdata_slug406, 28);
        SkPaint paint_slug406 = SkPaintPriv::Unflatten(paintbuffer_slug406);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data407 = malloc(252);
        hexToRawData("00000040000008c278bd9b420000000000000f43004c2946080100000000803f0000000000000f43000000000000803f0000d44200000000000000000000803f010000000100000000000000010000000000803f0000000000000f43000000000000803f0000d44200000000000000000000803f000011430000904200005c430000d44203000000000011430000904200002d43000092420000444300009242b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000ec090000e8090000f7090000", data407, 252);
        auto slug407 = sktext::gpu::Slug::Deserialize(data407, 252);
        free(data407);
        void *paintdata_slug407 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug407, 28);
        SkReadBuffer paintbuffer_slug407 = SkReadBuffer(paintdata_slug407, 28);
        SkPaint paint_slug407 = SkPaintPriv::Unflatten(paintbuffer_slug407);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data408 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc4000a89d43006c2946e80000000000803f0000000000a89d43000000000000803f0000e44200000000000000000000803f010000000100000000000000010000000000803f0000000000a89d43000000000000803f0000e44200000000000000000000803f00809f43000078420080bc430000ee420100000000809f4300007842824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000035000000", data408, 228);
        auto slug408 = sktext::gpu::Slug::Deserialize(data408, 228);
        free(data408);
        void *paintdata_slug408 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug408, 28);
        SkReadBuffer paintbuffer_slug408 = SkReadBuffer(paintdata_slug408, 28);
        SkPaint paint_slug408 = SkPaintPriv::Unflatten(paintbuffer_slug408);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data409 = malloc(252);
        hexToRawData("00000040000008c278bd9b420000803f000ec543004c2946080100000000803f00000000000ec543000000000000803f0000d44200000000000000000000803f010000000100000000000000010000000000803f00000000000ec543000000000000803f0000d44200000000000000000000803f0000c643000090420000ec430000d642030000000000c643000090420000d343000090420080df4300009242b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43003000000ec090000040a0000f4090000", data409, 252);
        auto slug409 = sktext::gpu::Slug::Deserialize(data409, 252);
        free(data409);
        void *paintdata_slug409 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug409, 28);
        SkReadBuffer paintbuffer_slug409 = SkReadBuffer(paintdata_slug409, 28);
        SkPaint paint_slug409 = SkPaintPriv::Unflatten(paintbuffer_slug409);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data410 = malloc(228);
        hexToRawData("0000000000805cc2007191420000fc40009b0d44006c2946e80000000000803f00000000009b0d44000000000000803f0000e44200000000000000000000803f010000000100000000000000010000000000803f00000000009b0d44000000000000803f0000e44200000000000000000000803f00800e440000784200801c440000ee420100000000800e4400007842824f0c154c0000000100000063657273380000000600000000007c420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430010000003a000000", data410, 228);
        auto slug410 = sktext::gpu::Slug::Deserialize(data410, 228);
        free(data410);
        void *paintdata_slug410 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug410, 28);
        SkReadBuffer paintbuffer_slug410 = SkReadBuffer(paintdata_slug410, 28);
        SkPaint paint_slug410 = SkPaintPriv::Unflatten(paintbuffer_slug410);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data411 = malloc(264);
        hexToRawData("00000040000008c2349cbf420000803f00df2044004c2946180100000000803f0000000000df2044000000000000803f0000d44200000000000000000000803f010000000100000000000000010000000000803f0000000000df2044000000000000803f0000d44200000000000000000000803f004021440000904200c038440000d64204000000004021440000904200c027440000904200402e44000090420040354400009242b8da91df4c0000000100000063657273380000000b000000000036420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43004000000f20900000a0a0000050a0000e9090000", data411, 264);
        auto slug411 = sktext::gpu::Slug::Deserialize(data411, 264);
        free(data411);
        void *paintdata_slug411 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug411, 28);
        SkReadBuffer paintbuffer_slug411 = SkReadBuffer(paintdata_slug411, 28);
        SkPaint paint_slug411 = SkPaintPriv::Unflatten(paintbuffer_slug411);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data412 = malloc(228);
        hexToRawData("1166bbbd000060c2b35d604200000000809f954400882946e80000000000803f00000000809f9544000000000000803f0000f24200000000000000000000803f010000000100000000000000010000000000803f00000000809f9544000000000000803f0000f24200000000000000000000803f00a096440000b44200c09b440000c2420100000000a096440000b442675c66004c00000001000000636572733800000004000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b4300100000008000000", data412, 228);
        auto slug412 = sktext::gpu::Slug::Deserialize(data412, 228);
        free(data412);
        void *paintdata_slug412 = malloc(28);
        hexToRawData("0000000000008040a1a0203ebdbc3c3ef1f0703ecdcc4c3f01030000", paintdata_slug412, 28);
        SkReadBuffer paintbuffer_slug412 = SkReadBuffer(paintdata_slug412, 28);
        SkPaint paint_slug412 = SkPaintPriv::Unflatten(paintbuffer_slug412);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data413 = malloc(288);
        hexToRawData("0000004000002cc2050092430000a0400000444300302c46380100000000803f0000000000004443000000000000803f0080914300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0080914300000000000000000000803f00004643000078430000f443000094430600000000004643000079430000774300007a4300809343000079430080ac43000079430000c54300007c430000dd430000784365cf00b04c00000001000000636572733800000003000000000044420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b430060000000429010080850000407a0000283f010000aa0000b0130100", data413, 288);
        auto slug413 = sktext::gpu::Slug::Deserialize(data413, 288);
        free(data413);
        void *paintdata_slug413 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug413, 28);
        SkReadBuffer paintbuffer_slug413 = SkReadBuffer(paintdata_slug413, 28);
        SkPaint paint_slug413 = SkPaintPriv::Unflatten(paintbuffer_slug413);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data414 = malloc(324);
        hexToRawData("0000803f0000e8c1baab4043000000000000444300242d46680100000000803f0000000000004443000000000000803f0000b04300000000000000000000803f010000000100000000000000010000000000803f0000000000004443000000000000803f0000b04300000000000000000000803f000045430080a1430080c2430000b04309000000000045430080a14300005c430000a94300006e430080a143000082430080a143000093430080a14300009d430080a1430080a8430000a4430000ad430080a1430000b8430080a143f6592eb64c0000000100000063657273380000000800000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b43009000000080a0000800c0000ef090000070a0000e8090000e4090000700c0000e7090000f7090000", data414, 324);
        auto slug414 = sktext::gpu::Slug::Deserialize(data414, 324);
        free(data414);
        void *paintdata_slug414 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug414, 28);
        SkReadBuffer paintbuffer_slug414 = SkReadBuffer(paintdata_slug414, 28);
        SkPaint paint_slug414 = SkPaintPriv::Unflatten(paintbuffer_slug414);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data415 = malloc(448);
        hexToRawData("00523641000008c22f659043000080400050c24300242d46200200000000803f000000000050c243000000000000803f0000b04300000000000000000000803f020000000100000000000000010000000000803f000000000050c243000000000000803f0000b04300000000000000000000803f0000c84300009f430080eb430000b243020000000000c84300809f430080dd4300009f43817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b4300200000054da00006a4401000100000000000000010000000000803f000000000050c243000000000000803f0000b04300000000000000000000803f0080f34300809f43008029440000b243050000000080f34300809f430080034400809f4300000d4400809f4300c0164400809f43008020440080a043817a60344c0000000100000063657273380000000900000000001a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000929292ff590000000100b430050000007abb0000288a0000da630100049f01009e8c0000", data415, 448);
        auto slug415 = sktext::gpu::Slug::Deserialize(data415, 448);
        free(data415);
        void *paintdata_slug415 = malloc(28);
        hexToRawData("00000000000080409493133f9493133f9493133f0000803f01030000", paintdata_slug415, 28);
        SkReadBuffer paintbuffer_slug415 = SkReadBuffer(paintdata_slug415, 28);
        SkPaint paint_slug415 = SkPaintPriv::Unflatten(paintbuffer_slug415);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data416 = malloc(300);
        hexToRawData("0000803f000040c20000c3430000c0400000604200202f46480100000000803f0000000000006042000000000000803f0080ef4300000000000000000000803f010000000100000000000000010000000000803f0000000000006042000000000000803f0080ef4300000000000000000000803f000064420080d7430000df430080f24307000000000064420080d7430000e2420080d74300002b430080d943000061430000d84300008d430080d7430000a9430080d7430000c5430080d743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43007000000247c01001c08010000aa0000207c01002879000000c800007cb90000", data416, 300);
        auto slug416 = sktext::gpu::Slug::Deserialize(data416, 300);
        free(data416);
        void *paintdata_slug416 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug416, 28);
        SkReadBuffer paintbuffer_slug416 = SkReadBuffer(paintdata_slug416, 28);
        SkPaint paint_slug416 = SkPaintPriv::Unflatten(paintbuffer_slug416);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage131;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(96, 96);
        fakeImage131.allocPixels(ii);
        SkCanvas tmp(fakeImage131);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 96, 96), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage132;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(96, 96);
        fakeImage132.allocPixels(ii);
        SkCanvas tmp(fakeImage132);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 96, 96), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data417 = malloc(324);
        hexToRawData("00000041000040c20080fb430000104100800f4400202f46680100000000803f0000000000800f44000000000000803f0080ef4300000000000000000000803f010000000100000000000000010000000000803f0000000000800f44000000000000803f0080ef4300000000000000000000803f008011440080d74300a086440000f44309000000008011440080ec4300c01d440080d74300c02b440080d74300003a440080d743004048440000d843008056440080d743008065440080d743000072440080d743000080440080d743ea98a2d84c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000242424ff590000000100b43009000000a8c3010068a100000cc60000ac840000a8770000d016010068440100e8ac0000ccbb0000", data417, 324);
        auto slug417 = sktext::gpu::Slug::Deserialize(data417, 324);
        free(data417);
        void *paintdata_slug417 = malloc(28);
        hexToRawData("0000000000008040cdcc4c3ecdcc4c3ecdcc4c3e0000803f01030000", paintdata_slug417, 28);
        SkReadBuffer paintbuffer_slug417 = SkReadBuffer(paintdata_slug417, 28);
        SkPaint paint_slug417 = SkPaintPriv::Unflatten(paintbuffer_slug417);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage133;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(96, 96);
        fakeImage133.allocPixels(ii);
        SkCanvas tmp(fakeImage133);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 96, 96), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage134;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(96, 96);
        fakeImage134.allocPixels(ii);
        SkCanvas tmp(fakeImage134);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 96, 96), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage135;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(42, 42);
        fakeImage135.allocPixels(ii);
        SkCanvas tmp(fakeImage135);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 42, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data418 = malloc(348);
        hexToRawData("00000040000040c2008019440000a0400000ee4200843046880100000000803f000000000000ee42000000000000803f00000e4400000000000000000000803f010000000100000000000000010000000000803f000000000000ee42000000000000803f00000e4400000000000000000000803f0000f242000002440040374400400f440b0000000000f242000002440000314300400244000068430040024400809043000002440000ad43000003440000c843000002440080e54300000244000000440000024400400e440000024400401c440000024400002a4400000244c31e6b3d4c00000001000000636572733800000007000000000060420000803f000000000000803f00000000000000000000803f000080bf0000000000000000926d24ff590000000100b4300b0000000429010080850000407a0000283f010000aa0000b0130100d016010078bb0000288a0000d8630100049f0100", data418, 348);
        auto slug418 = sktext::gpu::Slug::Deserialize(data418, 348);
        free(data418);
        void *paintdata_slug418 = malloc(28);
        hexToRawData("0000000000008040f1f0703edddcdc3e9f9e1e3f0000803f01030000", paintdata_slug418, 28);
        SkReadBuffer paintbuffer_slug418 = SkReadBuffer(paintdata_slug418, 28);
        SkPaint paint_slug418 = SkPaintPriv::Unflatten(paintbuffer_slug418);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect436 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect436, 28);
        SkReadBuffer paintBuffer_rect436(paintdata_rect436, 28);
        SkPaint paintRect436 = SkPaintPriv::Unflatten(paintBuffer_rect436);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage136;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(360, 360);
        fakeImage136.allocPixels(ii);
        SkCanvas tmp(fakeImage136);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 360, 360), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect149 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rrect149, 28);
        SkReadBuffer paintBuffer_rrect149(paintdata_rrect149, 28);
        SkPaint paintRRect149 = SkPaintPriv::Unflatten(paintBuffer_rrect149);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage137;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(145, 145);
        fakeImage137.allocPixels(ii);
        SkCanvas tmp(fakeImage137);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 145, 145), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage138;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(54, 42);
        fakeImage138.allocPixels(ii);
        SkCanvas tmp(fakeImage138);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 54, 42), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect150 = malloc(28);
        hexToRawData("000040400000804079e9663f79e9663f79e9663f9a99193e01031000", paintdata_rrect150, 28);
        SkReadBuffer paintBuffer_rrect150(paintdata_rrect150, 28);
        SkPaint paintRRect150 = SkPaintPriv::Unflatten(paintBuffer_rrect150);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ConcatOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawOvalOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawPathOp
        void *pathdata58 = malloc(92);
        hexToRawData("05010000080000000000000009000000f4fd6c40310854400000a04083c0be407b14ca4031085440713dee4031085440e04fb1407493e44021b08e407493e440bd74234030085440f4fd6c4030085440000101010101010105000000", pathdata58, 92);
        SkPath path58;
        path58.readFromMemory(pathdata58, 92);
        void *paintdata_path58 = malloc(28);
        hexToRawData("0000000000008040fefd7d3ffffe7e3fbbbaba3e0000803f01030000", paintdata_path58, 28);
        SkReadBuffer paintBuffer_path58(paintdata_path58, 28);
        SkPaint paintPath58 = SkPaintPriv::Unflatten(paintBuffer_path58);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -10908.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 10908.000000, 1344.000000, 11516.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect431);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect432);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 10906.000000, 1316.000000, 10909.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect433);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 10909.000000, 1316.000000, 12222.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 10909.000000, 1316.000000, 12222.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect434);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 12219.000000, 1316.000000, 12222.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect435);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug406->draw(canvas, paint_slug406);
        slug406->draw(canvas);
        free(paintdata_slug406);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug407->draw(canvas, paint_slug407);
        slug407->draw(canvas);
        free(paintdata_slug407);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug408->draw(canvas, paint_slug408);
        slug408->draw(canvas);
        free(paintdata_slug408);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug409->draw(canvas, paint_slug409);
        slug409->draw(canvas);
        free(paintdata_slug409);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug410->draw(canvas, paint_slug410);
        slug410->draw(canvas);
        free(paintdata_slug410);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug411->draw(canvas, paint_slug411);
        slug411->draw(canvas);
        free(paintdata_slug411);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug412->draw(canvas, paint_slug412);
        slug412->draw(canvas);
        free(paintdata_slug412);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 10970.000000, 1274.000000, 11039.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug413->draw(canvas, paint_slug413);
        slug413->draw(canvas);
        free(paintdata_slug413);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 11039.000000, 1274.000000, 11097.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug414->draw(canvas, paint_slug414);
        slug414->draw(canvas);
        free(paintdata_slug414);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug415->draw(canvas, paint_slug415);
        slug415->draw(canvas);
        free(paintdata_slug415);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 10909.000000, 1316.000000, 12222.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug416->draw(canvas, paint_slug416);
        slug416->draw(canvas);
        free(paintdata_slug416);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage131)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 96.000000, 96.000000);
    SkRect dst = SkRect::MakeLTRB(448.000000, 11157.000000, 504.000000, 11213.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage131);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage132)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 96.000000, 96.000000);
    SkRect dst = SkRect::MakeLTRB(511.000000, 11157.000000, 567.000000, 11213.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage132);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug417->draw(canvas, paint_slug417);
        slug417->draw(canvas);
        free(paintdata_slug417);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage133)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 96.000000, 96.000000);
    SkRect dst = SkRect::MakeLTRB(1078.000000, 11157.000000, 1134.000000, 11213.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage133);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage134)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 96.000000, 96.000000);
    SkRect dst = SkRect::MakeLTRB(1141.000000, 11157.000000, 1197.000000, 11213.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage134);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage135)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 11246.000000, 112.000000, 11302.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage135);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug418->draw(canvas, paint_slug418);
        slug418->draw(canvas);
        free(paintdata_slug418);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 9395.000000, 1316.000000, 10909.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 10340.000000, 1274.000000, 10754.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 10340.000000, 453.000000, 10736.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect436);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage136)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 360.000000, 360.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 10340.000000, 453.000000, 10736.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage136);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 10909.000000, 1316.000000, 12222.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 10962.000000, 168.000000, 11074.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect149);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(56.000000, 10962.000000, 168.000000, 11074.000000);
        SkVector radii[4] = { { 56.000000,56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            { 56.000000, 56.000000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        canvas->clipRRect(rrect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage137)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 145.000000, 145.000000);
    SkRect dst = SkRect::MakeLTRB(56.000000, 10962.000000, 168.000000, 11074.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage137);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(196.000000, 10970.000000, 1274.000000, 11039.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage138)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 0.000000, 54.000000, 42.000000);
    SkRect dst = SkRect::MakeLTRB(514.000000, 10978.000000, 577.000000, 11027.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage138);

    if (true) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)true);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 10909.000000, 1316.000000, 12222.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(57.500000, 10963.500000, 166.500000, 11072.500000);
        SkVector radii[4] = { { 54.500000,54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            { 54.500000, 54.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect150);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 10909.000000, 1316.000000, 12222.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(123.000000, 11028.000000, 172.000000, 11077.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(3.500000,0.000000,0.000000,74.000000,0.000000,3.500000,0.000000,10244.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 42.000000, 1218.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ConcatOp\n";
{
            SkM44 mat = SkM44(1.400000,0.000000,0.000000,14.000000,0.000000,1.400000,0.000000,224.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
            canvas->concat(mat);
            }
        
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(0.000000, 0.000000, 10.000000, 10.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawOvalOp\n";
{
            SkRect oval = SkRect::MakeLTRB(1.000000, 1.000000, 9.000000, 9.000000);
            SkPaint p;
            p.setColor(SkColors::kRed);
        canvas->drawOval(oval, p);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawPathOp\n";
{
        canvas->drawPath(path58, paintPath58);
        free(pathdata58);
        free(paintdata_path58);
    }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 16B473D3C85BD4DE6B9B34C2E674F595_1759762431224334.paintbuf
// Failed to find matching Op: StrikeClientLo
// Failed to find matching Op: Noop

                DEF_SIMPLE_GM(loggedskiatest95, canvas, 1344, 608) {
                
std::cout << "init op type: RestoreOp\n";
//StrikeClientLo
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect437 = malloc(28);
        hexToRawData("0000000000008040f3f2723ff3f2723ff3f2723f0000803f01010000", paintdata_rect437, 28);
        SkReadBuffer paintBuffer_rect437(paintdata_rect437, 28);
        SkPaint paintRect437 = SkPaintPriv::Unflatten(paintBuffer_rect437);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect438 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_rect438, 28);
        SkReadBuffer paintBuffer_rect438(paintdata_rect438, 28);
        SkPaint paintRect438 = SkPaintPriv::Unflatten(paintBuffer_rect438);
    
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect439 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect439, 28);
        SkReadBuffer paintBuffer_rect439(paintdata_rect439, 28);
        SkPaint paintRect439 = SkPaintPriv::Unflatten(paintBuffer_rect439);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//TranslateOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect440 = malloc(28);
        hexToRawData("00000000000080400000000000000000000000000000803f01030000", paintdata_rect440, 28);
        SkReadBuffer paintBuffer_rect440(paintdata_rect440, 28);
        SkPaint paintRect440 = SkPaintPriv::Unflatten(paintBuffer_rect440);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect441 = malloc(28);
        hexToRawData("0000000000008040e7e6663fe7e6663fe7e6663f0000803f01030000", paintdata_rect441, 28);
        SkReadBuffer paintBuffer_rect441(paintdata_rect441, 28);
        SkPaint paintRect441 = SkPaintPriv::Unflatten(paintBuffer_rect441);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//ClipRectOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawImageRectOp
           static SkBitmap fakeImage139;
  {
        SkImageInfo ii = SkImageInfo::MakeN32Premul(480, 853);
        fakeImage139.allocPixels(ii);
        SkCanvas tmp(fakeImage139);
        tmp.clear(SK_ColorTRANSPARENT);
        SkPaint p;
        p.setAntiAlias(true);
        p.setColor(SkColors::kBlue);
        tmp.drawRect(SkRect::MakeLTRB(0, 0, 480, 853), p);
  }
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRRectOp
        void *paintdata_rrect151 = malloc(28);
        hexToRawData("0000000000008040000000000000000000000000cdcccc3e01030000", paintdata_rrect151, 28);
        SkReadBuffer paintBuffer_rrect151(paintdata_rrect151, 28);
        SkPaint paintRRect151 = SkPaintPriv::Unflatten(paintBuffer_rrect151);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawSlugOp
        void *data419 = malloc(228);
        hexToRawData("0000000080e686c2a0c9d34300341b4100589243004c3746e80000000000803f0000000000589243000000000000803f0000c64300000000000000000000803f010000000100000000000000010000000000803f0000000000589243000000000000803f0000c64300000000000000000000803f008096430000a4430080b4430000cb4301000000008096430000a4431a3f826b4c0000000100000063657273380000000d00000000009a420000803f000000000000803f00000000000000000000803f000080bf0000000000000000ffffffff590000000100b430010000000b000000", data419, 228);
        auto slug419 = sktext::gpu::Slug::Deserialize(data419, 228);
        free(data419);
        void *paintdata_slug419 = malloc(28);
        hexToRawData("00000000000080400000803f0000803f0000803f0000803f01030000", paintdata_slug419, 28);
        SkReadBuffer paintbuffer_slug419 = SkReadBuffer(paintdata_slug419, 28);
        SkPaint paint_slug419 = SkPaintPriv::Unflatten(paintbuffer_slug419);
        
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//SaveOp
std::cout << "init op type: RestoreOp\n";
//DrawRectOp
        void *paintdata_rect442 = malloc(320);
        hexToRawData("00000000000080400000000000000000000000000000803f030300020000000013000000536b4c6f63616c4d617472697853686164657200f40000000000803f0000000000006042000000000000803f003c3a4600000000000000000000803f10000000536b4c696e6561724772616469656e7400000000b4000000010000a0040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdcc4c3e000000000000000000000000cdcc4c3e44000000010000009a9919406ea7723f1989553d91839e3de6ae253d00000000000000000044df3e0032c53e0080123e00d4633e0085373f0040783d0000643c00d0c63d00cf363f04000000000000008fc2f53c48e17a3f0000803f0000000000000000000000000000fc4200000000000000000000000000000000", paintdata_rect442, 320);
        SkReadBuffer paintBuffer_rect442(paintdata_rect442, 320);
        SkPaint paintRect442 = SkPaintPriv::Unflatten(paintBuffer_rect442);
    
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//RestoreOp
std::cout << "init op type: RestoreOp\n";
//Noop
std::cout << "init op type: RestoreOp\n";
//RestoreOp
// Begin rendering ops to skia
std::cout << "render op type: StrikeClientLo\n";
// Render not implemented for: StrikeClientLo
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, -11514.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 11514.000000, 1344.000000, 12122.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, false);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 0.000000, 1316.000000, 18663.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect437);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 10909.000000, 1316.000000, 12222.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 10909.000000, 1316.000000, 12222.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect438);
        }
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(0.000000, 12219.000000, 1316.000000, 12222.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect439);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: TranslateOp\n";
canvas->translate(0.000000, 179.000000);
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(0.000000, 10909.000000, 1316.000000, 12222.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 11360.000000, 589.000000, 12045.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect440);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 11360.000000, 589.000000, 12045.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect441);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: ClipRectOp\n";
{
            SkRect rect = SkRect::MakeLTRB(56.000000, 11360.000000, 589.000000, 12045.000000);
            canvas->clipRect(rect, SkClipOp::kIntersect, true);
        }
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawImageRectOp\n";

{
    //if (!fakeImage139)
    //    break;
    SkRect src = SkRect::MakeLTRB(0.000000, 117.996834, 479.999969, 735.003174);
    SkRect dst = SkRect::MakeLTRB(56.000000, 11360.000000, 589.000000, 12045.000000);
    SkPaint p;
    p.setColor(SkColors::kBlue);
    SkSamplingOptions options;
    //options.maxAniso = 0;
    //options.useCubic = false;
    //options.cubic = {0.000000,0.000000};
    //options.filterMode = 1;
    //options.mipmapMode = 2;
    sk_sp<SkImage> imagesk = SkImages::RasterFromBitmap(fakeImage139);

    if (false) {
        SkMatrix m;
        m.setRectToRect(src, dst, SkMatrix::ScaleToFit::kFill_ScaleToFit);
        canvas->save();
        canvas->concat(m);
        canvas->drawImage(imagesk.get(), 0, 0, options, &p);
        canvas->restore();
    }
    else
        canvas->drawImageRect(imagesk.get(), src, dst, options, &p,  (SkCanvas::SrcRectConstraint)false);
}
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRRectOp\n";
{
        SkRect rect = SkRect::MakeLTRB(228.000000, 11608.000000, 417.000000, 11797.000000);
        SkVector radii[4] = { { 94.500000,94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            { 94.500000, 94.500000 },
            };
        int type = 0;

        // private constructor, can't use: SkRRect rrect(rect, radii, type);
        SkRRect rrect;
        rrect.setRectRadii(rect, radii);
        //SkPaint p;
        //p.setColor(SkColors::kGreen);
        canvas->drawRRect(rrect, paintRRect151);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawSlugOp\n";
{
        //slug419->draw(canvas, paint_slug419);
        slug419->draw(canvas);
        free(paintdata_slug419);
        }
        
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: SaveOp\n";
canvas->save();
std::cout << "render op type: DrawRectOp\n";
{
        SkRect rect= SkRect::MakeLTRB(56.000000, 11919.000000, 589.000000, 12045.000000);
        //SkPaint p;
        //p.setColor(SkColors::kYellow);
        canvas->drawRect(rect, paintRect442);
        }
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: RestoreOp\n";
canvas->restore();
std::cout << "render op type: Noop\n";
// Render not implemented for: Noop
std::cout << "render op type: RestoreOp\n";
canvas->restore();
}// End Paint Buffer: 717C17E6E1E1C977E2C06E0B177EE19F_1759762432247083.paintbuf
